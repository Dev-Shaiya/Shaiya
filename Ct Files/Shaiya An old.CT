<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="34">
  <Forms>
    <UDF1 Class="TCEForm" Encoding="Ascii85">D]H=@2nldAU:MM2b.}cxWeIh0Gi32eO*FuxWMuP5%{mcIVgA6t9Fkwa6vP@ynNpI$=7,z9n3I!V=oyOr.Fg)[TFlAim^X9E:#-P1m%[;6SXz:FoLQC1$=lw3P=DLS#_Ac)!zDjCJ2/l;m6L%100</UDF1>
    <UDF1_1 Class="TCEForm" Encoding="Ascii85">D]H=@2nldAU:MM2b.}cxWeIh0Gi32eO*FuxWMuP5%{mcIVgA6t9Fkwa6vP@ynNpI$=7,z9n3I!V=oyOr.Fg)[TFlAim^X9E:#-P1m%[;6SXz:FoLQC1$=lw3P=DLS#_Ac)!zDjCJ2/l;m6L%100</UDF1_1>
    <UDF1_2 Class="TCEForm" Encoding="Ascii85">D]H=@2nldAU:MM2b.}cxWeIh0Gi32eO*FuxWMuP5%{mcIVgA6t9Fkwa6vP@ynNpI$=7,z9n3I!V=oyOr.Fg)[TFlAim^X9E:#-P1m%[;6SXz:FoLQC1$=lw3P=DLS#_Ac)!zDjCJ2/l;m6L%100</UDF1_2>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Works"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>438</ID>
          <Description>"Features"</Description>
          <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>804000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>473</ID>
              <Description>"Boss Death Notice"</Description>
              <LastState/>
              <Color>804000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,1024)

// ebx = mob pointer
// eax = player pointer
newmem:
call func_send_notice

originalcode:
lea ecx, dword ptr [ebx+DD4]
jmp returnhere

func_send_notice:
pushad

mov esi,eax
add esi,184

mov ebx, dword ptr [ebx+D4]
add ebx,2

sub esp,#100

mov edi,esp

push #100
push 0
push edi
call msvcrt.memset
add esp,C

mov word ptr [edi],F90B
mov byte ptr [edi+2],FF

push ebx
push edi
call msvcrt.strcat
add esp,8

push notice_text
push edi
call msvcrt.strcat
add esp,8

push esi
push edi
call msvcrt.strcat
add esp,8

push edi
call msvcrt.strlen
add esp,4

mov byte ptr [edi+2],al

mov esi, dword ptr [00587960]
movzx eax, byte ptr [edi+2]
add eax,3
mov ecx,edi
call 00419120

add esp,#100

func_send_notice_exit:
popad
ret

notice_text:
db ' was just killed by '
db 0

004A2083:
jmp newmem
nop
returnhere:

[DISABLE]

004A2083:
lea ecx, dword ptr [ebx+DD4]

dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>472</ID>
              <Description>"Boss Spawn Notice"</Description>
              <LastState/>
              <Color>804000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,1024)

// ebx = mob pointer
newmem:
call func_send_notice

originalcode:
lea edx, dword ptr [edi+98]
jmp returnhere

func_send_notice:
pushad

add ebx,2

sub esp,#100

mov edi,esp

push #100
push 0
push edi
call msvcrt.memset
add esp,C

mov word ptr [edi],F90B
mov byte ptr [edi+2],FF

push ebx
push edi
call msvcrt.strcat
add esp,8

push notice_text
push edi
call msvcrt.strcat
add esp,8

push edi
call msvcrt.strlen
add esp,4

mov byte ptr [edi+2],al

mov esi, dword ptr [00587960]
movzx eax, byte ptr [edi+2]
add eax,3
mov ecx,edi
call 00419120

add esp,#100

func_send_notice_exit:
popad
ret

notice_text:
db ' just spawned!'
db 0

00422F0D:
jmp newmem
nop
returnhere:

[DISABLE]

00422F0D:
lea edx, dword ptr [edi+98]

dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>344</ID>
              <Description>"Remove Deaths"</Description>
              <LastState/>
              <Color>804000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
ps_game.exe+67F46:
add byte ptr [esp+0A],00

[DISABLE]

ps_game.exe+67F46:
mov byte ptr [esp+0A],01
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>57</ID>
              <Description>"Enable summon and movement in Map 67 (Dios Room)"</Description>
              <LastState/>
              <Color>804000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

004733E9:
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

00473567:
nop
nop
nop
nop
nop
nop

[DISABLE]

004733E9:
cmp dword ptr [ecx+78],#67
je 0047468A

00473567:
cmp dword ptr [ecx+78],#67
je 00473557
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>627</ID>
              <Description>"Removal EXP 15 and 30"</Description>
              <LastState/>
              <Color>804000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp byte ptr[esi+160], (int)18//MapID
je 00465222
cmp byte ptr[esi+160], (int)30//MapID
je 00465222
cmp byte ptr[esi+160], (int)105//MapID
je 00465222
originalcode:
cmp edi,eax
jae ps_game.exe+651B7
add edi,ebp

exit:
jmp returnhere

"ps_game.exe"+65177:
jmp newmem
nop
returnhere:



[DISABLE]
"ps_game.exe"+65177:
cmp edi,eax
jae ps_game.exe+651B7
add edi,ebp
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>594</ID>
              <Description>"Allow duels vs just in arena"</Description>
              <LastState/>
              <Color>408000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
mov cl,[ebx+0000012D]
cmp word ptr [ebx+160],(int)40
je 0048BE8C
jmp 0048BFAA

originalcode:


exit:
jmp returnhere

"ps_game.exe"+8BE80:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8BE80:
mov cl,[ebx+0000012D]
//Alt: db 8A 8B 2D 01 00 00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>628</ID>
              <Description>"Cross faction"</Description>
              <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <Color>804000</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>454</ID>
                  <Description>"Cross Faction Trade on AH"</Description>
                  <LastState/>
                  <Color>804000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp word ptr [ebx+0x160],#42
je 0047d9bc

originalcode:
cmp cl,[ebx+0000012D]

exit:
jmp returnhere

"ps_game.exe"+7D9B0:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+7D9B0:
cmp cl,[ebx+0000012D]
//Alt: db 3A 8B 2D 01 00 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>631</ID>
                  <Description>"Cross Faction Whisper all maps"</Description>
                  <LastState/>
                  <Color>804000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
0047f629:
db 90 90 90 90 90 90

0047ff69:
db 90 90 90 90 90 90


[DISABLE]
0047f629:
db 0F 85 DF 00 00 00

0047ff69:
db 0F 85 DF 00 00 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>630</ID>
                  <Description>"Cross Faction Inspect on AH"</Description>
                  <LastState/>
                  <Color>804000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp word ptr [eax+0x160],#42
je 00477d4f

originalcode:
cmp cl,[eax+0000012D]

exit:
jmp returnhere

"ps_game.exe"+77D43:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+77D43:
cmp cl,[eax+0000012D]
//Alt: db 3A 88 2D 01 00 00
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>261</ID>
              <Description>"Drop Yourself (without party) - Random Drop fix"</Description>
              <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>125</ID>
                  <Description>"Gold To Inventory"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,512)
label(returnhere)

label(solo)
label(solo_bonus)
label(solo_bonus_ok)
label(solo_bonus_wtc)
label(solo_bonus_rpc)

newmem:
mov eax, dword ptr [esp+44] // raid pointer
test eax,eax
je solo
jmp returnhere

solo:
mov edx, dword ptr [esp+40] // player pointer
test edx,edx
je 004BAE0D

cmp dword ptr [edx+594C],2
je solo_bonus_wtc
cmp dword ptr [edx+594C],3
je solo_bonus_rpc

solo_bonus_ok:
mov ecx, dword ptr [esp+18]
call 0046BBA0
jmp 004BAEB8

solo_bonus:
sub esp,4
fild dword ptr [esp+1C]
fld dword ptr [esp]
fmul st(1),st(0)
fstp dword ptr [esp]
fistp dword ptr [esp+1C]
add esp,4
jmp solo_bonus_ok

solo_bonus_wtc:
mov dword ptr [esp-4],(float)1.200 // White Tiger Charm = +20%
jmp solo_bonus

solo_bonus_rpc:
mov dword ptr [esp-4],(float)1.500 // Red Phoenix Charm = +50%
jmp solo_bonus

004BAD4C:
jmp newmem
nop
nop
nop
nop
nop
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)

004BAD4C:
mov eax, dword ptr [esp+44]
test eax,eax
je 004BAE0D
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>127</ID>
                  <Description>"Drop To Inventory"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,128)
label(returnhere)
label(solo)

newmem:
test ebp,ebp
je solo
jmp returnhere

solo:
mov ecx, dword ptr [esp+18]
test ecx,ecx
je 004BB438
push ebx
call 0046AE60
jmp 004BB47A

004BB1D5:
jmp newmem
nop
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)

004BB1D5:
test ebp,ebp
je 004BB438
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>226</ID>
                  <Description>"Random Drop"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,1024)
label(returnhere)
label(originalcode)
label(exit)

define(stack_alloc,100)

// 4 bytes - global random drop count
// 4 bytes - x10,000 account random drop count
//alloc(player_random_drop_order,40004)
//define(accounts,#10000)

// ebp = raid
newmem:
cmp dword ptr [esp+18],0 // Killer
je originalcode

push ebx
sub esp,stack_alloc

mov esi,esp // store the stack pointer

// clear the memory
push stack_alloc
push 0
push esi
call msvcrt.memset
add esp,C

lea eax, dword ptr [ebp+118]
mov dword ptr [esi+stack_alloc-4],eax
push eax
call dword ptr [005540DC] // ntdll.RtlEnterCriticalSection

mov ecx, dword ptr [esi+stack_alloc+C] // mob
xor ebx,ebx

random_next:
mov edx, dword ptr [ebp+ebx*8+18]

cmp edx, dword ptr [esi+stack_alloc+1C]
je random_ok // skip all further checks for killer

push edx
push ecx
call func_is_player_within_range
test eax,eax
je random_next_check

random_ok:
mov eax, dword ptr [esi+stack_alloc-8]
mov dword ptr [esi+eax*4],edx
inc dword ptr [esi+stack_alloc-8]

random_next_check:
inc ebx
cmp ebx, dword ptr [ebp+10]
jb random_next

call msvcrt.rand
cdq
idiv dword ptr [esi+stack_alloc-8]

mov edx, dword ptr [esi+edx*4]

push ebp
push edx
call func_get_player_index_in_party

mov edx,eax // index of player in party

mov eax, dword ptr [esi+stack_alloc-4]
push eax
call dword ptr [005540D4] // ntdll.RtlLeaveCriticalSection

exit:
add esp,stack_alloc
pop ebx
jmp returnhere

originalcode:
call 0051BD66
cdq
idiv dword ptr [ebp+10]
jmp returnhere

// push player
// push mob
// call func_is_player_within_range
func_is_player_within_range:
push ecx
push edx
push ebx
sub esp,4

xor eax,eax // clearing the return value (false)

mov ecx, dword ptr [esp+14] // mob
mov edx, dword ptr [esp+18] // player

// comparing zone pointers
mov ebx, dword ptr [ecx+8C]
cmp ebx, dword ptr [edx+E0]
jne func_is_player_within_range_exit

 // load mob.X
fld dword ptr [ecx+7C]
// subtract player.X from it
fsub dword ptr [edx+D0]
// get the absolute value
fabs
 // square it
fmul st(0),st(0)
// store result in the stack and pop floating point register
fstp dword ptr [esp]

// load mob.Z
fld dword ptr [ecx+84]
// subtract player.Z from it
fsub dword ptr [edx+D8]
// get the absolute value
fabs
// square it
fmul st(0),st(0)
// add the value previously stored in stack to it
fadd dword ptr [esp]

// square root
fsqrt
// store result in the stack and pop floating point register
fstp dword ptr [esp]

cmp dword ptr [esp],(float)100.000 // max range
ja func_is_player_within_range_exit

inc eax // set return value to true
func_is_player_within_range_exit:
add esp,4
pop ebx
pop edx
pop ecx
ret 8

// push party
// push player
// call func_get_player_index_in_party
func_get_player_index_in_party:
push ecx
push edx
push ebx

mov ecx, dword ptr [esp+10] // player
mov edx, dword ptr [esp+14] // party

mov eax, dword ptr [edx+10] // party member count

func_get_player_index_in_party_next:
dec eax

cmp dword ptr [edx+eax*8+18],ecx
je func_get_player_index_in_party_exit

test eax,eax
jne func_get_player_index_in_party_next

func_get_player_index_in_party_exit:
pop ebx
pop edx
pop ecx
ret 8

//player_random_drop_order:
//dd CCCCCCCC

004BB266:
jmp newmem
nop
nop
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)
//dealloc(player_random_drop_order)

004BB266:
call 0051BD66
cdq
idiv dword ptr [ebp+10]
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>476</ID>
              <Description>"rune_cutting"</Description>
              <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>637</ID>
                  <Description>"jump_cutting"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>//Bowie 06/2020
[ENABLE]
alloc(jump_cutting,32)
label(return)
{stand/sit/jump packet bytes
06 05 01 00 00 00 00 - stand
06 05 01 00 00 00 01 - sit
06 05 01 00 00 00 02 - jump}
jump_cutting:
mov cl,[ebp+02]
cmp cl,02
//stops sending jump packets
je 00479155
//original code
mov [esp+22],edx
jmp return

0047894D:
jmp jump_cutting
nop
nop
return:

[DISABLE]
dealloc(jump_cutting)
0047894D:
mov cl,[ebp+02]
mov [esp+22],edx
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>635</ID>
                  <Description>"bootleggery"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>//by Bowie
[ENABLE]
alloc(newmem,32)
label(return)

newmem:
cmp dword ptr [ebp+00001270],02
je 0047468A
//original code
cmp dword ptr [eax+000001A4],00
jmp return

00473ED7:
jmp newmem
nop
nop
return:

[DISABLE]
dealloc(newmem)
00473ED7:
cmp dword ptr [eax+000001A4],00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>115</ID>
                  <Description>"arena recall"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>//by Bowie
[ENABLE]
alloc(newmem,32)
label(return)

newmem:
cmp dword ptr [ebp+00001270],02
je 0047468A
//original code
cmp dword ptr [eax+000001A4],00
jmp return

00473FFD:
jmp newmem
nop
nop
return:

[DISABLE]
dealloc(newmem)
00473FFD:
cmp dword ptr [eax+000001A4],00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>636</ID>
                  <Description>"capital recall"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>//by Bowie
[ENABLE]
alloc(newmem,32)
label(return)

newmem:
cmp dword ptr [ebp+00001270],02
je 0047468A
//original code
cmp dword ptr [eax+000001A4],00
jmp return

00473DB0:
jmp newmem
nop
nop
return:

[DISABLE]
dealloc(newmem)
00473DB0:
cmp dword ptr [eax+000001A4],00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>474</ID>
                  <Description>"guild house"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>//by Bowie
[ENABLE]
alloc(newmem,32)
label(return)

newmem:
cmp dword ptr [ebp+00001270],02
je 004742B6
//original code
cmp dword ptr [eax+000001A4],06
jmp return

00474196:
jmp newmem
nop
nop
return:

[DISABLE]
dealloc(newmem)
00474196:
cmp dword ptr [eax+000001A4],06
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>475</ID>
                  <Description>"party summon"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>//by [DEV]AkaneTendo
[ENABLE]
alloc(newmem,32)
label(return)

newmem:
cmp dword ptr [ebp+00001270],02
je 0047468A
//original code
cmp dword ptr [ebp+000058B8],00
jmp return

00473400:
jmp newmem
nop
nop
return:

[DISABLE]
dealloc(newmem)
00473400:
cmp dword ptr [ebp+000058B8],00
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>639</ID>
              <Description>"Dex fix "</Description>
              <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>224</ID>
                  <Description>"DEX Override (Melee)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(pop_originalcode)
label(originalcode)
label(success)

define(dex_per_percent,#12)
define(min_accuracy,#20)

// edi = attacker
// esi = target
newmem:
cmp byte ptr [edi+1385],1
je originalcode

push eax
push ecx
push edx
sub esp,10

mov eax, dword ptr [edi+1220]
mov ecx, dword ptr [esi+1220]

cmp eax,ecx
ja success

sub eax,ecx
mov dword ptr [esp],eax
mov dword ptr [esp+4],dex_per_percent
fild dword ptr [esp+4] // dex_per_percent
fild dword ptr [esp] // DEX difference
fabs
fdiv st(0), st(1)
fistp dword ptr [esp]
fistp dword ptr [esp+4]

mov esi,#100
sub esi, dword ptr [esp]

cmp esi,min_accuracy
jae pop_originalcode

mov esi,min_accuracy

pop_originalcode:
add esp,10
pop edx
pop ecx
pop eax

originalcode:
cmp esi,01
jmp returnhere

success:
mov esi,#100
jmp pop_originalcode

00463D4B:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)

00463D4B:
mov esi,eax
cmp esi,01
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>225</ID>
                  <Description>"DEX Override (Ranged)"</Description>
                  <LastState/>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(pop_originalcode)
label(originalcode)
label(success)

define(dex_per_percent,#12)
define(min_accuracy,#20)

// edi = attacker
// esi = target
newmem:
cmp byte ptr [edi+1395],1
je originalcode

push eax
push ecx
push edx
sub esp,10

mov eax, dword ptr [edi+1220]
mov ecx, dword ptr [esi+1220]

cmp eax,ecx
ja success

sub eax,ecx
mov dword ptr [esp],eax
mov dword ptr [esp+4],dex_per_percent
fild dword ptr [esp+4] // dex_per_percent
fild dword ptr [esp] // DEX difference
fabs
fdiv st(0), st(1)
fistp dword ptr [esp]
fistp dword ptr [esp+4]

mov esi,#100
sub esi, dword ptr [esp]

cmp esi,min_accuracy
jae pop_originalcode

mov esi,min_accuracy

pop_originalcode:
add esp,10
pop edx
pop ecx
pop eax

originalcode:
cmp esi,01
jmp returnhere

success:
mov esi,#100
jmp pop_originalcode

00463C9D:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)

00463C9D:
mov esi,eax
cmp esi,01
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>236</ID>
          <Description>"Guild"</Description>
          <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>000080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>238</ID>
              <Description>"Creation"</Description>
              <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <Color>000080</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>237</ID>
                  <Description>"Require only 3 people to be in the party"</Description>
                  <LastState/>
                  <Color>000080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
cmp eax,03

exit:
jmp returnhere

"ps_game.exe"+850A8:
jmp newmem
nop
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+850A8:
cmp eax,07
jg ps_game.exe+8520C
//Alt: db 83 F8 03 0F 8F 5B 01 00 00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>239</ID>
                  <Description>"Require only 3 people to accept the guild creation request"</Description>
                  <LastState/>
                  <Color>000080</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
cmp dword ptr [esi+24],03
jl ps_game.exe+85456

exit:
jmp returnhere

"ps_game.exe"+8542C:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8542C:
cmp dword ptr [esi+24],07
jl ps_game.exe+85456
//Alt: db 83 7E 24 03 7C 24
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
            <CheatEntry>
              <ID>173</ID>
              <Description>"Guild Officer Count"</Description>
              <LastState/>
              <Color>000080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

0043491B:
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

[DISABLE]

0043491B:
cmp dword ptr [edi+3C],7
jnl 00434A09
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>183</ID>
              <Description>"Guild Penalty Remove"</Description>
              <LastState/>
              <Color>000080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

0048598F:
jmp 004859C8
nop
nop
nop
nop
nop
nop
nop

[DISABLE]

0048598F:
cmp dword ptr [ebp+5580],0
je 004859C8
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>229</ID>
          <Description>"Admin &amp; GM Restrictions"</Description>
          <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>800000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>241</ID>
              <Description>"Admins see both faction trade chats"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
cmp byte ptr [ecx+5808],0B
JL "ps_game.exe"+27944

originalcode:
cmp dl,[ecx+0000012D]

exit:
jmp returnhere

"ps_game.exe"+27938:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+27938:
cmp dl,[ecx+0000012D]
//Alt: db 3A 91 2D 01 00 00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>31</ID>
              <Description>"Ability to attack both factions"</Description>
              <LastState/>
              <Color>800000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
cmp byte ptr [eax+5808],#10
jb 00457E35
cmp dl,[eax+0000012D]

exit:
jmp returnhere

"ps_game.exe"+57E2D:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"ps_game.exe"+57E2D:
cmp dl,[eax+0000012D]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>376</ID>
              <Description>"Allow /set command only on self"</Description>
              <LastState/>
              <Color>800000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,128)

// ebx = command caller
newmem:
mov edi,eax

cmp edi,ebx
jne returnhere

test edi,edi
jne 00480DA6

jmp returnhere

00480D90:
jmp newmem
nop
returnhere:

[DISABLE]

00480D90:
mov edi,eax
test edi,edi
jne 00480DA6

dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>157</ID>
              <Description>"Allow Join Manual Raid (Admin, GM)"</Description>
              <LastState/>
              <Color>800000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,128)

label(check_raid_auto_1)
label(ret_check_raid_auto_1)

label(check_raid_auto_2)
label(ret_check_raid_auto_2)

define(delta,3C0)

newmem:
check_raid_auto_1:
mov eax, dword ptr [edi+17F4]
cmp byte ptr [eax+114+delta],0
je 004757E7
cmp byte ptr [ebp+5808],2
jbe 004757F7
jmp ret_check_raid_auto_1

check_raid_auto_2:
cmp byte ptr [ebp+5808],2
jbe 00450507
cmp byte ptr [eax+115+delta],0
je 004504FA
jmp ret_check_raid_auto_2

004757D8:
jmp check_raid_auto_1
nop
ret_check_raid_auto_1:

004504FE:
jmp check_raid_auto_2
nop
nop
nop
nop
ret_check_raid_auto_2:

[DISABLE]
/*
004757D8:
mov eax, dword ptr [edi+17F4]

004504FE:
cmp byte ptr [eax+115],0
je 004504FA

dealloc(newmem)
*/
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>378</ID>
              <Description>"Allow Join Both Faction Raid (Admin, GM)"</Description>
              <LastState/>
              <Color>800000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,128)

newmem:
cmp byte ptr [ebp+5808],2
jbe 004757D8

originalcode:
mov dl, byte ptr [ebp+12D]
jmp returnhere

004757BA:
jmp newmem
nop
returnhere:

[DISABLE]

004757BA:
mov dl, byte ptr [ebp+12D]

dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>307</ID>
          <Description>"Raid"</Description>
          <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>800080</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>139</ID>
              <Description>"Raid Allocation Size"</Description>
              <LastState/>
              <Color>800080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

00452253:
push 610

[DISABLE]
/*
00452253:
push 150
*/
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>141</ID>
              <Description>"Raid Memory Clear"</Description>
              <LastState/>
              <Color>800080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,64)
label(returnhere)
label(next)

define(delta,3C0)

0044E08B:
mov dword ptr [eax+104+delta],ebx
mov dword ptr [eax+108+delta],ebx
mov dword ptr [eax+10C+delta],ebx

0044E0A6:
mov edx,#150

0044E0C1:
mov byte ptr [eax+114+delta],bl
mov byte ptr [eax+115+delta],bl
mov dword ptr [eax+110+delta],1

newmem:
mov edx,510
next:
mov dword ptr [eax+edx],0
add edx,4
cmp edx,610
jb next
jmp returnhere

0044E0D7:
jmp newmem
returnhere:
pop ebx
ret

[DISABLE]
/*
0044E08B:
mov dword ptr [eax+104],ebx
mov dword ptr [eax+108],ebx
mov dword ptr [eax+10C],ebx

0044E0A6:
mov edx,1E

0044E0C1:
mov byte ptr [eax+114],bl
mov byte ptr [eax+115],bl
mov dword ptr [eax+110],1

0044E0D7:
pop ebx
ret
db CC CC CC CC CC

dealloc(newmem)
*/
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>142</ID>
              <Description>"Raid Memory Expansion"</Description>
              <LastState/>
              <Color>800080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]

define(delta,3C0)

00450CBB:
mov [edi+104+delta],eax

00450CC2:
cmp [edi+114+delta],al

0044E170:
mov al,[edi+114+delta]

0044ED70:
cmp byte ptr [eax+114+delta],1

0044E979:
mov al,[esi+114+delta]

0044E170:
mov al,[edi+114+delta]

0044E219:
mov [edi+10C+delta],eax

0044EC06:
mov cl,[ebx+114+delta]

004A1DBE:
mov al,[edi+114+delta]

004A1F15:
mov eax,[edi+10C+delta]

004BA98B:
cmp dword ptr [eax+104+delta],4

0049BC2D:
mov al,[esi+114+delta]

0049127B:
mov al,[ebx+114+delta]

004911AE:
mov cl,[ebx+114+delta]

0044E8C4:
mov al,[edi+114+delta]

0044EC75:
mov byte ptr [esi+114+delta],1

0044ECA8:
cmp eax,[esi+110+delta]

0044ECBF:
mov [esi+110+delta],eax

004758C7:
mov [edx+114+delta],al

004758D6:
mov [ecx+104+delta],edx

004758E6:
mov [eax+115+delta],cl

004758FC:
movzx eax,byte ptr [esi+114+delta]

00475907:
movzx ecx,byte ptr [esi+115+delta]

00475912:
mov edx,[esi+104+delta]

00475927:
mov edx,[esi+110+delta]

004759E4:
cmp byte ptr [eax+114+delta],0

004759F4:
mov [eax+115+delta],cl

00475A0A:
mov al,[esi+115+delta]

00475976:
cmp byte ptr [eax+114+delta],0

00475986:
mov [eax+104+delta],edx

00475D46:
cmp byte ptr [edi+114+delta],0

00475DA2:
mov ecx,[esi+110+delta]

00475A99:
cmp byte ptr [eax+114+delta],0

0044E5CE:
mov [esi+110+delta],eax
mov ecx,[esi+110+delta]

00475A4C:
cmp byte ptr [eax+114+delta],0

0044E6E5:
cmp edi,[esi+110+delta]

0044E708:
mov [esi+110+delta],eax
mov ecx,[esi+110+delta]

00475DF5:
cmp byte ptr [esi+114+delta],0

0044DFD5:
lea eax,[esi+118+delta]

00450719:
add esi,130+delta

0044F4E7:
lea eax,[ebp+118+delta]

0049B131:
lea edi,[esi+118+delta]

0049B15B:
lea ebx,[edi+118+delta]

0049B184:
add esi,118+delta

0044F24C:
lea eax,[ebp+118+delta]

0044DFE7:
lea eax,[esi+130+delta]

0044E967:
lea eax,[esi+118+delta]

004509DE:
add edi,130+delta

0049B1A6:
add esi,118+delta

0044E0E0:
add eax,118+delta

0044E0F0:
add eax,118+delta

0044E11C:
add eax,118+delta

0044E133:
add eax,118+delta

0044E156:
add eax,118+delta

0044EC8D:
lea edi,[esi+118+delta]

00475423:
add eax,118+delta

0044EB85:
lea edi,[ebx+118+delta]

00478862:
add eax,118+delta

0044E4C3:
lea ebx,[edi+118+delta]

0044E669:
lea ebx,[esi+118+delta]

0044E261:
lea edi,[esi+118+delta]

0044EDBE:
lea esi,[ebp+118+delta]

0044EF59:
mov ecx,[ebp+110+delta]

0044EF6B:
mov cl,[ebp+115+delta]

0044EF78:
mov cx,[ebp+104+delta]

0044EF88:
movzx eax,byte ptr [ebp+114+delta]

0044E1CB:
mov [edi+10C+delta],edx

0044F17A:
lea eax,[ebp+118+delta]

0044EA14:
lea edi,[ebx+118+delta]

0044F5F6:
cmp byte ptr [ecx+114+delta],1

0044F641:
lea eax,[ebx+118+delta]

0044F6B3:
cmp edi,[ebx+110+delta]

00450622:
add edi,130+delta

0044FA81:
lea eax,[ebx+118+delta]

0044FB22:
mov eax,[ebx+108+delta]

0044E8B7:
lea ebx,[edi+118+delta]

00450238:
lea eax,[ebx+118+delta]

0044E597:
lea edi,[esi+118+delta]

0047583A:
cmp byte ptr [esi+114+delta],0

0044FDEB:
lea eax,[ebx+118+delta]

0044FE57:
cmp edi,[ebx+110+delta]

0044FEE2:
mov eax,[ebx+108+delta]

0044FF83:
mov [ebx+110+delta],eax

00450129:
mov edx,[ebx+110+delta]

0044F734:
mov eax,[ebx+108+delta]

0044E2A0:
cmp byte ptr [esi+114+delta],0

0044E2AF:
lea edi,[esi+118+delta]

0044E2C2:
mov eax,[esi+110+delta]

0044E2F2:
lea edi,[esi+118+delta]

004757DE:
cmp byte ptr [eax+115+delta],0

004504F1:
cmp byte ptr [eax+114+delta],0

004504FE:
cmp byte ptr [eax+115+delta],0

00450521:
add edi,130+delta

004505A1:
add edi,130+delta

004506A1:
add edi,130+delta

00450B17:
add edi,130+delta

004A1DAD:
lea eax,[edi+118+delta]

004A1E3C:
mov eax,[edi+10C+delta]

0049130E:
mov cl,[ebx+114+delta]

00465F95:
lea ebp,[esi+118+delta]

00465FFF:
add esi,118+delta

0046583C:
lea eax,[ebx+118+delta]

0046584D:
mov al,[ebx+114+delta]

00467758:
lea eax,[esi+118+delta]

004677DC:
mov ebx,[esi+108+delta]

00467804:
mov [esi+108+delta],ebx

004659F9:
mov eax,[edx+10C+delta]

0049B1F3:
lea edi,[esi+118+delta]

0049B21F:
add esi,118+delta

0046A871:
mov al,[ecx+114+delta]

0044EAA4:
lea esi,[ebp+118+delta]

0046776F:
mov eax,[esi+104+delta]

0046B401:
mov al,[ecx+114+delta]

00467419:
add eax,118+delta

004677CA:
cmp [esi+108+delta],eax

0046783B:
inc [esi+108+delta]

004677D2:
mov [esi+108+delta],0

00465D80:
lea ebx,[esi+118+delta]

00465DB8:
mov al,[ebx+114+delta]

00465E05:
add esi,118+delta

0044E059:
add esi,118+delta

00460494:
add edi,118+delta

0046066D:
add edi,118+delta

00467443:
add eax,118+delta

00475658:
add eax,118+delta

00475CF0:
add eax,118+delta

00476926:
add eax,118+delta

00476991:
add eax,118+delta

00478EBF:
add eax,118+delta

0047F92E:
add eax,118+delta

00480266:
add eax,118+delta

00482D6A:
add eax,118+delta

00482E2E:
add eax,118+delta

00483C42:
add eax,118+delta

00483C6F:
add eax,118+delta

004851CF:
add eax,118+delta

00485395:
add eax,118+delta

004856D0:
add eax,118+delta

0049093C:
add edi,118+delta

00490A4D:
add edi,118+delta

00490B5D:
add edi,118+delta

00490D3E:
add edi,118+delta

004912DA:
add edi,118+delta

00491807:
add ebp,118+delta

0049190D:
add esi,118+delta

0049B1BF:
add esi,118+delta

0049B232:
add esi,118+delta

0049BC84:
add ebx,118+delta

0049E589:
add eax,118+delta

004C6B30:
add eax,118+delta

004C6B54:
add eax,118+delta

00550A13:
add ecx,118+delta

00550A43:
add ecx,118+delta

005516F3:
add ecx,118+delta

004BAFE2:
cmp dword ptr [ebp+104+delta],4

004BB1DD:
cmp byte ptr [ebp+114+delta],1

004BB1E6:
cmp dword ptr [ebp+104+delta],4

004BB25B:
mov eax,[ebp+104+delta]

004BB2F0:
cmp [ebp+108+delta],eax

004BB302:
mov esi,[ebp+108+delta]

004BB370:
inc [ebp+108+delta]

004BB2F8:
mov [ebp+108+delta],0

004BB327:
mov [ebp+108+delta],esi

0044FB2D:
mov [ebx+108+delta],eax

00450B09:
mov eax,[edi+148+delta]

00450B11:
mov esi,[edi+130+delta]

0044E379:
lea edi,[ebp+118+delta]

0049BBEF:
lea esi,[ebx+118+delta]

0049124A:
lea ebx,[edi+118+delta]

0044E7C8:
lea ebp,[esi+118+delta]

0044FB61:
cmp byte ptr [ebx+114+delta],1

00450307:
cmp byte ptr [ebx+114+delta],1

004908D4:
lea ebx,[edi+118+delta]

00491767:
lea eax,[ebp+118+delta]

004917A4:
mov al,[edx+114+delta]

00490C8A:
lea ebx,[edi+118+delta]

00490CBF:
mov al,[ebx+114+delta]

004919C1:
mov al,[ebx+114+delta]

00491A12:
lea edi,[ebx+118+delta]

00490905:
mov al,[ebx+114+delta]

004909E5:
lea ebx,[edi+118+delta]

00490A16:
mov al,[ebx+114+delta]

00490AF5:
lea ebx,[edi+118+delta]

00490B26:
mov al,[ebx+114+delta]

004F22C1:
cmp dword ptr [ecx+118+delta],0

004F22D1:
mov ecx,[ecx+118+delta]

0044F71A:
mov edx,[ebx+110+delta]

0044F725:
mov [ebx+110+delta],edx

0044F792:
mov edx,[ebx+110+delta]

0044F7C2:
mov [ebx+110+delta],eax

0044F969:
mov edx,[ebx+110+delta]

00455C69:
cmp byte ptr [ecx+114+delta],1

0044FEC8:
mov edx,[ebx+110+delta]

0044F76E:
cmp byte ptr [ebx+114+delta],1

0044FF2F:
cmp byte ptr [ebx+114+delta],1

004604B4:
mov dl,[ecx+114+delta]

0047F95F:
cmp byte ptr [edi+114+delta],0

0047F971:
mov ecx,[edi+110+delta]

00475D5C:
mov edx,[edi+110+delta]

0049E4C6:
cmp byte ptr [ebx+114+delta],1

004609E0:
lea ebx,[esi+118+delta]

004734A2:
lea eax,[esi+118+delta]

0044E322:
lea edi,[esi+118+delta]

0044E331:
cmp [esi+114+delta],bl

0044E34A:
mov eax,[esi+110+delta]

0044E551:
lea edi,[esi+118+delta]

0044E567:
cmp eax,[esi+110+delta]

0044E611:
lea edi,[esi+118+delta]

0044E62C:
cmp eax,[esi+110+delta]

0044E645:
mov [esi+110+delta],eax

004600EE:
lea ebp,[esi+118+delta]

00460272:
lea esi,[ebp+118+delta]

0046028E:
mov cl,[ebp+114+delta]

0046083E:
lea ebp,[esi+118+delta]

00460B87:
lea edi,[esi+118+delta]

00491876:
lea ebx,[esi+118+delta]

004918AB:
mov al,[edx+114+delta]

0044F73F:
mov [ebx+108+delta],eax

0044ED43:
cmp byte ptr [ecx+114+delta],0

0044ED4D:
mov esi,[ecx+108+delta]

0044ECD0:
mov [eax+115+delta],cl

0044ECE0:
mov [eax+104+delta],ecx

0044ECE0:
mov [eax+104+delta],ecx

0044FEED:
mov [ebx+108+delta],eax

0044FF53:
mov edx,[ebx+110+delta]

00467869:
mov [esi+108+delta],0
mov ebx,[esi+108+delta]

0046789B:
mov [esi+108+delta],ebx

004678C4:
inc [esi+108+delta]

004BB39F:
mov [ebp+108+delta],0
mov esi,[ebp+108+delta]

004BB3D3:
mov [ebp+108+delta],esi

004BB424:
inc [ebp+108+delta]

004BB397:
cmp [ebp+108+delta],eax

0044FED3:
mov [ebx+110+delta],edx

00467861:
cmp [esi+108+delta],eax

[DISABLE]
/*
00450CBB:
mov [edi+104],eax

00450CC2:
cmp [edi+114],al

0044E170:
mov al,[edi+114]

0044ED70:
cmp byte ptr [eax+114],1

0044E979:
mov al,[esi+114]

0044E170:
mov al,[edi+114]

0044E219:
mov [edi+10C],eax

0044EC06:
mov cl,[ebx+114]

004A1DBE:
mov al,[edi+114]

004A1F15:
mov eax,[edi+10C]

004BA98B:
cmp dword ptr [eax+104],4

0049BC2D:
mov al,[esi+114]

0049127B:
mov al,[ebx+114]

004911AE:
mov cl,[ebx+114]

0044E8C4:
mov al,[edi+114]

0044EC75:
mov byte ptr [esi+114],1

0044ECA8:
cmp eax,[esi+110]

0044ECBF:
mov [esi+110],eax

004758C7:
mov [edx+114],al

004758D6:
mov [ecx+104],edx

004758E6:
mov [eax+115],cl

004758FC:
movzx eax,byte ptr [esi+114]

00475907:
movzx ecx,byte ptr [esi+115]

00475912:
mov edx,[esi+104]

00475927:
mov edx,[esi+110]

004759E4:
cmp byte ptr [eax+114],0

004759F4:
mov [eax+115],cl

00475A0A:
mov al,[esi+115]

00475976:
cmp byte ptr [eax+114],0

00475986:
mov [eax+104],edx

00475D46:
cmp byte ptr [edi+114],0

00475DA2:
mov ecx,[esi+110]

00475A99:
cmp byte ptr [eax+114],0

0044E5CE:
mov [esi+110],eax
mov ecx,[esi+110]

00475A4C:
cmp byte ptr [eax+114],0

0044E6E5:
cmp edi,[esi+110]

0044E708:
mov [esi+110],eax
mov ecx,[esi+110]

00475DF5:
cmp byte ptr [esi+114],0

0044DFD5:
lea eax,[esi+118]

00450719:
add esi,130

0044F4E7:
lea eax,[ebp+118]

0049B131:
lea edi,[esi+118]

0049B15B:
lea ebx,[edi+118]

0049B184:
add esi,118

0044F24C:
lea eax,[ebp+118]

0044DFE7:
lea eax,[esi+130]

0044E967:
lea eax,[esi+118]

004509DE:
add edi,130

0049B1A6:
add esi,118

0044E0E0:
add eax,118

0044E0F0:
add eax,118

0044E11C:
add eax,118

0044E133:
add eax,118

0044E156:
add eax,118

0044EC8D:
lea edi,[esi+118]

00475423:
add eax,118

0044EB85:
lea edi,[ebx+118]

00478862:
add eax,118

0044E4C3:
lea ebx,[edi+118]

0044E669:
lea ebx,[esi+118]

0044E261:
lea edi,[esi+118]

0044EDBE:
lea esi,[ebp+118]

0044EF59:
mov ecx,[ebp+110]

0044EF6B:
mov cl,[ebp+115]

0044EF78:
mov cx,[ebp+104]

0044EF88:
movzx eax,byte ptr [ebp+114]

0044E1CB:
mov [edi+10C],edx

0044F17A:
lea eax,[ebp+118]

0044EA14:
lea edi,[ebx+118]

0044F5F6:
cmp byte ptr [ecx+114],1

0044F641:
lea eax,[ebx+118]

0044F6B3:
cmp edi,[ebx+110]

00450622:
add edi,130

0044FA81:
lea eax,[ebx+118]

0044FB22:
mov eax,[ebx+108]

0044E8B7:
lea ebx,[edi+118]

00450238:
lea eax,[ebx+118]

0044E597:
lea edi,[esi+118]

0047583A:
cmp byte ptr [esi+114],0

0044FDEB:
lea eax,[ebx+118]

0044FE57:
cmp edi,[ebx+110]

0044FEE2:
mov eax,[ebx+108]

0044FF83:
mov [ebx+110],eax

00450129:
mov edx,[ebx+110]

0044F734:
mov eax,[ebx+108]

0044E2A0:
cmp byte ptr [esi+114],0

0044E2AF:
lea edi,[esi+118]

0044E2C2:
mov eax,[esi+110]

0044E2F2:
lea edi,[esi+118]

004757DE:
cmp byte ptr [eax+115],0

004504F1:
cmp byte ptr [eax+114],0

004504FE:
cmp byte ptr [eax+115],0

00450521:
add edi,130

004505A1:
add edi,130

004506A1:
add edi,130

00450B17:
add edi,130

004A1DAD:
lea eax,[edi+118]

004A1E3C:
mov eax,[edi+10C]

0049130E:
mov cl,[ebx+114]

00465F95:
lea ebp,[esi+118]

00465FFF:
add esi,118

0046583C:
lea eax,[ebx+118]

0046584D:
mov al,[ebx+114]

00467758:
lea eax,[esi+118]

004677DC:
mov ebx,[esi+108]

00467804:
mov [esi+108],ebx

004659F9:
mov eax,[edx+10C]

0049B1F3:
lea edi,[esi+118]

0049B21F:
add esi,118

0046A871:
mov al,[ecx+114]

0044EAA4:
lea esi,[ebp+118]

0046776F:
mov eax,[esi+104]

0046B401:
mov al,[ecx+114]

00467419:
add eax,118

004677CA:
cmp [esi+108],eax

0046783B:
inc [esi+108]

004677D2:
mov [esi+108],0

00465D80:
lea ebx,[esi+118]

00465DB8:
mov al,[ebx+114]

00465E05:
add esi,118

0044E059:
add esi,118

00460494:
add edi,118

0046066D:
add edi,118

00467443:
add eax,118

00475658:
add eax,118

00475CF0:
add eax,118

00476926:
add eax,118

00476991:
add eax,118

00478EBF:
add eax,118

0047F92E:
add eax,118

00480266:
add eax,118

00482D6A:
add eax,118

00482E2E:
add eax,118

00483C42:
add eax,118

00483C6F:
add eax,118

004851CF:
add eax,118

00485395:
add eax,118

004856D0:
add eax,118

0049093C:
add edi,118

00490A4D:
add edi,118

00490B5D:
add edi,118

00490D3E:
add edi,118

004912DA:
add edi,118

00491807:
add ebp,118

0049190D:
add esi,118

0049B1BF:
add esi,118

0049B232:
add esi,118

0049BC84:
add ebx,118

0049E589:
add eax,118

004C6B30:
add eax,118

004C6B54:
add eax,118

00550A13:
add ecx,118

00550A43:
add ecx,118

005516F3:
add ecx,118

004BAFE2:
cmp dword ptr [ebp+104],4

004BB1DD:
cmp byte ptr [ebp+114],1

004BB1E6:
cmp dword ptr [ebp+104],4

004BB25B:
mov eax,[ebp+104]

004BB2F0:
cmp [ebp+108],eax

004BB302:
mov esi,[ebp+108]

004BB370:
inc [ebp+108]

004BB2F8:
mov [ebp+108],0

004BB327:
mov [ebp+108],esi

0044FB2D:
mov [ebx+108],eax

00450B09:
mov eax,[edi+148]

00450B11:
mov esi,[edi+130]

0044E379:
lea edi,[ebp+118]

0049BBEF:
lea esi,[ebx+118]

0049124A:
lea ebx,[edi+118]

0044E7C8:
lea ebp,[esi+118]

0044FB61:
cmp byte ptr [ebx+114],1

00450307:
cmp byte ptr [ebx+114],1

004908D4:
lea ebx,[edi+118]

00491767:
lea eax,[ebp+118]

004917A4:
mov al,[edx+114]

00490C8A:
lea ebx,[edi+118]

00490CBF:
mov al,[ebx+114]

004919C1:
mov al,[ebx+114]

00491A12:
lea edi,[ebx+118]

00490905:
mov al,[ebx+114]

004909E5:
lea ebx,[edi+118]

00490A16:
mov al,[ebx+114]

00490AF5:
lea ebx,[edi+118]

00490B26:
mov al,[ebx+114]

004F22C1:
cmp dword ptr [ecx+118],0

004F22D1:
mov ecx,[ecx+118]

0044F71A:
mov edx,[ebx+110]

0044F725:
mov [ebx+110],edx

0044F792:
mov edx,[ebx+110]

0044F7C2:
mov [ebx+110],eax

0044F969:
mov edx,[ebx+110]

00455C69:
cmp byte ptr [ecx+114],1

0044FEC8:
mov edx,[ebx+110]

0044F76E:
cmp byte ptr [ebx+114],1

0044FF2F:
cmp byte ptr [ebx+114],1

004604B4:
mov dl,[ecx+114]

0047F95F:
cmp byte ptr [edi+114],0

0047F971:
mov ecx,[edi+110]

00475D5C:
mov edx,[edi+110]

0049E4C6:
cmp byte ptr [ebx+114],1

004609E0:
lea ebx,[esi+118]

004734A2:
lea eax,[esi+118]

0044E322:
lea edi,[esi+118]

0044E331:
cmp [esi+114],bl

0044E34A:
mov eax,[esi+110]

0044E551:
lea edi,[esi+118]

0044E567:
cmp eax,[esi+110]

0044E611:
lea edi,[esi+118]

0044E62C:
cmp eax,[esi+110]

0044E645:
mov [esi+110],eax

004600EE:
lea ebp,[esi+118]

00460272:
lea esi,[ebp+118]

0046028E:
mov cl,[ebp+114]

0046083E:
lea ebp,[esi+118]

00460B87:
lea edi,[esi+118]

00491876:
lea ebx,[esi+118]

004918AB:
mov al,[edx+114]

0044F73F:
mov [ebx+108],eax

0044ED43:
cmp byte ptr [ecx+114],0

0044ED4D:
mov esi,[ecx+108]

0044ECD0:
mov [eax+115],cl

0044ECE0:
mov [eax+104],ecx

0044ECE0:
mov [eax+104],ecx

0044FEED:
mov [ebx+108],eax

0044FF53:
mov edx,[ebx+110]

00467869:
mov [esi+108],0
mov ebx,[esi+108]

0046789B:
mov [esi+108],ebx

004678C4:
inc [esi+108]

004BB39F:
mov [ebp+108],0
mov esi,[ebp+108]

004BB3D3:
mov [ebp+108],esi

004BB424:
inc [ebp+108]

004BB397:
cmp [ebp+108],eax

0044FED3:
mov [ebx+110],edx

00467861:
cmp [esi+108],eax
*/
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>140</ID>
              <Description>"Raid Capacity"</Description>
              <LastState/>
              <Color>800080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,512)

label(raid_max_slots)
registersymbol(raid_max_slots)

newmem:

raid_max_slots:
dd #150

rc1:
push ecx
mov ecx, dword ptr [raid_max_slots]
cmp dword ptr [eax+10],ecx
pop ecx
jl 0047580D
jmp ret_rc1

rc2:
push eax
mov eax, dword ptr [raid_max_slots]
cmp dword ptr [ebp+10],eax
pop eax
push esi
jmp ret_rc2

rc3:
cmp eax, dword ptr [raid_max_slots]
jl 0044F587
jmp ret_rc3

rc4:
cmp eax, dword ptr [raid_max_slots]
mov [esp+24],eax
jmp ret_rc4

rc5:
cmp eax, dword ptr [raid_max_slots]
jl 0044E563
jmp ret_rc5

rc6:
cmp eax, dword ptr [raid_max_slots]
jl 0044ED58
jmp ret_rc6

rc7:
cmp eax, dword ptr [raid_max_slots]
jl 0044E6F4
jmp ret_rc7

rc8:
cmp esi, dword ptr [raid_max_slots]
jle 004658A4
jmp ret_rc8

rc9:
mov edi, dword ptr [raid_max_slots]
jmp ret_rc9

rc10:
mov edx, dword ptr [raid_max_slots]
jmp ret_rc10

rc11:
mov edi, dword ptr [raid_max_slots]
jmp ret_rc11

rc12:
mov edx, dword ptr [raid_max_slots]
jmp ret_rc12

rc13:
mov edx, dword ptr [raid_max_slots]
jmp ret_rc13

rc14:
cmp ecx, dword ptr [raid_max_slots]
jl 0044ED13
jmp ret_rc14

004757F7:
jmp rc1
nop
ret_rc1:

0044EDB0:
jmp rc2
ret_rc2:

0044F5A6:
jmp rc3
ret_rc3:

0044F128:
jmp rc4
nop
nop
ret_rc4:

0044E570:
jmp rc5
ret_rc5:

0044ED66:
jmp rc6
ret_rc6:

0044E701:
jmp rc7
ret_rc7:

0046589B:
jmp rc8
ret_rc8:

00475B1B:
jmp rc9
ret_rc9:

0045001B:
jmp rc10
ret_rc10:

00475E73:
jmp rc11
ret_rc11:

0044F85B:
jmp rc12
ret_rc12:

0044FC04:
jmp rc13
ret_rc13:

0044ED22:
jmp rc14
ret_rc14:

[DISABLE]
/*
004757F7:
cmp dword ptr [eax+10],1E
jl 0047580D

0044EDB0:
cmp dword ptr [ebp+10],1E
push esi

0044F5A6:
cmp eax,1E
jl 0044F587

0044F128:
cmp eax,1E
mov dword ptr [esp+24],eax

0044E570:
cmp eax,1E
jl 0044E563

0044ED66:
cmp eax,1E
jl 0044ED58

0044E701:
cmp eax,1E
jl 0044E6F4

0046589B:
cmp esi,1E
jle 004658A4

00475B1B:
mov edi,1E

0045001B:
mov edx,1E

00475E73:
mov edi,1E

0044F85B:
mov edx,1E

0044FC04:
mov edx,1E

0044ED22:
cmp ecx,1E
jl 0044ED13

unregistersymbol(raid_max_slots)
dealloc(newmem)
*/
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>379</ID>
              <Description>"Raid Organizers"</Description>
              <LastState/>
              <Color>800080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,1024)
define(move_ok,00475D6C)
define(move_fail,00475634)
define(delta,3C0)

newmem:
mov edx, dword ptr [edi+110+delta]
cmp dword ptr [edi+edx*8+18],ebp
je move_ok

push ebp
call func_get_player_slot_in_raid

cdq
mov ecx,#30
div ecx
cmp edx,#29

je is_raid_organizer

jmp move_fail

is_raid_organizer:
sub esp,18

mov dword ptr [esp],eax          // organizer raid
mov dword ptr [esp+4],edx        // organizer slot

mov eax, dword ptr [ebx+2]
cdq
mov ecx,#30
div ecx

mov dword ptr [esp+8],eax        // old raid
mov dword ptr [esp+C],edx        // old slot

mov eax, dword ptr [ebx+6]
cdq
mov ecx,#30
div ecx

mov dword ptr [esp+10],eax        // new raid
mov dword ptr [esp+14],edx        // new slot

// different raid
cmp eax, dword ptr [esp]
jne is_raid_organizer_move_fail

// different raid
mov eax, dword ptr [esp+8]
cmp eax, dword ptr [esp]
jne is_raid_organizer_move_fail

// organizer slot
cmp dword ptr [esp+C],#29
je is_raid_organizer_move_fail

// organizer slot
cmp dword ptr [esp+14],#29
je is_raid_organizer_move_fail

add esp,18
jmp move_ok

is_raid_organizer_move_fail:
add esp,18
jmp move_fail

// push player
func_get_player_slot_in_raid:
push ecx
push ebx
push edi

mov edx, dword ptr [esp+10] // player
mov edi, dword ptr [edx+17F4]
xor eax,eax

func_get_player_slot_in_raid_next:
cmp edx, dword ptr [edi+eax*8+18]
je func_get_player_slot_in_raid_found

inc eax
cmp eax, dword ptr [raid_max_slots]
jb func_get_player_slot_in_raid_next

mov eax,-1
jmp func_get_player_slot_in_raid_exit

func_get_player_slot_in_raid_found:
mov eax, dword ptr [edi+eax*8+14]

func_get_player_slot_in_raid_exit:
pop edi
pop ebx
pop ecx
ret 4

00475D5C:
jmp newmem
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

[DISABLE]
/*
00475D5C:
mov edx, dword ptr [edi+110]
cmp dword ptr [edi+edx*8+18],ebp
jne 00475634
*/
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>380</ID>
              <Description>"Allow Raid Notice (Admin, GM)"</Description>
              <LastState/>
              <Color>800080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,1024)
define(raid_notice_ok,0047F97D)
define(raid_notice_fail,0047F922)
define(delta,3C0)

newmem:
mov ecx, dword ptr [edi+110+delta]
cmp dword ptr [edi+ecx*8+18],ebp
je raid_notice_ok

cmp byte ptr [ebp+5808],2
jbe raid_notice_ok

jmp raid_notice_fail

0047F971:
jmp newmem
nop
nop
nop
nop
nop
nop
nop

[DISABLE]
/*
0047F971:
mov ecx, dword ptr [edi+110]
cmp dword ptr [edi+ecx*8+18],ebp
jne 0047F922
*/
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>158</ID>
              <Description>"Raid Kick Restrictions (Admin, GM, Restricted Players)"</Description>
              <LastState/>
              <Color>800080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,1024)

label(raid_kick)
label(ret_raid_kick)
label(raid_kick_adm)
label(raid_kick_gm)
label(raid_kick_adm_notice)
label(raid_kick_gm_notice)

newmem:
raid_kick:
cmp byte ptr [eax+5808],1
je raid_kick_adm
cmp byte ptr [eax+5808],2
je raid_kick_gm

mov ebx, dword ptr [ebp+17F4]
jmp ret_raid_kick

raid_kick_adm:
push ecx
push edx
mov ecx,ebp
mov edx,raid_kick_adm_notice
push 34
push edx
call 004ED0E0
pop edx
pop ecx
jmp 00475417

raid_kick_gm:
push ecx
push edx
mov ecx,ebp
mov edx,raid_kick_gm_notice
push 30
push edx
call 004ED0E0
pop edx
pop ecx
jmp 00475417

raid_kick_adm_notice:
db 0B F9 31
db 'One does not simply kick an admin out of a raid.'
db 00

raid_kick_gm_notice:
db 0B F9 2D
db 'One does not simply kick a GM out of a raid.'
db 00

0047586C:
jmp raid_kick
nop
ret_raid_kick:

[DISABLE]

0047586C:
mov ebx, dword ptr [ebp+17F4]

dealloc(newmem)

</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>377</ID>
              <Description>"Raid Notice Tag And Name"</Description>
              <LastState/>
              <Color>800080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,1024)
label(exit)

define(malloc_size,200)
define(delta,3C0)

// ebx = /raid packet
// ebp = player
newmem:
sub esp,4

// allocate memory
push malloc_size
call msvcrt.malloc
add esp,4

mov dword ptr [esp],eax

push malloc_size
push 0
push eax
call msvcrt.memset
add esp,C

push ebp
call func_get_player_role_in_raid

push eax
call func_get_tag_by_role_in_raid

test eax,eax
je concat_name

mov ecx, dword ptr [esp]

push eax
push ecx
call msvcrt.strcat
add esp,8

concat_name:
lea eax, dword ptr [ebp+184]
mov ecx, dword ptr [esp]

push eax
push ecx
call msvcrt.strcat
add esp,8

mov ecx, dword ptr [esp]

push string_colon
push ecx
call msvcrt.strcat
add esp,8

lea eax, dword ptr [ebx+3]
mov ecx, dword ptr [esp]

push eax
push ecx
call msvcrt.strcat
add esp,8

lea eax, dword ptr [ebx+3]
mov ecx, dword ptr [esp]

push ecx
push eax
call msvcrt.strcpy
add esp,8

lea eax, dword ptr [ebx+3]

push eax
call msvcrt.strlen
add esp,4

mov byte ptr [ebx+2],al

// free memory
mov ecx, dword ptr [esp]
push ecx
call msvcrt.free
add esp,4

exit:
mov al, byte ptr [ebx+2]
add esp,4

originalcode:
mov ecx, dword ptr [ebp+128]
jmp returnhere

// push playerPointer
// call func_get_player_role_in_raid
// eax = 0 =&gt; lead
// eax = 1 =&gt; sub-lead
// eax = 2 =&gt; member
func_get_player_role_in_raid:
push ecx
push edx
push ebx

mov ecx, dword ptr [esp+10] // get player
mov ebx, dword ptr [ecx+17F4] // get raid

xor eax,eax

mov edx, dword ptr [ebx+C] // get leader index
mov edx, dword ptr [ebx+edx*8+18] // get leader pointer

cmp ecx,edx
je func_get_player_role_in_raid_exit

inc eax

mov edx, dword ptr [ebx+110+delta] // get sub-leader index
mov edx, dword ptr [ebx+edx*8+18] // get sub-leader pointer

cmp ecx,edx
je func_get_player_role_in_raid_exit

inc eax

func_get_player_role_in_raid_exit:
pop ebx
pop edx
pop ecx
ret 4

// push roleInRaid
// call func_get_tag_by_role_in_raid
func_get_tag_by_role_in_raid:
push ecx

mov ecx, dword ptr [esp+8]

mov eax,tag_leader

test ecx,ecx
je func_get_tag_by_role_in_raid_exit

mov eax,tag_sub_leader

dec ecx
je func_get_tag_by_role_in_raid_exit

xor eax,eax

func_get_tag_by_role_in_raid_exit:
pop ecx
ret 4

tag_leader:
db '[L]' 0

tag_sub_leader:
db '[S-L]' 0

string_colon:
db ':' 0

0047F995:
jmp newmem
nop
returnhere:

[DISABLE]

0047F995:
mov ecx, dword ptr [ebp+128]

dealloc(newmem)
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>260</ID>
              <Description>"Shared PvP Kills"</Description>
              <LastState/>
              <Color>800080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(M1)
label(M2)
label(M3)
label(M4)
label(M5)
label(M6)
label(M7)
label(M8)
label(M9)

newmem:
pushad
mov edi,esi
mov edx,[esi+000000E0]
xor ecx,ecx
mov cl,[esi+0000012D]
cmp ecx,01
je setzero
mov ecx,01
jmp gocall
setzero:
mov ecx,00
gocall:
push ecx
push edx
call ShareKill
popad
originalcode:

exit:
jmp 00465ACF

ShareKill:
sub esp,10 { 16 }
push ebx
push ebp
mov ebp,[esp+1C]
push esi
call dword ptr [ps_game.exe+1540D0] { -&gt;kernel32.GetTickCount }
lea esi,[ebp+0000018C]
mov ebx,eax
push esi
add ebx,000003E8 { 1000 }
mov [esp+1C],esi
call dword ptr [ps_game.exe+1540DC] { -&gt;ntdll.RtlEnterCriticalSection }
mov ecx,[ebp+00000184]
mov eax,[ecx+04]
mov [ebp+00000188],eax
cmp eax,ecx
je M1
test eax,eax
je M1
M8:
mov eax,[eax+08]
test eax,eax
je M2
lea esi,[eax-000000D0]
jmp M3
M2:
xor esi,esi
M3:
// cmp byte ptr [esi+00005808],0A { if ( *(_BYTE *)(v8 + 22376) &gt; 0xAu )}
//ja M4
//mov eax,[ebp+00000188] {  v6 = (CObjectLink *)CZone-&gt;m_listUser.cursor-&gt;next;}
//mov eax,[eax+04]
//jmp M6

M4:
cmp edi,esi
jne M5
mov ecx,[ebp+00000188]
mov eax,[ecx+04]
jmp M6
M5:
mov dl,[esp+24]
cmp [esi+0000012D],dl { if ( *(_BYTE *)(v8 + 301) == byCountry )}
jne M9
// NEW CODE HERE //
fld dword ptr [edi+000000D0]
push ecx
fsub dword ptr [esi+000000D0]
fstp dword ptr [esp+14]
fld dword ptr [edi+000000D8]
fsub dword ptr [esi+000000D8]
fstp dword ptr [esp+24]
fld dword ptr [esp+24]
fld dword ptr [esp+14]
fmul st(0),st(0)
fld st(1)
fmulp st(2),st(0)
faddp
fstp dword ptr [esp+24]
fld dword ptr [esp+24]
fstp dword ptr [esp]
call ps_game.exe+1B8A0
fcomp dword ptr [RangeFloat] { [300.00] }
add esp,04 { 00000004 }
fnstsw ax
sahf
//test ah,41 { 65 }
jae M9 { if ( v11 &gt; 10.0 )}
//Need check party
cmp [esi+000017F4],00
je M9
mov ecx,esi
push edi
call ps_game.exe+67CE0
//               //
M9:
mov edx,[ebp+00000188]
mov eax,[edx+04]
M6:
cmp eax,[ebp+00000184] { while ( v6 != CZone-&gt;m_listUser.head &amp;&amp; v6 );}
mov [ebp+00000188],eax
je M7
test eax,eax
jne M8
M7:
mov esi,[esp+18] { v4 = &amp;this-&gt;m_listUser.m_csList.m_cs;}
M1:
push esi
call dword ptr [ps_game.exe+1540D4] { -&gt;ntdll.RtlLeaveCriticalSection }
pop esi
pop ebp
pop ebx
add esp,10 { 16 }
ret 0008 { 00000008 }

RangeFloat:
dd 42C80000

"ps_game.exe"+65AAD:
jmp newmem
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+65AAD:
call ps_game.exe+67EE0
//Alt: db E8 2E 24 00 00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>634</ID>
              <Description>"Leader Summon Raid"</Description>
              <LastState/>
              <Color>800080</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(ItemSummonRaid)
label(checkcountry)
label(failed)
label(exit)
label(checkleader)
newmem:
call ps_game.exe+4ECF0
//esi=target player,edi=source player
//check map
originalcode:
pushad
movzx eax,word ptr [esi+0x160]
movzx ebx,word ptr [edi+0x160]
cmp eax,(int)39
je checkcountry
cmp ebx,(int)39
je checkcountry

jmp ItemSummonRaid

//checkcountry and check if same map
checkcountry:
cmp eax,ebx        //if they are in the same map which we speicifys
je ItemSummonRaid

movzx eax,byte ptr [esi+0x12d]
movzx ebx,byte ptr [edi+0x12d]
cmp eax,ebx
jne failed

/*
push eax               //party table
push ecx               //leader id
mov eax,[edi+17f4]
mov ecx,[eax+0c]       //leader id
imul ecx,ecx,8
add  ecx,18
mov  ecx,[eax+ecx]   //leader address
cmp edi,ecx          //compare address check is leader
pop ecx
pop eax
je 0049e4ea        //if yes
*/

ItemSummonRaid:

mov eax,dword ptr ds:[edi+0x58FC]
mov ecx,dword ptr ds:[edi+0x5900]
lea eax,dword ptr ds:[eax+eax*2]     // eax=bag,ecx=slot
lea edx,dword ptr ds:[ecx+eax*8]
imul edx,edx,4
mov eax,dword ptr ds:[edi+edx+0x1C0]
mov eax,dword ptr ds:[eax+30]
cmp [eax],(int)100045                 //orginal item id
popad
jne checkleader   //success addr
/*
mov eax,dword ptr ds:[eax+0x30]
cmp byte ptr ds:[eax+0x46],0x1F
*/



exit:
jmp returnhere

checkleader:
push eax               //party table
push ecx               //leader id
mov eax,[edi+17f4]
mov ecx,[eax+0c]       //leader id
imul ecx,ecx,8
add  ecx,18
mov  ecx,[eax+ecx]   //leader address
cmp edi,ecx          //compare address check is leader
pop ecx
pop eax
je 0049e4ea        //if yes
jmp 0049E517

failed:
popad
jmp 0049E517



"ps_game.exe"+9E4E1:

jmp newmem

returnhere:

[DISABLE]

//code from here till the end of the code will be used to disable the cheat

dealloc(newmem)

"ps_game.exe"+9E4E1:

call ps_game.exe+4ECF0

//Alt: db E8 0A 08 FB FF
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>641</ID>
      <Description>"FFA"</Description>
      <VariableType>4 Bytes</VariableType>
      <Address>FFA</Address>
      <CheatEntries>
        <CheatEntry>
          <ID>321</ID>
          <Description>"RVR"</Description>
          <Options moRecursiveSetValue="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>322</ID>
              <Description>"All red"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [ebp+160],(int)39 //MapID
jne originalcode2
push eax
mov ecx, [ebx+000017F4]
cmp ecx, 0
je code
mov eax, [ebp+000017F4]
cmp eax, 0
je code
cmp eax, ecx
jne code
movzx ecx, byte ptr [ebp+0000012D] //kogo gryzit
jmp originalcode
code:
movzx ecx, byte ptr [ebx+0000012D] //kogo gryzit
movzx eax, byte ptr [ebp+0000012D] //komy otpravit
cmp eax, ecx
jne originalcode
cmp eax, 1
jne ex
mov cl, 0
jmp originalcode
ex:
mov cl, 1
originalcode:
pop eax
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]

exit:
jmp returnhere
originalcode2:
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
jmp exit

"ps_game.exe"+26B17:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+26B17:
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>12</ID>
              <Description>"party kick"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
add dword ptr [ebx+10],-01
push edi
mov edi,[esp+18]
cmp byte ptr [edi+160],(int)39 //MapID
jne originalcode2
pop edi

mov eax,0
zanovo:
pushad
push eax
sub esp,128
mov ecx,[esp+128+20+18]
mov ebx,[eax*8+esi+18]
cmp ecx,ebx
je sameCharacter
push ecx
mov ecx,[ebx+000000DC]
mov eax,00000303 { 771 }
mov [esp+34],ax
mov [esp+36],ecx
movzx eax,byte ptr [ebx+0000144C]
movzx ecx,byte ptr [ebx+0000012D]
sete dl
mov [esp+3A],dl
movzx edx,byte ptr [ebx+0000012E]
mov [esp+3B],al
movzx eax,byte ptr [ebx+00000131]
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
mov [esp+3D],dl
movzx edx,byte ptr [ebx+00000133]
mov [esp+3E],al
movzx eax,byte ptr [ebx+00000134]
mov [esp+3F],cl
movzx ecx,byte ptr [ebx+00000135]
push ebx
mov [esp+44],dl
mov [esp+45],al
mov [esp+46],cl
call ps_game.exe+9B120
movzx edx,byte ptr [ebx+0000012F]
mov ecx,[ebx+00000184]
mov [esp+43],al
mov eax,[ebx+00000148]
mov [esp+45],eax
mov eax,[ebx+0000018C]
mov [esp+44],dl
mov edx,[ebx+00000188]
mov [esp+69],eax
movzx eax,byte ptr [ebx+00000198]
mov [esp+61],ecx
mov ecx,[ebx+00000190]
mov [esp+65],edx
mov edx,[ebx+00000194]
mov [esp+75],al
mov [esp+6D],ecx
mov [esp+71],edx
mov byte ptr [esp+75],00 { 0 }
lea edi,[esp+4A]
lea ebp,[ebx+000001C0]
mov [esp+14],00000008 { 8 }
label5:
cmp dword ptr [ebp+00],00 { 0 }
je label1
mov esi,[ebp+00]
mov cl,[esi+40]
mov [edi-01],cl
mov dl,[esi+41]
lea eax,[esi+4C]
mov [edi],dl
lea edx,[eax+01]
lea esp,[esp+00]
label2:
mov cl,[eax]
inc eax
test cl,cl
jne label2
sub eax,edx
cmp eax,14 { 20 }
jne label3
mov al,[esi+5E]
cmp al,30 { 48 }
jl label3
cmp al,39 { 57 }
jg label3
mov cl,[esi+5F]
cmp cl,30 { 48 }
jl label3
cmp cl,39 { 57 }
jg label3
sub al,30 { 48 }
mov dl,0A { 10 }
imul dl
add al,cl
sub al,30 { 48 }
mov [edi+01],al
jmp label4
label3:
xor al,al
mov [edi+01],al
jmp label4
label1:
mov byte ptr [edi-01],00 { 0 }
mov byte ptr [edi],00 { 0 }
mov byte ptr [edi+01],00 { 0 }
label4:
add ebp,04 { 4 }
add edi,03 { 3 }
sub dword ptr [esp+14],01 { 1 }
jne label5
mov eax,[ebx+000001DC]
jmp label6
mov ecx,[eax+46]
mov [esp+76],ecx
mov dx,[eax+4A]
lea eax,[esp+7C]
push eax
mov [esp+7E],dx
call ps_game.exe+84F50
lea eax,[esp+7C]
lea edx,[eax+01]
nop
label7:
mov cl,[eax]
inc eax
test cl,cl
jne label7
sub eax,edx
add eax,49 { 73 }
lea ecx,[esp+38]
jmp label10
label6:
lea edx,[esp+76]
push edx
call ps_game.exe+84F50
lea eax,[esp+76]
lea edx,[eax+01]
label9:
mov cl,[eax]
inc eax
test cl,cl
jne label9
//mov edi,0
//mov esi,ebx
lea ebx,[ebx+18]
label10:
pop ecx
mov eax,50
push eax
lea eax,[esp+34]
push eax
movzx eax, byte ptr [ecx+0000012D]
cmp al,1
je odina
mov al,1
jmp asda
odina:
mov al,0
asda:
mov [esp+40],al
call ps_game.exe+ED0E0 //send
sameCharacter:
add esp,128
pop eax
popad
inc eax
cmp eax,[ebx+10]
jl zanovo

pushad
sub esp,128
mov ebx,[esp+128+20+14]
mov ecx,[ebx+000000DC]
mov eax,00000303 { 771 }
mov [esp+34],ax
mov [esp+36],ecx
movzx eax,byte ptr [ebx+0000144C]
movzx ecx,byte ptr [ebx+0000012D]
sete dl
mov [esp+3A],dl
movzx edx,byte ptr [ebx+0000012E]
mov [esp+3B],al
movzx eax,byte ptr [ebx+00000131]
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
mov [esp+3D],dl
movzx edx,byte ptr [ebx+00000133]
mov [esp+3E],al
movzx eax,byte ptr [ebx+00000134]
mov [esp+3F],cl
movzx ecx,byte ptr [ebx+00000135]
push ebx
mov [esp+44],dl
mov [esp+45],al
mov [esp+46],cl
call ps_game.exe+9B120
movzx edx,byte ptr [ebx+0000012F]
mov ecx,[ebx+00000184]
mov [esp+43],al
mov eax,[ebx+00000148]
mov [esp+45],eax
mov eax,[ebx+0000018C]
mov [esp+44],dl
mov edx,[ebx+00000188]
mov [esp+69],eax
movzx eax,byte ptr [ebx+00000198]
mov [esp+61],ecx
mov ecx,[ebx+00000190]
mov [esp+65],edx
mov edx,[ebx+00000194]
mov [esp+75],al
mov [esp+6D],ecx
mov [esp+71],edx
mov byte ptr [esp+75],00 { 0 }
lea edi,[esp+4A]
lea ebp,[ebx+000001C0]
mov [esp+14],00000008 { 8 }
labell5:
cmp dword ptr [ebp+00],00 { 0 }
je labell1
mov esi,[ebp+00]
mov cl,[esi+40]
mov [edi-01],cl
mov dl,[esi+41]
lea eax,[esi+4C]
mov [edi],dl
lea edx,[eax+01]
lea esp,[esp+00]
labell2:
mov cl,[eax]
inc eax
test cl,cl
jne labell2
sub eax,edx
cmp eax,14 { 20 }
jne labell3
mov al,[esi+5E]
cmp al,30 { 48 }
jl labell3
cmp al,39 { 57 }
jg labell3
mov cl,[esi+5F]
cmp cl,30 { 48 }
jl labell3
cmp cl,39 { 57 }
jg labell3
sub al,30 { 48 }
mov dl,0A { 10 }
imul dl
add al,cl
sub al,30 { 48 }
mov [edi+01],al
jmp labell4
labell3:
xor al,al
mov [edi+01],al
jmp labell4
labell1:
mov byte ptr [edi-01],00 { 0 }
mov byte ptr [edi],00 { 0 }
mov byte ptr [edi+01],00 { 0 }
labell4:
add ebp,04 { 4 }
add edi,03 { 3 }
sub dword ptr [esp+14],01 { 1 }
jne labell5
mov eax,[ebx+000001DC]
jmp labell6
mov ecx,[eax+46]
mov [esp+76],ecx
mov dx,[eax+4A]
lea eax,[esp+7C]
push eax
mov [esp+7E],dx
call ps_game.exe+84F50
lea eax,[esp+7C]
lea edx,[eax+01]
nop
labell7:
mov cl,[eax]
inc eax
test cl,cl
jne labell7
sub eax,edx
add eax,49 { 73 }
lea ecx,[esp+38]
jmp labell10
labell6:
lea edx,[esp+76]
push edx
call ps_game.exe+84F50
lea eax,[esp+76]
lea edx,[eax+01]
labell9:
mov cl,[eax]
inc eax
test cl,cl
jne labell9
mov edx,ebx
mov edi,0
mov ebx,[esp+120]
mov esi,ebx
lea ebx,[ebx+18]
labell10:
mov ecx,[ebx]
cmp ecx,edx
je labell11
test ecx,ecx
je labell11
sub eax,edx
mov eax,50
push eax
lea eax,[esp+38]
push eax
movzx eax, byte ptr [ecx+0000012D]
cmp al,1
je odinaa
mov al,1
jmp asdaa
odinaa:
mov al,0
asdaa:
mov [esp+3C+8],al
call ps_game.exe+ED0E0 //send
labell11:
add edi,01 { 1 }
add ebx,08 { 8 }
cmp edi,[esi+10]
jl labell10
originalcode:
add esp,00000128 { 296 }
popad
mov eax,[ebx+10]

exit:
jmp returnhere

originalcode2:
pop edi
mov eax,[ebx+10]
jmp exit

"ps_game.exe"+502DE:
jmp newmem
nop
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+502DE:
add dword ptr [ebx+10],-01
mov eax,[ebx+10]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>323</ID>
              <Description>"party leave"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
add dword ptr [ebx+10],-01
push edi
mov edi,[esp+28]
cmp byte ptr [edi+160],(int)39 //MapID
jne originalcode2
pop edi
mov eax,0
zanovo:
pushad
push eax
sub esp,128
mov ecx,[esp+128+20+28]
mov ebx,[eax*8+esi+18]
cmp ecx,ebx
je sameCharacter
push ecx
mov ecx,[ebx+000000DC]
mov eax,00000303 { 771 }
mov [esp+34],ax
mov [esp+36],ecx
movzx eax,byte ptr [ebx+0000144C]
movzx ecx,byte ptr [ebx+0000012D]
sete dl
mov [esp+3A],dl
movzx edx,byte ptr [ebx+0000012E]
mov [esp+3B],al
movzx eax,byte ptr [ebx+00000131]
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
mov [esp+3D],dl
movzx edx,byte ptr [ebx+00000133]
mov [esp+3E],al
movzx eax,byte ptr [ebx+00000134]
mov [esp+3F],cl
movzx ecx,byte ptr [ebx+00000135]
push ebx
mov [esp+44],dl
mov [esp+45],al
mov [esp+46],cl
call ps_game.exe+9B120
movzx edx,byte ptr [ebx+0000012F]
mov ecx,[ebx+00000184]
mov [esp+43],al
mov eax,[ebx+00000148]
mov [esp+45],eax
mov eax,[ebx+0000018C]
mov [esp+44],dl
mov edx,[ebx+00000188]
mov [esp+69],eax
movzx eax,byte ptr [ebx+00000198]
mov [esp+61],ecx
mov ecx,[ebx+00000190]
mov [esp+65],edx
mov edx,[ebx+00000194]
mov [esp+75],al
mov [esp+6D],ecx
mov [esp+71],edx
mov byte ptr [esp+75],00 { 0 }
lea edi,[esp+4A]
lea ebp,[ebx+000001C0]
mov [esp+14],00000008 { 8 }
label5:
cmp dword ptr [ebp+00],00 { 0 }
je label1
mov esi,[ebp+00]
mov cl,[esi+40]
mov [edi-01],cl
mov dl,[esi+41]
lea eax,[esi+4C]
mov [edi],dl
lea edx,[eax+01]
lea esp,[esp+00]
label2:
mov cl,[eax]
inc eax
test cl,cl
jne label2
sub eax,edx
cmp eax,14 { 20 }
jne label3
mov al,[esi+5E]
cmp al,30 { 48 }
jl label3
cmp al,39 { 57 }
jg label3
mov cl,[esi+5F]
cmp cl,30 { 48 }
jl label3
cmp cl,39 { 57 }
jg label3
sub al,30 { 48 }
mov dl,0A { 10 }
imul dl
add al,cl
sub al,30 { 48 }
mov [edi+01],al
jmp label4
label3:
xor al,al
mov [edi+01],al
jmp label4
label1:
mov byte ptr [edi-01],00 { 0 }
mov byte ptr [edi],00 { 0 }
mov byte ptr [edi+01],00 { 0 }
label4:
add ebp,04 { 4 }
add edi,03 { 3 }
sub dword ptr [esp+14],01 { 1 }
jne label5
mov eax,[ebx+000001DC]
jmp label6
mov ecx,[eax+46]
mov [esp+76],ecx
mov dx,[eax+4A]
lea eax,[esp+7C]
push eax
mov [esp+7E],dx
call ps_game.exe+84F50
lea eax,[esp+7C]
lea edx,[eax+01]
nop
label7:
mov cl,[eax]
inc eax
test cl,cl
jne label7
sub eax,edx
add eax,49 { 73 }
lea ecx,[esp+38]
mov ebx,[ebx+17F4]
lea ebx,[ebx+18]
jmp label10
label6:
lea edx,[esp+76]
push edx
call ps_game.exe+84F50
lea eax,[esp+76]
lea edx,[eax+01]
label9:
mov cl,[eax]
inc eax
test cl,cl
jne label9
//mov edi,0
//mov esi,ebx
lea ebx,[ebx+18]
label10:
pop ecx
mov eax,50
push eax
lea eax,[esp+34]
push eax
movzx eax, byte ptr [ecx+0000012D]
cmp al,1
je odina
mov al,1
jmp asda
odina:
mov al,0
asda:
mov [esp+40],al
call ps_game.exe+ED0E0 //send
sameCharacter:
add esp,128
pop eax
popad
inc eax
cmp eax,[ebx+10]
jl zanovo

pushad
sub esp,128
mov ebx,[esp+128+20+24]
mov ecx,[ebx+000000DC]
mov eax,00000303 { 771 }
mov [esp+34],ax
mov [esp+36],ecx
movzx eax,byte ptr [ebx+0000144C]
movzx ecx,byte ptr [ebx+0000012D]
sete dl
mov [esp+3A],dl
movzx edx,byte ptr [ebx+0000012E]
mov [esp+3B],al
movzx eax,byte ptr [ebx+00000131]
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
mov [esp+3D],dl
movzx edx,byte ptr [ebx+00000133]
mov [esp+3E],al
movzx eax,byte ptr [ebx+00000134]
mov [esp+3F],cl
movzx ecx,byte ptr [ebx+00000135]
push ebx
mov [esp+44],dl
mov [esp+45],al
mov [esp+46],cl
call ps_game.exe+9B120
movzx edx,byte ptr [ebx+0000012F]
mov ecx,[ebx+00000184]
mov [esp+43],al
mov eax,[ebx+00000148]
mov [esp+45],eax
mov eax,[ebx+0000018C]
mov [esp+44],dl
mov edx,[ebx+00000188]
mov [esp+69],eax
movzx eax,byte ptr [ebx+00000198]
mov [esp+61],ecx
mov ecx,[ebx+00000190]
mov [esp+65],edx
mov edx,[ebx+00000194]
mov [esp+75],al
mov [esp+6D],ecx
mov [esp+71],edx
mov byte ptr [esp+75],00 { 0 }
lea edi,[esp+4A]
lea ebp,[ebx+000001C0]
mov [esp+14],00000008 { 8 }
labell5:
cmp dword ptr [ebp+00],00 { 0 }
je labell1
mov esi,[ebp+00]
mov cl,[esi+40]
mov [edi-01],cl
mov dl,[esi+41]
lea eax,[esi+4C]
mov [edi],dl
lea edx,[eax+01]
lea esp,[esp+00]
labell2:
mov cl,[eax]
inc eax
test cl,cl
jne labell2
sub eax,edx
cmp eax,14 { 20 }
jne labell3
mov al,[esi+5E]
cmp al,30 { 48 }
jl labell3
cmp al,39 { 57 }
jg labell3
mov cl,[esi+5F]
cmp cl,30 { 48 }
jl labell3
cmp cl,39 { 57 }
jg labell3
sub al,30 { 48 }
mov dl,0A { 10 }
imul dl
add al,cl
sub al,30 { 48 }
mov [edi+01],al
jmp labell4
labell3:
xor al,al
mov [edi+01],al
jmp labell4
labell1:
mov byte ptr [edi-01],00 { 0 }
mov byte ptr [edi],00 { 0 }
mov byte ptr [edi+01],00 { 0 }
labell4:
add ebp,04 { 4 }
add edi,03 { 3 }
sub dword ptr [esp+14],01 { 1 }
jne labell5
mov eax,[ebx+000001DC]
jmp labell6
mov ecx,[eax+46]
mov [esp+76],ecx
mov dx,[eax+4A]
lea eax,[esp+7C]
push eax
mov [esp+7E],dx
call ps_game.exe+84F50
lea eax,[esp+7C]
lea edx,[eax+01]
nop
labell7:
mov cl,[eax]
inc eax
test cl,cl
jne labell7
sub eax,edx
add eax,49 { 73 }
lea ecx,[esp+38]
mov ebx,[ebx+17F4]
lea ebx,[ebx+18]
jmp labell10
labell6:
lea edx,[esp+76]
push edx
call ps_game.exe+84F50
lea eax,[esp+76]
lea edx,[eax+01]
labell9:
mov cl,[eax]
inc eax
test cl,cl
jne labell9
mov edx,ebx
mov edi,0
mov ebx,[esp+120]
mov esi,ebx
lea ebx,[ebx+18]
labell10:
mov ecx,[ebx]
cmp ecx,edx
je labell11
test ecx,ecx
je labell11
sub eax,edx
mov eax,50
push eax
lea eax,[esp+38]
push eax
movzx eax, byte ptr [ecx+0000012D]
cmp al,1
je odinaa
mov al,1
jmp asdaa
odinaa:
mov al,0
asdaa:
mov [esp+3C+8],al
call ps_game.exe+ED0E0 //send
labell11:
add edi,01 { 1 }
add ebx,08 { 8 }
cmp edi,[esi+10]
jl labell10
originalcode:
add esp,00000128 { 296 }
popad
mov eax,[ebx+10]

exit:
jmp returnhere

originalcode2:
pop edi
mov eax,[ebx+10]
jmp exit

"ps_game.exe"+4FB33:
jmp newmem
nop
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+4FB33:
add dword ptr [ebx+10],-01
mov eax,[ebx+10]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>324</ID>
              <Description>"party enter"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
inc [ebp+10]
cmp byte ptr[ebx+160],(int)39//MapID
jne originalcode2
cmp [ebp+10],1
je originalcode2
mov eax,0

zanovo:
push eax
pushad
mov ebx,[eax*8+ebp+18]
mov ecx,[ebx+000000DC]
mov eax,00000303 { 771 }
mov [esp+34],ax
mov [esp+36],ecx
movzx eax,byte ptr [ebx+0000144C]
movzx ecx,byte ptr [ebx+0000012D]
sete dl
mov [esp+3A],dl
movzx edx,byte ptr [ebx+0000012E]
mov [esp+3B],al
movzx eax,byte ptr [ebx+00000131]
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
mov [esp+3D],dl
movzx edx,byte ptr [ebx+00000133]
mov [esp+3E],al
movzx eax,byte ptr [ebx+00000134]
mov [esp+3F],cl
movzx ecx,byte ptr [ebx+00000135]
push ebx
mov [esp+44],dl
mov [esp+45],al
mov [esp+46],cl
call ps_game.exe+9B120
movzx edx,byte ptr [ebx+0000012F]
mov ecx,[ebx+00000184]
mov [esp+43],al
mov eax,[ebx+00000148]
mov [esp+45],eax
mov eax,[ebx+0000018C]
mov [esp+44],dl
mov edx,[ebx+00000188]
mov [esp+69],eax
movzx eax,byte ptr [ebx+00000198]
mov [esp+61],ecx
mov ecx,[ebx+00000190]
mov [esp+65],edx
mov edx,[ebx+00000194]
mov [esp+75],al
mov [esp+6D],ecx
mov [esp+71],edx
mov byte ptr [esp+75],00 { 0 }
lea edi,[esp+4A]
lea ebp,[ebx+000001C0]
mov [esp+14],00000008 { 8 }
label5:
cmp dword ptr [ebp+00],00 { 0 }
je label1
mov esi,[ebp+00]
mov cl,[esi+40]
mov [edi-01],cl
mov dl,[esi+41]
lea eax,[esi+4C]
mov [edi],dl
lea edx,[eax+01]
lea esp,[esp+00]
label2:
mov cl,[eax]
inc eax
test cl,cl
jne label2
sub eax,edx
cmp eax,14 { 20 }
jne label3
mov al,[esi+5E]
cmp al,30 { 48 }
jl label3
cmp al,39 { 57 }
jg label3
mov cl,[esi+5F]
cmp cl,30 { 48 }
jl label3
cmp cl,39 { 57 }
jg label3
sub al,30 { 48 }
mov dl,0A { 10 }
imul dl
add al,cl
sub al,30 { 48 }
mov [edi+01],al
jmp label4
label3:
xor al,al
mov [edi+01],al
jmp label4
label1:
mov byte ptr [edi-01],00 { 0 }
mov byte ptr [edi],00 { 0 }
mov byte ptr [edi+01],00 { 0 }
label4:
add ebp,04 { 4 }
add edi,03 { 3 }
sub dword ptr [esp+14],01 { 1 }
jne label5
mov eax,[ebx+000001DC]
jmp label6
mov ecx,[eax+46]
mov [esp+76],ecx
mov dx,[eax+4A]
lea eax,[esp+7C]
push eax
mov [esp+7E],dx
call ps_game.exe+84F50
lea eax,[esp+7C]
lea edx,[eax+01]
nop
label7:
mov cl,[eax]
inc eax
test cl,cl
jne label7
sub eax,edx
add eax,49 { 73 }
lea ecx,[esp+38]
mov ebx,[ebx+17F4]
lea ebx,[ebx+18]
jmp label10
label6:
lea edx,[esp+76]
push edx
call ps_game.exe+84F50
lea eax,[esp+76]
lea edx,[eax+01]
label9:
mov cl,[eax]
inc eax
test cl,cl
jne label9
mov edi,0
mov ebx,[ebx+000017F4]
mov esi,ebx
lea ebx,[ebx+18]
label10:
mov ecx,[ebx]
test ecx,ecx
je label11
sub eax,edx
mov eax,50
push eax
lea eax,[esp+38]
push eax
movzx eax, byte ptr [ecx+0000012D]
mov [esp+3C+8],al
call ps_game.exe+ED0E0 //send
label11:
add edi,01 { 1 }
add ebx,08 { 8 }
cmp edi,[esi+10]
jl label10
popad
pop eax
inc eax
cmp eax,[ebp+10]
jl zanovo
originalcode:
mov edi,ebp

exit:
jmp returnhere

originalcode2:
mov edi,ebp
jmp exit

"ps_game.exe"+4F4D6:
jmp newmem
returnhere:



[DISABLE]
dealloc(newmem)
"ps_game.exe"+4F4D6:
inc [ebp+10]
mov edi,ebp
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>640</ID>
              <Description>"raid kick"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
add dword ptr [ebx+10],-01
push edi
mov edi,[esp+1C]
cmp byte ptr [edi+160],(int)39 //MapID
jne originalcode2
pop edi
mov eax,0
zanovo:
pushad
push eax
sub esp,128
mov ecx,[esp+128+20+1c]
mov ebx,[eax*8+esi+18]
cmp ecx,ebx
je sameCharacter
push ecx
mov ecx,[ebx+000000DC]
mov eax,00000303 { 771 }
mov [esp+34],ax
mov [esp+36],ecx
movzx eax,byte ptr [ebx+0000144C]
movzx ecx,byte ptr [ebx+0000012D]
sete dl
mov [esp+3A],dl
movzx edx,byte ptr [ebx+0000012E]
mov [esp+3B],al
movzx eax,byte ptr [ebx+00000131]
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
mov [esp+3D],dl
movzx edx,byte ptr [ebx+00000133]
mov [esp+3E],al
movzx eax,byte ptr [ebx+00000134]
mov [esp+3F],cl
movzx ecx,byte ptr [ebx+00000135]
push ebx
mov [esp+44],dl
mov [esp+45],al
mov [esp+46],cl
call ps_game.exe+9B120
movzx edx,byte ptr [ebx+0000012F]
mov ecx,[ebx+00000184]
mov [esp+43],al
mov eax,[ebx+00000148]
mov [esp+45],eax
mov eax,[ebx+0000018C]
mov [esp+44],dl
mov edx,[ebx+00000188]
mov [esp+69],eax
movzx eax,byte ptr [ebx+00000198]
mov [esp+61],ecx
mov ecx,[ebx+00000190]
mov [esp+65],edx
mov edx,[ebx+00000194]
mov [esp+75],al
mov [esp+6D],ecx
mov [esp+71],edx
mov byte ptr [esp+75],00 { 0 }
lea edi,[esp+4A]
lea ebp,[ebx+000001C0]
mov [esp+14],00000008 { 8 }
label5:
cmp dword ptr [ebp+00],00 { 0 }
je label1
mov esi,[ebp+00]
mov cl,[esi+40]
mov [edi-01],cl
mov dl,[esi+41]
lea eax,[esi+4C]
mov [edi],dl
lea edx,[eax+01]
lea esp,[esp+00]
label2:
mov cl,[eax]
inc eax
test cl,cl
jne label2
sub eax,edx
cmp eax,14 { 20 }
jne label3
mov al,[esi+5E]
cmp al,30 { 48 }
jl label3
cmp al,39 { 57 }
jg label3
mov cl,[esi+5F]
cmp cl,30 { 48 }
jl label3
cmp cl,39 { 57 }
jg label3
sub al,30 { 48 }
mov dl,0A { 10 }
imul dl
add al,cl
sub al,30 { 48 }
mov [edi+01],al
jmp label4
label3:
xor al,al
mov [edi+01],al
jmp label4
label1:
mov byte ptr [edi-01],00 { 0 }
mov byte ptr [edi],00 { 0 }
mov byte ptr [edi+01],00 { 0 }
label4:
add ebp,04 { 4 }
add edi,03 { 3 }
sub dword ptr [esp+14],01 { 1 }
jne label5
mov eax,[ebx+000001DC]
jmp label6
mov ecx,[eax+46]
mov [esp+76],ecx
mov dx,[eax+4A]
lea eax,[esp+7C]
push eax
mov [esp+7E],dx
call ps_game.exe+84F50
lea eax,[esp+7C]
lea edx,[eax+01]
nop
label7:
mov cl,[eax]
inc eax
test cl,cl
jne label7
sub eax,edx
add eax,49 { 73 }
lea ecx,[esp+38]
jmp label10
label6:
lea edx,[esp+76]
push edx
call ps_game.exe+84F50
lea eax,[esp+76]
lea edx,[eax+01]
label9:
mov cl,[eax]
inc eax
test cl,cl
jne label9
//mov edi,0
//mov esi,ebx
lea ebx,[ebx+18]
label10:
pop ecx
mov eax,50
push eax
lea eax,[esp+34]
push eax
movzx eax, byte ptr [ecx+0000012D]
cmp al,1
je odina
mov al,1
jmp asda
odina:
mov al,0
asda:
mov [esp+40],al
call ps_game.exe+ED0E0 //send
sameCharacter:
add esp,128
pop eax
popad
inc eax
cmp eax,[ebx+10]
jl zanovo

pushad
sub esp,128
mov ebx,[esp+128+20+18]
mov ecx,[ebx+000000DC]
mov eax,00000303 { 771 }
mov [esp+34],ax
mov [esp+36],ecx
movzx eax,byte ptr [ebx+0000144C]
movzx ecx,byte ptr [ebx+0000012D]
sete dl
mov [esp+3A],dl
movzx edx,byte ptr [ebx+0000012E]
mov [esp+3B],al
movzx eax,byte ptr [ebx+00000131]
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
mov [esp+3D],dl
movzx edx,byte ptr [ebx+00000133]
mov [esp+3E],al
movzx eax,byte ptr [ebx+00000134]
mov [esp+3F],cl
movzx ecx,byte ptr [ebx+00000135]
push ebx
mov [esp+44],dl
mov [esp+45],al
mov [esp+46],cl
call ps_game.exe+9B120
movzx edx,byte ptr [ebx+0000012F]
mov ecx,[ebx+00000184]
mov [esp+43],al
mov eax,[ebx+00000148]
mov [esp+45],eax
mov eax,[ebx+0000018C]
mov [esp+44],dl
mov edx,[ebx+00000188]
mov [esp+69],eax
movzx eax,byte ptr [ebx+00000198]
mov [esp+61],ecx
mov ecx,[ebx+00000190]
mov [esp+65],edx
mov edx,[ebx+00000194]
mov [esp+75],al
mov [esp+6D],ecx
mov [esp+71],edx
mov byte ptr [esp+75],00 { 0 }
lea edi,[esp+4A]
lea ebp,[ebx+000001C0]
mov [esp+14],00000008 { 8 }
labell5:
cmp dword ptr [ebp+00],00 { 0 }
je labell1
mov esi,[ebp+00]
mov cl,[esi+40]
mov [edi-01],cl
mov dl,[esi+41]
lea eax,[esi+4C]
mov [edi],dl
lea edx,[eax+01]
lea esp,[esp+00]
labell2:
mov cl,[eax]
inc eax
test cl,cl
jne labell2
sub eax,edx
cmp eax,14 { 20 }
jne labell3
mov al,[esi+5E]
cmp al,30 { 48 }
jl labell3
cmp al,39 { 57 }
jg labell3
mov cl,[esi+5F]
cmp cl,30 { 48 }
jl labell3
cmp cl,39 { 57 }
jg labell3
sub al,30 { 48 }
mov dl,0A { 10 }
imul dl
add al,cl
sub al,30 { 48 }
mov [edi+01],al
jmp labell4
labell3:
xor al,al
mov [edi+01],al
jmp labell4
labell1:
mov byte ptr [edi-01],00 { 0 }
mov byte ptr [edi],00 { 0 }
mov byte ptr [edi+01],00 { 0 }
labell4:
add ebp,04 { 4 }
add edi,03 { 3 }
sub dword ptr [esp+14],01 { 1 }
jne labell5
mov eax,[ebx+000001DC]
jmp labell6
mov ecx,[eax+46]
mov [esp+76],ecx
mov dx,[eax+4A]
lea eax,[esp+7C]
push eax
mov [esp+7E],dx
call ps_game.exe+84F50
lea eax,[esp+7C]
lea edx,[eax+01]
nop
labell7:
mov cl,[eax]
inc eax
test cl,cl
jne labell7
sub eax,edx
add eax,49 { 73 }
lea ecx,[esp+38]
jmp labell10
labell6:
lea edx,[esp+76]
push edx
call ps_game.exe+84F50
lea eax,[esp+76]
lea edx,[eax+01]
labell9:
mov cl,[eax]
inc eax
test cl,cl
jne labell9
mov edx,ebx
mov edi,0
mov ebx,[esp+0000012C]
mov esi,ebx
lea ebx,[ebx+18]
labell10:
mov ecx,[ebx]
cmp ecx,edx
je labell11
test ecx,ecx
je labell11
sub eax,edx
mov eax,50
push eax
lea eax,[esp+38]
push eax
movzx eax, byte ptr [ecx+0000012D]
cmp al,1
je odinaa
mov al,1
jmp asdaa
odinaa:
mov al,0
asdaa:
mov [esp+3C+8],al
call ps_game.exe+ED0E0 //send
labell11:
add edi,01 { 1 }
add ebx,08 { 8 }
cmp edi,[esi+10]
jl labell10
originalcode:
add esp,00000128 { 296 }
popad
mov ecx,[ebx+10]

exit:
jmp returnhere

originalcode2:
pop edi
mov ecx,[ebx+10]
jmp exit

"ps_game.exe"+4FEF3:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+4FEF3:
add dword ptr [ebx+10],-01
mov ecx,[ebx+10]
//Alt: db 83 43 10 FF 8B 4B 10
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>15</ID>
              <Description>"raid leave"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
add dword ptr [ebx+10],-01
push edi
mov edi,[esp+1C]
cmp byte ptr [edi+160],(int)39 //MapID
jne originalcode2
pop edi
mov eax,0
zanovo:
pushad
push eax
sub esp,128
mov ecx,[esp+128+20+1c]
mov ebx,[eax*8+esi+18]
cmp ecx,ebx
je sameCharacter
push ecx
mov ecx,[ebx+000000DC]
mov eax,00000303 { 771 }
mov [esp+34],ax
mov [esp+36],ecx
movzx eax,byte ptr [ebx+0000144C]
movzx ecx,byte ptr [ebx+0000012D]
sete dl
mov [esp+3A],dl
movzx edx,byte ptr [ebx+0000012E]
mov [esp+3B],al
movzx eax,byte ptr [ebx+00000131]
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
mov [esp+3D],dl
movzx edx,byte ptr [ebx+00000133]
mov [esp+3E],al
movzx eax,byte ptr [ebx+00000134]
mov [esp+3F],cl
movzx ecx,byte ptr [ebx+00000135]
push ebx
mov [esp+44],dl
mov [esp+45],al
mov [esp+46],cl
call ps_game.exe+9B120
movzx edx,byte ptr [ebx+0000012F]
mov ecx,[ebx+00000184]
mov [esp+43],al
mov eax,[ebx+00000148]
mov [esp+45],eax
mov eax,[ebx+0000018C]
mov [esp+44],dl
mov edx,[ebx+00000188]
mov [esp+69],eax
movzx eax,byte ptr [ebx+00000198]
mov [esp+61],ecx
mov ecx,[ebx+00000190]
mov [esp+65],edx
mov edx,[ebx+00000194]
mov [esp+75],al
mov [esp+6D],ecx
mov [esp+71],edx
mov byte ptr [esp+75],00 { 0 }
lea edi,[esp+4A]
lea ebp,[ebx+000001C0]
mov [esp+14],00000008 { 8 }
label5:
cmp dword ptr [ebp+00],00 { 0 }
je label1
mov esi,[ebp+00]
mov cl,[esi+40]
mov [edi-01],cl
mov dl,[esi+41]
lea eax,[esi+4C]
mov [edi],dl
lea edx,[eax+01]
lea esp,[esp+00]
label2:
mov cl,[eax]
inc eax
test cl,cl
jne label2
sub eax,edx
cmp eax,14 { 20 }
jne label3
mov al,[esi+5E]
cmp al,30 { 48 }
jl label3
cmp al,39 { 57 }
jg label3
mov cl,[esi+5F]
cmp cl,30 { 48 }
jl label3
cmp cl,39 { 57 }
jg label3
sub al,30 { 48 }
mov dl,0A { 10 }
imul dl
add al,cl
sub al,30 { 48 }
mov [edi+01],al
jmp label4
label3:
xor al,al
mov [edi+01],al
jmp label4
label1:
mov byte ptr [edi-01],00 { 0 }
mov byte ptr [edi],00 { 0 }
mov byte ptr [edi+01],00 { 0 }
label4:
add ebp,04 { 4 }
add edi,03 { 3 }
sub dword ptr [esp+14],01 { 1 }
jne label5
mov eax,[ebx+000001DC]
jmp label6
mov ecx,[eax+46]
mov [esp+76],ecx
mov dx,[eax+4A]
lea eax,[esp+7C]
push eax
mov [esp+7E],dx
call ps_game.exe+84F50
lea eax,[esp+7C]
lea edx,[eax+01]
nop
label7:
mov cl,[eax]
inc eax
test cl,cl
jne label7
sub eax,edx
add eax,49 { 73 }
lea ecx,[esp+38]
jmp label10
label6:
lea edx,[esp+76]
push edx
call ps_game.exe+84F50
lea eax,[esp+76]
lea edx,[eax+01]
label9:
mov cl,[eax]
inc eax
test cl,cl
jne label9
//mov edi,0
//mov esi,ebx
lea ebx,[ebx+18]
label10:
pop ecx
mov eax,50
push eax
lea eax,[esp+34]
push eax
movzx eax, byte ptr [ecx+0000012D]
cmp al,1
je odina
mov al,1
jmp asda
odina:
mov al,0
asda:
mov [esp+40],al
call ps_game.exe+ED0E0 //send
sameCharacter:
add esp,128
pop eax
popad
inc eax
cmp eax,[ebx+10]
jl zanovo

pushad
sub esp,128
mov ebx,[esp+128+20+18]
mov ecx,[ebx+000000DC]
mov eax,00000303 { 771 }
mov [esp+34],ax
mov [esp+36],ecx
movzx eax,byte ptr [ebx+0000144C]
movzx ecx,byte ptr [ebx+0000012D]
sete dl
mov [esp+3A],dl
movzx edx,byte ptr [ebx+0000012E]
mov [esp+3B],al
movzx eax,byte ptr [ebx+00000131]
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
mov [esp+3D],dl
movzx edx,byte ptr [ebx+00000133]
mov [esp+3E],al
movzx eax,byte ptr [ebx+00000134]
mov [esp+3F],cl
movzx ecx,byte ptr [ebx+00000135]
push ebx
mov [esp+44],dl
mov [esp+45],al
mov [esp+46],cl
call ps_game.exe+9B120
movzx edx,byte ptr [ebx+0000012F]
mov ecx,[ebx+00000184]
mov [esp+43],al
mov eax,[ebx+00000148]
mov [esp+45],eax
mov eax,[ebx+0000018C]
mov [esp+44],dl
mov edx,[ebx+00000188]
mov [esp+69],eax
movzx eax,byte ptr [ebx+00000198]
mov [esp+61],ecx
mov ecx,[ebx+00000190]
mov [esp+65],edx
mov edx,[ebx+00000194]
mov [esp+75],al
mov [esp+6D],ecx
mov [esp+71],edx
mov byte ptr [esp+75],00 { 0 }
lea edi,[esp+4A]
lea ebp,[ebx+000001C0]
mov [esp+14],00000008 { 8 }
labell5:
cmp dword ptr [ebp+00],00 { 0 }
je labell1
mov esi,[ebp+00]
mov cl,[esi+40]
mov [edi-01],cl
mov dl,[esi+41]
lea eax,[esi+4C]
mov [edi],dl
lea edx,[eax+01]
lea esp,[esp+00]
labell2:
mov cl,[eax]
inc eax
test cl,cl
jne labell2
sub eax,edx
cmp eax,14 { 20 }
jne labell3
mov al,[esi+5E]
cmp al,30 { 48 }
jl labell3
cmp al,39 { 57 }
jg labell3
mov cl,[esi+5F]
cmp cl,30 { 48 }
jl labell3
cmp cl,39 { 57 }
jg labell3
sub al,30 { 48 }
mov dl,0A { 10 }
imul dl
add al,cl
sub al,30 { 48 }
mov [edi+01],al
jmp labell4
labell3:
xor al,al
mov [edi+01],al
jmp labell4
labell1:
mov byte ptr [edi-01],00 { 0 }
mov byte ptr [edi],00 { 0 }
mov byte ptr [edi+01],00 { 0 }
labell4:
add ebp,04 { 4 }
add edi,03 { 3 }
sub dword ptr [esp+14],01 { 1 }
jne labell5
mov eax,[ebx+000001DC]
jmp labell6
mov ecx,[eax+46]
mov [esp+76],ecx
mov dx,[eax+4A]
lea eax,[esp+7C]
push eax
mov [esp+7E],dx
call ps_game.exe+84F50
lea eax,[esp+7C]
lea edx,[eax+01]
nop
labell7:
mov cl,[eax]
inc eax
test cl,cl
jne labell7
sub eax,edx
add eax,49 { 73 }
lea ecx,[esp+38]
jmp labell10
labell6:
lea edx,[esp+76]
push edx
call ps_game.exe+84F50
lea eax,[esp+76]
lea edx,[eax+01]
labell9:
mov cl,[eax]
inc eax
test cl,cl
jne labell9
mov edx,ebx
mov edi,0
mov ebx,[esp+120]
mov esi,ebx
lea ebx,[ebx+18]
labell10:
mov ecx,[ebx]
cmp ecx,edx
je labell11
test ecx,ecx
je labell11
sub eax,edx
mov eax,50
push eax
lea eax,[esp+38]
push eax
movzx eax, byte ptr [ecx+0000012D]
cmp al,1
je odinaa
mov al,1
jmp asdaa
odinaa:
mov al,0
asdaa:
mov [esp+3C+8],al
call ps_game.exe+ED0E0 //send
labell11:
add edi,01 { 1 }
add ebx,08 { 8 }
cmp edi,[esi+10]
jl labell10
originalcode:
add esp,00000128 { 296 }
popad
mov ecx,[ebx+10]

exit:
jmp returnhere

originalcode2:
pop edi
mov ecx,[ebx+10]
jmp exit

"ps_game.exe"+4F745:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+4F745:
add dword ptr [ebx+10],-01
mov ecx,[ebx+10]
//Alt: db 83 43 10 FF 8B 4B 10
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>16</ID>
              <Description>"raid enter"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
inc [ebp+10]
cmp byte ptr[ebx+160],(int)39//MapID
jne originalcode2
cmp [ebp+10],1
je originalcode2
mov eax,0

zanovo:
push eax
pushad
mov ebx,[eax*8+ebp+18]
mov ecx,[ebx+000000DC]
mov eax,00000303 { 771 }
mov [esp+34],ax
mov [esp+36],ecx
movzx eax,byte ptr [ebx+0000144C]
movzx ecx,byte ptr [ebx+0000012D]
sete dl
mov [esp+3A],dl
movzx edx,byte ptr [ebx+0000012E]
mov [esp+3B],al
movzx eax,byte ptr [ebx+00000131]
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
mov [esp+3D],dl
movzx edx,byte ptr [ebx+00000133]
mov [esp+3E],al
movzx eax,byte ptr [ebx+00000134]
mov [esp+3F],cl
movzx ecx,byte ptr [ebx+00000135]
push ebx
mov [esp+44],dl
mov [esp+45],al
mov [esp+46],cl
call ps_game.exe+9B120
movzx edx,byte ptr [ebx+0000012F]
mov ecx,[ebx+00000184]
mov [esp+43],al
mov eax,[ebx+00000148]
mov [esp+45],eax
mov eax,[ebx+0000018C]
mov [esp+44],dl
mov edx,[ebx+00000188]
mov [esp+69],eax
movzx eax,byte ptr [ebx+00000198]
mov [esp+61],ecx
mov ecx,[ebx+00000190]
mov [esp+65],edx
mov edx,[ebx+00000194]
mov [esp+75],al
mov [esp+6D],ecx
mov [esp+71],edx
mov byte ptr [esp+75],00 { 0 }
lea edi,[esp+4A]
lea ebp,[ebx+000001C0]
mov [esp+14],00000008 { 8 }
label5:
cmp dword ptr [ebp+00],00 { 0 }
je label1
mov esi,[ebp+00]
mov cl,[esi+40]
mov [edi-01],cl
mov dl,[esi+41]
lea eax,[esi+4C]
mov [edi],dl
lea edx,[eax+01]
lea esp,[esp+00]
label2:
mov cl,[eax]
inc eax
test cl,cl
jne label2
sub eax,edx
cmp eax,14 { 20 }
jne label3
mov al,[esi+5E]
cmp al,30 { 48 }
jl label3
cmp al,39 { 57 }
jg label3
mov cl,[esi+5F]
cmp cl,30 { 48 }
jl label3
cmp cl,39 { 57 }
jg label3
sub al,30 { 48 }
mov dl,0A { 10 }
imul dl
add al,cl
sub al,30 { 48 }
mov [edi+01],al
jmp label4
label3:
xor al,al
mov [edi+01],al
jmp label4
label1:
mov byte ptr [edi-01],00 { 0 }
mov byte ptr [edi],00 { 0 }
mov byte ptr [edi+01],00 { 0 }
label4:
add ebp,04 { 4 }
add edi,03 { 3 }
sub dword ptr [esp+14],01 { 1 }
jne label5
mov eax,[ebx+000001DC]
jmp label6
mov ecx,[eax+46]
mov [esp+76],ecx
mov dx,[eax+4A]
lea eax,[esp+7C]
push eax
mov [esp+7E],dx
call ps_game.exe+84F50
lea eax,[esp+7C]
lea edx,[eax+01]
nop
label7:
mov cl,[eax]
inc eax
test cl,cl
jne label7
sub eax,edx
add eax,49 { 73 }
lea ecx,[esp+38]
jmp label10
label6:
lea edx,[esp+76]
push edx
call ps_game.exe+84F50
lea eax,[esp+76]
lea edx,[eax+01]
label9:
mov cl,[eax]
inc eax
test cl,cl
jne label9
mov edi,0
mov ebx,[ebx+000017F4]
mov esi,ebx
lea ebx,[ebx+18]
label10:
mov ecx,[ebx]
test ecx,ecx
je label11
sub eax,edx
mov eax,50
push eax
lea eax,[esp+38]
push eax
movzx eax, byte ptr [ecx+0000012D]
mov [esp+3C+8],al
call ps_game.exe+ED0E0 //send
label11:
add edi,01 { 1 }
add ebx,08 { 8 }
cmp edi,[esi+10]
jl label10
popad
pop eax
inc eax
cmp eax,[ebp+10]
jl zanovo
originalcode:
mov edi,ebp

exit:
jmp returnhere

originalcode2:
mov edi,ebp
jmp exit

"ps_game.exe"+4F169:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+4F169:
inc [ebp+10]
mov edi,ebp
//Alt: db FF 45 10 8B FD
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>325</ID>
              <Description>"FFA party (/party in raid leader)"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [ebp+160],(int)39 //MapID
jne originalcode
jmp 00475F09
originalcode:
mov al,[ebx+0000012D]

exit:
jmp returnhere

"ps_game.exe"+75EEC:
jmp newmem
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+75EEC:
mov al,[ebx+0000012D]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>326</ID>
              <Description>"FFA party (/party)"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [ebp+160],(int)39//MapID
jne originalcode
jmp 00475514
originalcode:
mov cl,[edi+0000012D]

exit:
jmp returnhere

"ps_game.exe"+754F7:
jmp newmem
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+754F7:
mov cl,[edi+0000012D]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>327</ID>
              <Description>"FFA party (/join)"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [ebp+160],(int)39 //MapID
jne originalcode
cmp byte ptr [edi+160],(int)39 //MapID
je 004757D8
originalcode:
mov dl,[ebp+0000012D]

exit:
jmp returnhere

"ps_game.exe"+757BA:
jmp newmem
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+757BA:
mov dl,[ebp+0000012D]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>328</ID>
              <Description>"FFA party (search)"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [eax+160],(int)39 //MapID
jne originalcode
jmp 00484C77
originalcode:
mov cl,[eax+0000012D]

exit:
jmp returnhere

"ps_game.exe"+84C69:
jmp newmem
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+84C69:
mov cl,[eax+0000012D]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>329</ID>
              <Description>"FFA attack"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [eax+160],(int)39 //MapID
je mycode
jmp originalcode
mycode:
push eax
push ebx
mov ebx,[edx+000017F4]
cmp ebx,00
je NotInParty
mov eax,[eax+000017F4]
cmp eax,00
je NotInParty
cmp eax,ebx
jne NotInParty
pop ebx
pop eax
jmp 00457E39 //can not be attacked
NotInParty:
pop ebx
pop eax
jmp 00457E35 //can be attacked
originalcode:
mov dl,[edx+0000012D]

exit:
jmp returnhere

"ps_game.exe"+57E27:
jmp newmem
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+57E27:
mov dl,[edx+0000012D]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>11</ID>
              <Description>"FFA Items"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [ebp+160],(int)39 //MapID
je mycode
jmp originalcode
mycode:
push eax
push ebx
mov eax,[eax+000017F4]
cmp eax,00
je NotInParty
mov ebx,[ebp+000017F4]
cmp ebx,00
je NotInParty
cmp eax,ebx
jne NotInParty
pop ebx
pop eax
jmp 00473A87
NotInParty:
pop ebx
pop eax
jmp 0047468A
originalcode:
mov dl,[ebp+0000012D]

exit:
jmp returnhere

"ps_game.exe"+73A75:
jmp newmem
nop
returnhere:

 
 
[DISABLE]
"ps_game.exe"+73A75:
mov dl,[ebp+0000012D]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>330</ID>
              <Description>"FFA Skills"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr[esi+160],(int)39//MapID
je mycode
jmp originalcode
mycode:
push eax
push ebx
mov eax,[esi+000017F4]
cmp eax,00
je NotInParty
mov ebx,[edx+000017F4]
cmp ebx,00
je NotInParty
cmp eax,ebx
jne NotInParty
pop ebx
pop eax
jmp 00457F41 //SameParty
NotInParty:
pop ebx
pop eax
jmp 00457F01
originalcode:
mov al,[esi+0000012D]

exit:
jmp returnhere

"ps_game.exe"+57F33:
jmp newmem
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+57F33:
mov al,[esi+0000012D]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>331</ID>
              <Description>"Leave from party if TP to map or from map"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr[esi+160],(int)39//mapid
je leaveFromParty
cmp ax,(int)0//mapid
je leaveFromParty
jmp originalcode
leaveFromParty:
cmp [esi+000017F4],00
je originalcode
pushad
mov ecx,[esi+000017F4]
mov eax,esi
call ps_game.exe+4F5F0
popad
originalcode:
mov [esi+00000160],ax

exit:
jmp returnhere

"ps_game.exe"+148E0:
jmp newmem
nop
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+148E0:
mov [esi+00000160],ax
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>748</ID>
      <Description>"Automatic Drops / Recreation / DEX overwrite"</Description>
      <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>136</ID>
          <Description>"trade exploit fix"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
call ps_game.exe+ED0E0

push 04
lea eax,[esp+18]
push eax
mov ecx,ebx
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],01
mov byte ptr [esp+1F],00
call 004ED0E0
push 04
lea eax,[esp+18]
push eax
mov ecx,ebx
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],02
mov byte ptr [esp+1F],00
call 004ED0E0
push 04
lea eax,[esp+18]
push eax
mov ecx,esi
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],01
mov byte ptr [esp+1F],00
call 004ED0E0
push 04
lea eax,[esp+18]
push eax
mov ecx,esi
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],02
mov byte ptr [esp+1F],00
call 004ED0E0

exit:
jmp returnhere

"ps_game.exe"+7E007:
jmp newmem
returnhere:
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+7E007:
call ps_game.exe+ED0E0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>751</ID>
          <Description>"Leader can't activate Leader Loot in MM"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,1024)
label(returnhere)
label(originalcode)
label(exit)

define(stack_alloc,100)

// 4 bytes - global random drop count
// 4 bytes - x10,000 account random drop count
//alloc(player_random_drop_order,40004)
//define(accounts,#10000)

// ebp = raid
newmem:
cmp dword ptr [esp+18],0 // Killer
je originalcode

push ebx
sub esp,stack_alloc

mov esi,esp // store the stack pointer

// clear the memory
push stack_alloc
push 0
push esi
call msvcrt.memset
add esp,C

lea eax, dword ptr [ebp+118]
mov dword ptr [esi+stack_alloc-4],eax
push eax
call dword ptr [005540DC] // ntdll.RtlEnterCriticalSection

mov ecx, dword ptr [esi+stack_alloc+C] // mob
xor ebx,ebx

random_next:
mov edx, dword ptr [ebp+ebx*8+18]

cmp edx, dword ptr [esi+stack_alloc+1C]
je random_ok // skip all further checks for killer

push edx
push ecx
call func_is_player_within_range
test eax,eax
je random_next_check

random_ok:
mov eax, dword ptr [esi+stack_alloc-8]
mov dword ptr [esi+eax*4],edx
inc dword ptr [esi+stack_alloc-8]

random_next_check:
inc ebx
cmp ebx, dword ptr [ebp+10]
jb random_next

call msvcrt.rand
cdq
idiv dword ptr [esi+stack_alloc-8]

mov edx, dword ptr [esi+edx*4]

push ebp
push edx
call func_get_player_index_in_party

mov edx,eax // index of player in party

mov eax, dword ptr [esi+stack_alloc-4]
push eax
call dword ptr [005540D4] // ntdll.RtlLeaveCriticalSection

exit:
add esp,stack_alloc
pop ebx
jmp returnhere

originalcode:
call 0051BD66
cdq
idiv dword ptr [ebp+10]
jmp returnhere

// push player
// push mob
// call func_is_player_within_range
func_is_player_within_range:
push ecx
push edx
push ebx
sub esp,4

xor eax,eax // clearing the return value (false)

mov ecx, dword ptr [esp+14] // mob
mov edx, dword ptr [esp+18] // player

// comparing zone pointers
mov ebx, dword ptr [ecx+8C]
cmp ebx, dword ptr [edx+E0]
jne func_is_player_within_range_exit

 // load mob.X
fld dword ptr [ecx+7C]
// subtract player.X from it
fsub dword ptr [edx+D0]
// get the absolute value
fabs
 // square it
fmul st(0),st(0)
// store result in the stack and pop floating point register
fstp dword ptr [esp]

// load mob.Z
fld dword ptr [ecx+84]
// subtract player.Z from it
fsub dword ptr [edx+D8]
// get the absolute value
fabs
// square it
fmul st(0),st(0)
// add the value previously stored in stack to it
fadd dword ptr [esp]

// square root
fsqrt
// store result in the stack and pop floating point register
fstp dword ptr [esp]

cmp dword ptr [esp],(float)100.000 // max range
ja func_is_player_within_range_exit

inc eax // set return value to true
func_is_player_within_range_exit:
add esp,4
pop ebx
pop edx
pop ecx
ret 8

// push party
// push player
// call func_get_player_index_in_party
func_get_player_index_in_party:
push ecx
push edx
push ebx

mov ecx, dword ptr [esp+10] // player
mov edx, dword ptr [esp+14] // party

mov eax, dword ptr [edx+10] // party member count

func_get_player_index_in_party_next:
dec eax

cmp dword ptr [edx+eax*8+18],ecx
je func_get_player_index_in_party_exit

test eax,eax
jne func_get_player_index_in_party_next

func_get_player_index_in_party_exit:
pop ebx
pop edx
pop ecx
ret 8

//player_random_drop_order:
//dd CCCCCCCC

004BB266:
jmp newmem
nop
nop
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)
//dealloc(player_random_drop_order)

004BB266:
call 0051BD66
cdq
idiv dword ptr [ebp+10]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>235</ID>
          <Description>"fix oracle"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
cmp edi,5
JE 0049B438

originalcode:
jmp dword ptr [edi*4+0049B980]

exit:
jmp returnhere

"ps_game.exe"+9B3DA:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+9B3DA:
jmp dword ptr [edi*4+0049B980]
//Alt: db FF 24 BD 80 B9 49 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"fix oracle stat reset"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
movzx eax,byte ptr [edi+00000134]


originalcode:
jmp dword ptr [eax*4+0048FB84]

exit:
jmp returnhere

"ps_game.exe"+8F77C:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8F77C:
jmp dword ptr [eax*4+0048FB84]
//Alt: db FF 24 85 84 FB 48 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>428</ID>
          <Description>"Stack Fortune Bag Drops"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,1024)
label(returnhere)
label(originalcode)
label(exit)

// esp+4 = bag
// esp+8 = player
// esp+14 = slot
newmem:
cmp dword ptr [esp+15C],00473BD4 // return point for fortune bag opening
jne originalcode
cmp eax,1
jne originalcode
push eax
push ecx
push edx
push ebx
push esi
push edi

// esp+1C = bag
// esp+20 = player
// esp+2C = slot

mov ebx, dword ptr [esp+1C]
imul ebx,ebx,#24
add ebx, dword ptr [esp+2C]
imul ebx,ebx,#4
add ebx,1C0
mov edi, dword ptr [esp+20]
add ebx,edi
mov esi, dword ptr [ebx] // get item pointer

push esi // item pointer
push edi // player pointer
call func_get_bag_slot_next_identical_item

test eax,eax
je exit

mov edx, dword ptr [esp+2C]
mov ebx, dword ptr [esp+1C]

movzx ecx,ah
push ecx
movzx ecx,al
push ecx

push edx
push ebx

mov ecx,edi
call 004685A0

exit:
pop edi
pop esi
pop ebx
pop edx
pop ecx
pop eax

originalcode:
add esp,15C
jmp returnhere

// push itemPointer
// push playerPointer
// call func_get_bag_slot_next_identical_item
// success: al = bag, ah = slot
// failure: eax = 0
func_get_bag_slot_next_identical_item:
push ecx
push edx
push ebx
push esi
push edi

mov esi, dword ptr [esp+1C] // item pointer
mov edi, dword ptr [esp+18] // player pointer


cmp esi,400000
jl nort
cmp [esi+30],400000
jl nort
cmp [edi],(int)5708456
jne nort
mov eax,[esi+30]
cmp [eax],(int)1001
jl nort
cmp [eax],(int)150255
jg nort



mov al,#1
mov ah,#0
add edi,220

func_get_bag_slot_next_identical_item_next:
mov ecx, dword ptr [edi]

// check if item exists
test ecx,ecx
je func_get_bag_slot_next_identical_item_next_check_slot

// check if same item
cmp ecx,esi
je func_get_bag_slot_next_identical_item_next_check_slot

// check if same item def
mov edx, dword ptr [ecx+30]
cmp edx, dword ptr [esi+30]
jne func_get_bag_slot_next_identical_item_next_check_slot

// check if max count isn't reached
movzx ebx, byte ptr [edx+4B]
cmp bl, byte ptr [ecx+42]
ja func_get_bag_slot_next_identical_item_exit

func_get_bag_slot_next_identical_item_next_check_slot:
add edi,4
inc ah
cmp ah,#24
jb func_get_bag_slot_next_identical_item_next

func_get_bag_slot_next_identical_item_next_check_bag:
xor ah,ah
inc al
cmp al,#5
jbe func_get_bag_slot_next_identical_item_next

nort:
xor eax,eax

func_get_bag_slot_next_identical_item_exit:
pop edi
pop esi
pop ebx
pop edx
pop ecx
ret 8

0046C27E:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)

0046C27E:
add esp,15C
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>756</ID>
      <Description>"Prevent SQL Injection"</Description>
      <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>757</ID>
          <Description>"fix sql injection gm commands"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

alloc(check_characters,512)
//label(check_characters)
label(escape)
registersymbol(check_characters)

newmem:
call check_characters
mov [edx+eax],cl
inc eax
test cl,cl

exit:
jmp returnhere

check_characters:
cmp cl,27 // '
je escape
ret

escape:
mov cl,20 // space
ret

"ps_game.exe"+80A62:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
unregistersymbol(check_characters)
dealloc(check_characters)
"ps_game.exe"+80A62:
mov [edx+eax],cl
inc eax
test cl,cl
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>632</ID>
          <Description>""NoticeWarning" (Credit: Cups)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Disables the call to the database for /warning (fixes SQL injection via warning)
[ENABLE]
ps_game.exe+836C6:
jmp ps_game.exe+841B8

[DISABLE]
ps_game.exe+836C6:
mov ebx,[esp+18]
push edi
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>""NoticeAdmin""</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,32)

newmem:
mov ebx,00571E2F
jmp 004833C8

00482E95:
jmp newmem
nop

[DISABLE]
dealloc(newmem)
00482E95:
push ebx
mov ebx,00571E2F
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>758</ID>
          <Description>""NoticeNormal""</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,32)

newmem:
mov ebx,00571E2F
jmp 004833C8

00482F96:
jmp newmem
nop

[DISABLE]
dealloc(newmem)
00482F96:
push ebx
mov ebx,00571E2F
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>10</ID>
          <Description>""NoticeTo""</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,32)

newmem:
mov ebx,[esp+20]
jmp 004833C8

004830AD:
jmp newmem

[DISABLE]
dealloc(newmem)
004830AD:
push ebx
mov ebx,[esp+20]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>759</ID>
          <Description>""NoticeMap""</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,32)

newmem:
mov ebx,00571E2F
jmp 004833C8

004831A2:
jmp newmem
nop

[DISABLE]
dealloc(newmem)
004831A2:
push edi
mov ebx,00571E2F
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>760</ID>
          <Description>""NoticeCountry""</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,32)

newmem:
mov ebx,00571E2F
jmp 004833C8

004832AB:
jmp newmem
nop

[DISABLE]
dealloc(newmem)
004832AB:
push edi
mov ebx,00571E2F
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>13</ID>
          <Description>""NoticeAll""</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,32)

newmem:
mov ebx,00571E2F
jmp 004833C8

004833AA:
jmp newmem
nop

[DISABLE]
dealloc(newmem)
004833AA:
push edi
mov ebx,00571E2F
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>22</ID>
      <Description>"Autre Script"</Description>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Disable viewing of buffs"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
/////////////////////////////script by -AMI-/////////////////////////////
alloc(newmem,2048)

newmem:

"ps_game.exe"+91752:
jmp 00491792
nop
nop
nop
nop
nop
"ps_game.exe"+56C95:
nop
"ps_game.exe"+56CA1:
nop
"ps_game.exe"+56CA6:
nop
nop
nop
nop
nop


[DISABLE]
dealloc(newmem)
"ps_game.exe"+91752:
push ebx
push esi
call ps_game.exe+56CF0

"ps_game.exe"+56C95:
push ecx
"ps_game.exe"+56CA1:
push edx
"ps_game.exe"+56CA6:
call 004ED0E0
//Alt: db 53 56 E8 97 55 FC FF
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>761</ID>
      <Description>"Make sure to run after the restart"</Description>
      <Options moRecursiveSetValue="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>601</ID>
          <Description>"Raid Kill Sharing"</Description>
          <LastState/>
          <Color>0000FF</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(M1)
label(M2)
label(M3)
label(M4)
label(M5)
label(M6)
label(M7)
label(M8)
label(M9)

newmem:
call CustomFuncDeath
pushad
mov edi,esi
mov edx,[esi+000000E0]
xor ecx,ecx
mov cl,[esi+0000012D]
cmp ecx,01
je setzero
mov ecx,01
jmp gocall
setzero:
mov ecx,00
gocall:
push ecx
push edx
call ShareKill
popad
originalcode:

exit:
jmp 00465ACF

ShareKill:
sub esp,10 { 16 }
push ebx
push ebp
mov ebp,[esp+1C]
push esi
call dword ptr [ps_game.exe+1540D0] { -&gt;kernel32.GetTickCount }
lea esi,[ebp+0000018C]
mov ebx,eax
push esi
add ebx,000003E8 { 1000 }
mov [esp+1C],esi
call dword ptr [ps_game.exe+1540DC] { -&gt;ntdll.RtlEnterCriticalSection }
mov ecx,[ebp+00000184]
mov eax,[ecx+04]
mov [ebp+00000188],eax
cmp eax,ecx
je M1
test eax,eax
je M1
M8:
mov eax,[eax+08]
test eax,eax
je M2
lea esi,[eax-000000D0]
jmp M3
M2:
xor esi,esi
M3:
// cmp byte ptr [esi+00005808],0A { if ( *(_BYTE *)(v8 + 22376) &gt; 0xAu )}
//ja M4
//mov eax,[ebp+00000188] {  v6 = (CObjectLink *)CZone-&gt;m_listUser.cursor-&gt;next;}
//mov eax,[eax+04]
//jmp M6

M4:
cmp edi,esi
jne M5
mov ecx,[ebp+00000188]
mov eax,[ecx+04]
jmp M6
M5:
mov dl,[esp+24]
cmp [esi+0000012D],dl { if ( *(_BYTE *)(v8 + 301) == byCountry )}
jne M9
// NEW CODE HERE //
fld dword ptr [edi+000000D0]
push ecx
fsub dword ptr [esi+000000D0]
fstp dword ptr [esp+14]
fld dword ptr [edi+000000D8]
fsub dword ptr [esi+000000D8]
fstp dword ptr [esp+24]
fld dword ptr [esp+24]
fld dword ptr [esp+14]
fmul st(0),st(0)
fld st(1)
fmulp st(2),st(0)
faddp
fstp dword ptr [esp+24]
fld dword ptr [esp+24]
fstp dword ptr [esp]
call ps_game.exe+1B8A0
fcomp dword ptr [RangeFloat] { [100.00] }
add esp,04 { 00000004 }
fnstsw ax
sahf
//test ah,41 { 65 }
jae M9 { if ( v11 &gt; 10.0 )}
//Need check party
cmp [esi+000017F4],00
je M9
mov ecx,esi
push edi
call ps_game.exe+67CE0
//               //
M9:
mov edx,[ebp+00000188]
mov eax,[edx+04]
M6:
cmp eax,[ebp+00000184] { while ( v6 != CZone-&gt;m_listUser.head &amp;&amp; v6 );}
mov [ebp+00000188],eax
je M7
test eax,eax
jne M8
M7:
mov esi,[esp+18] { v4 = &amp;this-&gt;m_listUser.m_csList.m_cs;}
M1:
push esi
call dword ptr [ps_game.exe+1540D4] { -&gt;ntdll.RtlLeaveCriticalSection }
pop esi
pop ebp
pop ebx
add esp,10 { 16 }
ret 0008 { 00000008 }

RangeFloat:
dd 42C80000

CustomFuncDeath:
sub esp,14 { 20 }
mov eax,[esi+0000014C]
cmp eax,[ps_game.exe+1823AC] { [000F4240] }
jae FuncDeathM
mov edx,[esi+0000582C]
inc eax
mov [esi+0000014C],eax
mov ecx,0000060C { 1548 }
mov [esp+0F],eax
push 0B { 11 }
lea eax,[esp+0C]
mov [esp+0C],cx
mov ecx,[ps_game.exe+18796C] { [010A2628] }
push eax
mov [esp+12],edx
mov byte ptr [esp+16],01 { 1 }
call ps_game.exe+ED2D0
mov edx,[esi+0000014C]
mov ecx,0000020E { 526 }
push 07 { 7 }
lea eax,[esp+04]
mov [esp+04],cx
push eax
mov ecx,esi
mov byte ptr [esp+0A],01 { 1 }
mov [esp+0B],edx
call ps_game.exe+ED0E0
FuncDeathM:
add esp,14 { 20 }
ret

"ps_game.exe"+65AAD:
jmp newmem
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+65AAD:
call ps_game.exe+67EE0
//Alt: db E8 2E 24 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>614</ID>
          <Description>"helmet and cape drop fix"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Credits to Eric-Dutra16 and andr3y_you96
[ENABLE]
004BAFC8:
db 90 90 90 90 90 90 90 90 90

004BAFD1:
db 90 90 90 90 90 90 90 90 90

00473BBD:
db 90 90 90 90 90 90 90 90 90 90 90 90 90

[DISABLE]
004BAFC8:
cmp eax,10
je 004BB47A

004BAFD1:
cmp eax,18
je 004BB47A

00473BBD:
cmp dword ptr [eax+000000A0],18
je 0047468A
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>620</ID>
          <Description>"GM Enchantment +1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Credits to Eric-Dutra16
[ENABLE]
alloc(newmem2,2048)
alloc(typeid,4)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:
push eax
mov eax,[edx+41]
mov [typeid],eax
pop eax

originalcode2:
cmp byte ptr [edx+40],5F
jne ps_game.exe+6CAB7

exit2:
jmp returnhere2

"ps_game.exe"+6C9FE:
jmp newmem2
nop
nop
nop
nop
nop
returnhere2:

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [typeid],(int)15// typeid perfect lapisia
je 0046CD83
cmp byte ptr [typeid],(int)16 // typeid perfect lapisia
je 0046CD83

originalcode:
cmp esi,eax
jae ps_game.exe+6D11C

exit:
jmp returnhere

"ps_game.exe"+6CD7B:
jmp newmem
nop
nop
nop
returnhere:

[DISABLE]
dealloc(typeid)
dealloc(newmem2)
"ps_game.exe"+6C9FE:
cmp byte ptr [edx+40],5F
jne ps_game.exe+6CAB7

dealloc(newmem)
"ps_game.exe"+6CD7B:
cmp esi,eax
jae ps_game.exe+6D11C
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>38</ID>
          <Description>"Between Parties"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>FF0000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>2</ID>
              <Description>"Cross-Party Barter 5.4"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
0047D9B6:
db 90 90 90 90 90 90



[DISABLE]
0047D9B6:
db 0F 85 1E 07 00 00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>762</ID>
              <Description>"GM Seeing Two Sides Chat 5.4"</Description>
              <LastState/>
              <Color>FF0013</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
cmp byte ptr [ecx+5808],0B
JL ps_game.exe+27944

originalcode:
cmp dl,[ecx+0000012D]

exit:
jmp returnhere

"ps_game.exe"+27938:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+27938:
cmp dl,[ecx+0000012D]
//Alt: db 3A 91 2D 01 00 00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>414</ID>
              <Description>"GM Can Attack 2 Side 5.4"</Description>
              <LastState/>
              <Color>FF0013</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
cmp byte ptr [eax+5808],#10
jb 00457E35
cmp dl,[eax+0000012D]

exit:
jmp returnhere

"ps_game.exe"+57E2D:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"ps_game.exe"+57E2D:
cmp dl,[eax+0000012D]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>9</ID>
              <Description>"GM Manual Raide Joinleyebilir"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{
Author: Cups, 6th March 2018

Allows users with an admin status to join a manual raid
}
[ENABLE]
alloc(raid_autojoin_override, 128)
alloc(raid_autojoin_override2, 128)
define(allow_join, ps_game.exe+50507)
define(allow_join2, ps_game.exe+7580D)
label(return)
label(return2)

// Override the check for joining a manual raid
raid_autojoin_override2:

// If the user has an admin status
cmp [ebp+5808],#11
jl allow_join2

// If the user is not an admin, check if the raid is manual before allowing entry
cmp byte ptr [eax+00000115],00
jmp return2

// Override the check for joining a manual raid
raid_autojoin_override:

// If the user has an admin status
cmp [ebx+5808],#11
jl allow_join

// If the user is not an admin, check if the raid is manual before allowing entry
cmp byte ptr [eax+00000115],00
jmp return

// Checks if the raid is manual
ps_game.exe+757DE:
jmp raid_autojoin_override2
db 90 90
return2:

// Checks if the raid is manual
ps_game.exe+504FE:
jmp raid_autojoin_override
db 90 90
return:

[DISABLE]
dealloc(raid_autojoin_override)

ps_game.exe+504FE:
cmp byte ptr [eax+00000115],00

ps_game.exe+757DE:
cmp byte ptr [eax+00000115],00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>763</ID>
              <Description>"GM Can Join The Raid Of Both Sides"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>{
Author: Cups, 6th March 2018

Allows users with an admin status to join a raid regardless of it's faction
}
[ENABLE]
alloc(raid_faction_override, 128)
define(allow_join, ps_game.exe+757D8)
label(return)

// Override the check for faction when joining a raid
raid_faction_override:

// If the user has an admin status
cmp [ebp+5808],#11
jl allow_join

// If the user is not an admin, check if the raid is of the same faction
cmp dl,[edi+0000012D]
jmp return

// Checks if the user is in the same faction
ps_game.exe+757C0:
jmp raid_faction_override
db 90
return:

[DISABLE]
dealloc(raid_autojoin_override)

ps_game.exe+757C0:
cmp dl,[edi+0000012D]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>19</ID>
              <Description>"Inter-Party Review 5.4"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
00477d49:
db 90 90 90 90 90 90



[DISABLE]
00477d49:
db 0F 85 F9 02 00 00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>764</ID>
              <Description>"Whisper Between Parties 5.4"</Description>
              <LastState/>
              <Color>FF0000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
0047f629:
db 90 90 90 90 90 90

0047ff69:
db 90 90 90 90 90 90


[DISABLE]
0047f629:
db 0F 85 DF 00 00 00

0047ff69:
db 0F 85 DF 00 00 00
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>765</ID>
          <Description>"Fixed jump cut"</Description>
          <Options moHideChildren="1" moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <Color>008000</Color>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>8</ID>
              <Description>"Block Cape Enchant"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>//block cape enchantment by Bowie 03/2020
[ENABLE]
alloc(newmem,128)
label(return)
label(exit)

newmem:
cmp byte ptr [edi+40],18 //aol cape typeid 24
je 0046D5BE
cmp byte ptr [edi+40],27 //uof cape typeid 39
je 0046D5BE
cmp byte ptr [edi+42],01
jne 0046D5BE

exit:
jmp return

0046CC79:
jmp newmem
nop
nop
nop
nop
nop
return:

[DISABLE]
dealloc(newmem)
0046CC79:
cmp byte ptr [edi+42],01
jne 0046D5BE
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>135</ID>
              <Description>"Enchant Crash"</Description>
              <LastState/>
              <Color>008000</Color>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,128)
label(returnhere)
label(originalcode)

newmem:
cmp byte ptr [ebp+4],5
jg 00460524
cmp byte ptr [ebp+5],18
jnb 00460524

originalcode:
movzx edx,dl
lea ecx,[ecx+ecx*2]
jmp returnhere

0045FB7A:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)

0045FB7A:
movzx edx,dl
lea ecx,[ecx+ecx*2]
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>116</ID>
              <Description>"Delay Runes After Skills"</Description>
              <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
              <LastState Value="" RealAddress="00000000"/>
              <Color>008000</Color>
              <GroupHeader>1</GroupHeader>
              <CheatEntries>
                <CheatEntry>
                  <ID>117</ID>
                  <Description>"Arena Recall Rune"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>//delays using arena recall runes after using skills
[ENABLE]
alloc(newmem,128)
label(return)
label(exit)

newmem:
cmp dword ptr [ebp+00001270],02
je 0047468A
cmp dword ptr [eax+000001A4],00

exit:
jmp return

00473FFD:
jmp newmem
nop
nop
return:

[DISABLE]
dealloc(newmem)
00473FFD:
cmp dword ptr [eax+000001A4],00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>118</ID>
                  <Description>"Bootleggery Rune"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>//delays using bootleggery runes after using skills
[ENABLE]
alloc(newmem,128)
label(return)
label(exit)

newmem:
cmp dword ptr [ebp+00001270],02
je 0047468A
cmp dword ptr [eax+000001A4],00

exit:
jmp return

00473ED7:
jmp newmem
nop
nop
return:

[DISABLE]
dealloc(newmem)
00473ED7:
cmp dword ptr [eax+000001A4],00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>120</ID>
                  <Description>"Capital Recall Rune"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>//delays using capital recall runes after using skills
[ENABLE]
alloc(newmem,128)
label(return)
label(exit)

newmem:
cmp dword ptr [ebp+00001270],02
je 0047468A
cmp dword ptr [eax+000001A4],00

exit:
jmp return

00473DB0:
jmp newmem
nop
nop
return:

[DISABLE]
dealloc(newmem)
00473DB0:
cmp dword ptr [eax+000001A4],00
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>122</ID>
                  <Description>"Guild House Rune"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>//delays using guild house rune after using skills
[ENABLE]
alloc(newmem,128)
label(return)
label(exit)

newmem:
cmp dword ptr [ebp+00001270],02
je 004742B6
cmp dword ptr [eax+000001A4],06

exit:
jmp return

00474196:
jmp newmem
nop
nop
return:

[DISABLE]
dealloc(newmem)
00474196:
cmp dword ptr [eax+000001A4],06
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>606</ID>
                  <Description>"Delay Mount after Using Skills"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>//delays using mounts after using skills
[ENABLE]
alloc(newmem,1024)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp dword ptr [ebp+00001270],02
je ps_game.exe+77999

originalcode:
cmp dword ptr [ebp+0000147C],03

exit:
jmp returnhere

"ps_game.exe"+77058:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
"ps_game.exe"+77058:
cmp dword ptr [ebp+0000147C],03
</AssemblerScript>
                </CheatEntry>
                <CheatEntry>
                  <ID>605</ID>
                  <Description>"Delay Party Summon Rune after Using Skills"</Description>
                  <LastState/>
                  <Color>008000</Color>
                  <VariableType>Auto Assembler Script</VariableType>
                  <AssemblerScript>//delays using party summon rune after using skills
[ENABLE]
alloc(newmem,1024)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp dword ptr [ebp+00001270],02
je ps_game.exe+7468A

originalcode:
cmp dword ptr [ebp+000058B8],00

exit:
jmp returnhere

"ps_game.exe"+73400:
jmp newmem
nop 2
returnhere:

[DISABLE]
dealloc(newmem)
"ps_game.exe"+73400:
cmp dword ptr [ebp+000058B8],00
</AssemblerScript>
                </CheatEntry>
              </CheatEntries>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>429</ID>
          <Description>"Stack Drops Bag"</Description>
          <Options moHideChildren="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>768</ID>
              <Description>"Stack Fortune Bag Drops"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,1024)
label(returnhere)
label(originalcode)
label(exit)

// esp+4 = bag
// esp+8 = player
// esp+14 = slot
newmem:
cmp dword ptr [esp+15C],00473BD4 // return point for fortune bag opening
jne originalcode
cmp eax,1
jne originalcode
push eax
push ecx
push edx
push ebx
push esi
push edi

// esp+1C = bag
// esp+20 = player
// esp+2C = slot

mov ebx, dword ptr [esp+1C]
imul ebx,ebx,#24
add ebx, dword ptr [esp+2C]
imul ebx,ebx,#4
add ebx,1C0
mov edi, dword ptr [esp+20]
add ebx,edi
mov esi, dword ptr [ebx] // get item pointer

push esi // item pointer
push edi // player pointer
call func_get_bag_slot_next_identical_item

test eax,eax
je exit

mov edx, dword ptr [esp+2C]
mov ebx, dword ptr [esp+1C]

movzx ecx,ah
push ecx
movzx ecx,al
push ecx

push edx
push ebx

mov ecx,edi
call 004685A0

exit:
pop edi
pop esi
pop ebx
pop edx
pop ecx
pop eax

originalcode:
add esp,15C
jmp returnhere

// push itemPointer
// push playerPointer
// call func_get_bag_slot_next_identical_item
// success: al = bag, ah = slot
// failure: eax = 0
func_get_bag_slot_next_identical_item:
push ecx
push edx
push ebx
push esi
push edi

mov esi, dword ptr [esp+1C] // item pointer
mov edi, dword ptr [esp+18] // player pointer


cmp esi,400000
jl nort
cmp [esi+30],400000
jl nort
cmp [edi],(int)5708456
jne nort
mov eax,[esi+30]
cmp [eax],(int)1001
jl nort
cmp [eax],(int)150255
jg nort



mov al,#1
mov ah,#0
add edi,220

func_get_bag_slot_next_identical_item_next:
mov ecx, dword ptr [edi]

// check if item exists
test ecx,ecx
je func_get_bag_slot_next_identical_item_next_check_slot

// check if same item
cmp ecx,esi
je func_get_bag_slot_next_identical_item_next_check_slot

// check if same item def
mov edx, dword ptr [ecx+30]
cmp edx, dword ptr [esi+30]
jne func_get_bag_slot_next_identical_item_next_check_slot

// check if max count isn't reached
movzx ebx, byte ptr [edx+4B]
cmp bl, byte ptr [ecx+42]
ja func_get_bag_slot_next_identical_item_exit

func_get_bag_slot_next_identical_item_next_check_slot:
add edi,4
inc ah
cmp ah,#24
jb func_get_bag_slot_next_identical_item_next

func_get_bag_slot_next_identical_item_next_check_bag:
xor ah,ah
inc al
cmp al,#5
jbe func_get_bag_slot_next_identical_item_next

nort:
xor eax,eax

func_get_bag_slot_next_identical_item_exit:
pop edi
pop esi
pop ebx
pop edx
pop ecx
ret 8

0046C27E:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)

0046C27E:
add esp,15C
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
        <CheatEntry>
          <ID>775</ID>
          <Description>"When the map changes, the appearance is fixed"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>{
 Author: Cups, 8th May 2019

 Sends a player their appearance data when the enter the zone, to "fix"
 the bug that causes player appearances to become mismatched when they change zones
 after another player has used an Appearance Change scroll.
}
[ENABLE]
alloc(SendAppearance, 128)
label(Return)

// Create an appearance packet for our user
SendAppearance:
pushad
pushfd

// Remind the user of their own appearance
mov ecx,[edi+128]
mov edx,[edi+E0]

push edi
push edx
call ps_game.exe+268B0 // CZone::SendUserShape

popfd
popad

// Return control flow to the zone enter procedure
push ebx
push esi
mov esi,eax
xor eax,eax
jmp Return

ps_game.exe+55E70: // CUser::EnterZone
jmp SendAppearance
nop
Return:

[DISABLE]
dealloc(SendAppearance)

ps_game.exe+55E70:
push ebx
push esi
mov esi,eax
xor eax,eax
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>133</ID>
          <Description>"Guard NPC one shot kill"</Description>
          <LastState/>
          <Color>0762F8</Color>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
nop
nop
mov eax,edi
mov [edi+00001234],00000000

exit:
jmp returnhere

"ps_game.exe"+581A5:
jmp newmem
nop
nop
nop
nop
nop
nop
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+581A5:
nop
nop
mov eax,edi
mov [edi+00001234],00000000
//Alt: db 90 90 8B C7 C7 87 34 12 00 00 00 00 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>34</ID>
          <Description>"leader resurrection"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
0046656C: //for ulti
db 90 90

00478EA2: //lead time
db 05 88 13 00 00

[DISABLE]

0046656C:
db 90 90

00478EA2:
db 05 88 13 00 00
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry Color="20000000">
      <Description>Change of is ps_game.exe + 665CF</Description>
      <AddressString>ps_game.exe+6656C</AddressString>
      <Before>
        <Byte>2F</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>61</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>28</Byte>
        <Byte>83</Byte>
        <Byte>B8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of add eax,00001388</Description>
      <AddressString>ps_game.exe+78EA2</AddressString>
      <Before>
        <Byte>15</Byte>
        <Byte>D0</Byte>
        <Byte>40</Byte>
        <Byte>55</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>05</Byte>
        <Byte>88</Byte>
        <Byte>13</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>70</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of is ps_game.exe + 665CF</Description>
      <AddressString>ps_game.exe+6656C</AddressString>
      <Before>
        <Byte>2F</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>61</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>28</Byte>
        <Byte>83</Byte>
        <Byte>B8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of add eax,00001388</Description>
      <AddressString>ps_game.exe+78EA2</AddressString>
      <Before>
        <Byte>15</Byte>
        <Byte>D0</Byte>
        <Byte>40</Byte>
        <Byte>55</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>05</Byte>
        <Byte>88</Byte>
        <Byte>13</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>70</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+665CF</Description>
      <AddressString>ps_game.exe+6656C</AddressString>
      <Before>
        <Byte>2F</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>61</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>28</Byte>
        <Byte>83</Byte>
        <Byte>B8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of add eax,00001388</Description>
      <AddressString>ps_game.exe+78EA2</AddressString>
      <Before>
        <Byte>15</Byte>
        <Byte>D0</Byte>
        <Byte>40</Byte>
        <Byte>55</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>05</Byte>
        <Byte>88</Byte>
        <Byte>13</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>70</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+665CF</Description>
      <AddressString>ps_game.exe+6656C</AddressString>
      <Before>
        <Byte>2F</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>61</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>28</Byte>
        <Byte>83</Byte>
        <Byte>B8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of add eax,00001388</Description>
      <AddressString>ps_game.exe+78EA2</AddressString>
      <Before>
        <Byte>15</Byte>
        <Byte>D0</Byte>
        <Byte>40</Byte>
        <Byte>55</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>05</Byte>
        <Byte>88</Byte>
        <Byte>13</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>70</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jae ps_game.exe+6D11C</Description>
      <AddressString>ps_game.exe+6CD7D</AddressString>
      <Before>
        <Byte>6C</Byte>
        <Byte>24</Byte>
        <Byte>44</Byte>
        <Byte>3B</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>83</Byte>
        <Byte>99</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>14</Byte>
        <Byte>55</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jle ps_game.exe+6E73D</Description>
      <AddressString>ps_game.exe+6E736</AddressString>
      <Before>
        <Byte>58</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>FE</Byte>
        <Byte>32</Byte>
      </Before>
      <Actual>
        <Byte>7E</Byte>
        <Byte>05</Byte>
      </Actual>
      <After>
        <Byte>BE</Byte>
        <Byte>32</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp esi,32</Description>
      <AddressString>ps_game.exe+6E733</AddressString>
      <Before>
        <Byte>35</Byte>
        <Byte>B8</Byte>
        <Byte>79</Byte>
        <Byte>58</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>FE</Byte>
        <Byte>32</Byte>
      </Actual>
      <After>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>BE</Byte>
        <Byte>64</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jae ps_game.exe+6D11C</Description>
      <AddressString>ps_game.exe+6CD7D</AddressString>
      <Before>
        <Byte>6C</Byte>
        <Byte>24</Byte>
        <Byte>44</Byte>
        <Byte>3B</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>83</Byte>
        <Byte>99</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>14</Byte>
        <Byte>55</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne ps_game.exe+7E0DA</Description>
      <AddressString>ps_game.exe+7D9B6</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>2D</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>1E</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>B8</Byte>
        <Byte>8C</Byte>
        <Byte>55</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+72E8C</Description>
      <AddressString>ps_game.exe+72E2A</AddressString>
      <Before>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>1A</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>60</Byte>
      </Actual>
      <After>
        <Byte>8A</Byte>
        <Byte>43</Byte>
        <Byte>40</Byte>
        <Byte>3C</Byte>
        <Byte>1B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call ps_game.exe+F3AB0</Description>
      <AddressString>ps_game.exe+F3DD0</AddressString>
      <Before>
        <Byte>B9</Byte>
        <Byte>24</Byte>
        <Byte>37</Byte>
        <Byte>58</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>DB</Byte>
        <Byte>FC</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>1B</Byte>
        <Byte>83</Byte>
        <Byte>FF</Byte>
        <Byte>7E</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jmp ps_game.exe+91496</Description>
      <AddressString>ps_game.exe+91444</AddressString>
      <Before>
        <Byte>09</Byte>
        <Byte>8D</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>EB</Byte>
        <Byte>50</Byte>
      </Actual>
      <After>
        <Byte>B8</Byte>
        <Byte>1D</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne ps_game.exe+9DC71</Description>
      <AddressString>ps_game.exe+9DB47</AddressString>
      <Before>
        <Byte>9F</Byte>
        <Byte>7C</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>24</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>39</Byte>
        <Byte>B7</Byte>
        <Byte>80</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of ja ps_game.exe+9DC71</Description>
      <AddressString>ps_game.exe+9DB53</AddressString>
      <Before>
        <Byte>B7</Byte>
        <Byte>80</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>87</Byte>
        <Byte>18</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>87</Byte>
        <Byte>F4</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Code :lock xadd [ecx],eax</Description>
      <AddressString>kernel32.dll+4BB68</AddressString>
      <Before>
        <Byte>04</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>F0</Byte>
        <Byte>0F</Byte>
        <Byte>C1</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>08</Byte>
        <Byte>00</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+665CF</Description>
      <AddressString>ps_game.exe+6656C</AddressString>
      <Before>
        <Byte>2F</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>61</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>28</Byte>
        <Byte>83</Byte>
        <Byte>B8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of add eax,00001388</Description>
      <AddressString>ps_game.exe+78EA2</AddressString>
      <Before>
        <Byte>15</Byte>
        <Byte>D0</Byte>
        <Byte>40</Byte>
        <Byte>55</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>05</Byte>
        <Byte>88</Byte>
        <Byte>13</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>70</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+665CF</Description>
      <AddressString>ps_game.exe+6656C</AddressString>
      <Before>
        <Byte>2F</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>61</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>28</Byte>
        <Byte>83</Byte>
        <Byte>B8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of add eax,00001388</Description>
      <AddressString>ps_game.exe+78EA2</AddressString>
      <Before>
        <Byte>15</Byte>
        <Byte>D0</Byte>
        <Byte>40</Byte>
        <Byte>55</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>05</Byte>
        <Byte>88</Byte>
        <Byte>13</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>70</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+665CF</Description>
      <AddressString>ps_game.exe+6656C</AddressString>
      <Before>
        <Byte>2F</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>61</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>28</Byte>
        <Byte>83</Byte>
        <Byte>B8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of add eax,00001388</Description>
      <AddressString>ps_game.exe+78EA2</AddressString>
      <Before>
        <Byte>15</Byte>
        <Byte>D0</Byte>
        <Byte>40</Byte>
        <Byte>55</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>05</Byte>
        <Byte>88</Byte>
        <Byte>13</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>70</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+665CF</Description>
      <AddressString>ps_game.exe+6656C</AddressString>
      <Before>
        <Byte>2F</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>03</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>61</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>40</Byte>
        <Byte>28</Byte>
        <Byte>83</Byte>
        <Byte>B8</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of add eax,00001388</Description>
      <AddressString>ps_game.exe+78EA2</AddressString>
      <Before>
        <Byte>15</Byte>
        <Byte>D0</Byte>
        <Byte>40</Byte>
        <Byte>55</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>05</Byte>
        <Byte>88</Byte>
        <Byte>13</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>89</Byte>
        <Byte>87</Byte>
        <Byte>70</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jae ps_game.exe+6D11C</Description>
      <AddressString>ps_game.exe+6CD7D</AddressString>
      <Before>
        <Byte>6C</Byte>
        <Byte>24</Byte>
        <Byte>44</Byte>
        <Byte>3B</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>83</Byte>
        <Byte>99</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>14</Byte>
        <Byte>55</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jle ps_game.exe+6E73D</Description>
      <AddressString>ps_game.exe+6E736</AddressString>
      <Before>
        <Byte>58</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>FE</Byte>
        <Byte>32</Byte>
      </Before>
      <Actual>
        <Byte>7E</Byte>
        <Byte>05</Byte>
      </Actual>
      <After>
        <Byte>BE</Byte>
        <Byte>32</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp esi,32</Description>
      <AddressString>ps_game.exe+6E733</AddressString>
      <Before>
        <Byte>35</Byte>
        <Byte>B8</Byte>
        <Byte>79</Byte>
        <Byte>58</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>FE</Byte>
        <Byte>32</Byte>
      </Actual>
      <After>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>BE</Byte>
        <Byte>64</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jae ps_game.exe+6D11C</Description>
      <AddressString>ps_game.exe+6CD7D</AddressString>
      <Before>
        <Byte>6C</Byte>
        <Byte>24</Byte>
        <Byte>44</Byte>
        <Byte>3B</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>83</Byte>
        <Byte>99</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>14</Byte>
        <Byte>55</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne ps_game.exe+7E0DA</Description>
      <AddressString>ps_game.exe+7D9B6</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>2D</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>1E</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>B8</Byte>
        <Byte>8C</Byte>
        <Byte>55</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+72E8C</Description>
      <AddressString>ps_game.exe+72E2A</AddressString>
      <Before>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>1A</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>60</Byte>
      </Actual>
      <After>
        <Byte>8A</Byte>
        <Byte>43</Byte>
        <Byte>40</Byte>
        <Byte>3C</Byte>
        <Byte>1B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call ps_game.exe+F3AB0</Description>
      <AddressString>ps_game.exe+F3DD0</AddressString>
      <Before>
        <Byte>B9</Byte>
        <Byte>24</Byte>
        <Byte>37</Byte>
        <Byte>58</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>DB</Byte>
        <Byte>FC</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>1B</Byte>
        <Byte>83</Byte>
        <Byte>FF</Byte>
        <Byte>7E</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jmp ps_game.exe+91496</Description>
      <AddressString>ps_game.exe+91444</AddressString>
      <Before>
        <Byte>09</Byte>
        <Byte>8D</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>EB</Byte>
        <Byte>50</Byte>
      </Actual>
      <After>
        <Byte>B8</Byte>
        <Byte>1D</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne ps_game.exe+9DC71</Description>
      <AddressString>ps_game.exe+9DB47</AddressString>
      <Before>
        <Byte>9F</Byte>
        <Byte>7C</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>24</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>39</Byte>
        <Byte>B7</Byte>
        <Byte>80</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of ja ps_game.exe+9DC71</Description>
      <AddressString>ps_game.exe+9DB53</AddressString>
      <Before>
        <Byte>B7</Byte>
        <Byte>80</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>87</Byte>
        <Byte>18</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>87</Byte>
        <Byte>F4</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Code :lock xadd [ecx],eax</Description>
      <AddressString>kernel32.dll+4BB68</AddressString>
      <Before>
        <Byte>04</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>F0</Byte>
        <Byte>0F</Byte>
        <Byte>C1</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>08</Byte>
        <Byte>00</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jle ps_game.exe+6E73D</Description>
      <AddressString>ps_game.exe+6E736</AddressString>
      <Before>
        <Byte>58</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>FE</Byte>
        <Byte>32</Byte>
      </Before>
      <Actual>
        <Byte>7E</Byte>
        <Byte>05</Byte>
      </Actual>
      <After>
        <Byte>BE</Byte>
        <Byte>32</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp esi,32</Description>
      <AddressString>ps_game.exe+6E733</AddressString>
      <Before>
        <Byte>35</Byte>
        <Byte>B8</Byte>
        <Byte>79</Byte>
        <Byte>58</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>FE</Byte>
        <Byte>32</Byte>
      </Actual>
      <After>
        <Byte>90</Byte>
        <Byte>90</Byte>
        <Byte>BE</Byte>
        <Byte>64</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jae ps_game.exe+6D11C</Description>
      <AddressString>ps_game.exe+6CD7D</AddressString>
      <Before>
        <Byte>6C</Byte>
        <Byte>24</Byte>
        <Byte>44</Byte>
        <Byte>3B</Byte>
        <Byte>F0</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>83</Byte>
        <Byte>99</Byte>
        <Byte>03</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>B7</Byte>
        <Byte>14</Byte>
        <Byte>55</Byte>
        <Byte>30</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne ps_game.exe+7E0DA</Description>
      <AddressString>ps_game.exe+7D9B6</AddressString>
      <Before>
        <Byte>8B</Byte>
        <Byte>2D</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>1E</Byte>
        <Byte>07</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>83</Byte>
        <Byte>B8</Byte>
        <Byte>8C</Byte>
        <Byte>55</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+72E8C</Description>
      <AddressString>ps_game.exe+72E2A</AddressString>
      <Before>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>1A</Byte>
      </Before>
      <Actual>
        <Byte>74</Byte>
        <Byte>60</Byte>
      </Actual>
      <After>
        <Byte>8A</Byte>
        <Byte>43</Byte>
        <Byte>40</Byte>
        <Byte>3C</Byte>
        <Byte>1B</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of call ps_game.exe+F3AB0</Description>
      <AddressString>ps_game.exe+F3DD0</AddressString>
      <Before>
        <Byte>B9</Byte>
        <Byte>24</Byte>
        <Byte>37</Byte>
        <Byte>58</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>E8</Byte>
        <Byte>DB</Byte>
        <Byte>FC</Byte>
        <Byte>FF</Byte>
        <Byte>FF</Byte>
      </Actual>
      <After>
        <Byte>EB</Byte>
        <Byte>1B</Byte>
        <Byte>83</Byte>
        <Byte>FF</Byte>
        <Byte>7E</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jmp ps_game.exe+91496</Description>
      <AddressString>ps_game.exe+91444</AddressString>
      <Before>
        <Byte>09</Byte>
        <Byte>8D</Byte>
        <Byte>54</Byte>
        <Byte>24</Byte>
        <Byte>0C</Byte>
      </Before>
      <Actual>
        <Byte>EB</Byte>
        <Byte>50</Byte>
      </Actual>
      <After>
        <Byte>B8</Byte>
        <Byte>1D</Byte>
        <Byte>05</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of jne ps_game.exe+9DC71</Description>
      <AddressString>ps_game.exe+9DB47</AddressString>
      <Before>
        <Byte>9F</Byte>
        <Byte>7C</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>85</Byte>
        <Byte>24</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>39</Byte>
        <Byte>B7</Byte>
        <Byte>80</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of ja ps_game.exe+9DC71</Description>
      <AddressString>ps_game.exe+9DB53</AddressString>
      <Before>
        <Byte>B7</Byte>
        <Byte>80</Byte>
        <Byte>14</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>87</Byte>
        <Byte>18</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>8B</Byte>
        <Byte>87</Byte>
        <Byte>F4</Byte>
        <Byte>01</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Code :lock xadd [ecx],eax</Description>
      <AddressString>kernel32.dll+4BB68</AddressString>
      <Before>
        <Byte>04</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>F0</Byte>
        <Byte>0F</Byte>
        <Byte>C1</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>08</Byte>
        <Byte>00</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of je ps_game.exe+BB47A</Description>
      <AddressString>ps_game.exe+BAFD4</AddressString>
      <Before>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>18</Byte>
      </Before>
      <Actual>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A0</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Actual>
      <After>
        <Byte>85</Byte>
        <Byte>C9</Byte>
        <Byte>74</Byte>
        <Byte>49</Byte>
        <Byte>85</Byte>
      </After>
    </CodeEntry>
    <CodeEntry Color="20000000">
      <Description>Change of cmp eax,10</Description>
      <AddressString>ps_game.exe+BAFC8</AddressString>
      <Before>
        <Byte>86</Byte>
        <Byte>A0</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>83</Byte>
        <Byte>F8</Byte>
        <Byte>10</Byte>
      </Actual>
      <After>
        <Byte>0F</Byte>
        <Byte>84</Byte>
        <Byte>A9</Byte>
        <Byte>04</Byte>
        <Byte>00</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
