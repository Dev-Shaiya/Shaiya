<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="26">
  <Forms>
    <UDF1 Class="TCEForm" Encoding="Ascii85">D]H=@2nldAU:MM2b.}cxWeIh0Gi32eO*FuxWMuP5%{mcIVgA6t9Fkwa6vP@ynNpI$=7,z9n3I!V=oyOr.Fg)[TFlAim^X9E:#-P1m%[;6SXz:FoLQC1$=lw3P=DLS#_Ac)!zDjCJ2/l;m6L%100</UDF1>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>391</ID>
      <Description>"Auto Assemble script"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:

mov ecx,[esi+00000168]

exit:
jmp returnhere

"ps_game.exe"+EF47F:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+EF47F:
jnl ps_game.exe+EF442
mov ecx,[esi+00000168]
//Alt: db 7D C1 8B 8E 68 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>208</ID>
      <Description>"remove defeat update"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
nop 
mov [ebx+00000154],eax

exit:
jmp returnhere

"ps_game.exe"+8A05F:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8A05F:
nop 
mov [ebx+00000154],eax
//Alt: db 90 89 83 54 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>213</ID>
      <Description>"bless point version 3 #pt fixed"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ecx+17f4],0
je noparty
pushad
//pushfd
mov edi,ecx
mov eax,[edi+17f4] //get pt id
mov ebx,[eax+10] //player amount in party
add eax,18 //jump to pt players
mov ecx,0

loopo:
mov edi,[eax+ecx*8]
cmp edi,0
je continue
cmp [edi],(int)5708456
jne continue
//call addpoint
pushad
pushad
pushad
pushad
//add esp,50
//pushfd
mov ebx,edi // mov player pointer to ebx
mov edx,[ebx+0000582C]
mov eax,[ebx+154]
add eax,(int)5
mov [ebx+00000154],eax
mov ecx,0000060C { 1548 }
mov [esp+1B],eax
push 0B { 11 }
lea eax,[esp+18]
mov [esp+18],cx
mov ecx,[ps_game.exe+18796C] { [010A2628] }
push eax
mov [esp+1E],edx
mov byte ptr [esp+22],03 { 3 }
call ps_game.exe+ED2D0
//sub esp,50
//popfd
popad
popad
popad
popad
continue:
add ecx,1
cmp ecx,ebx
jnge loopo
//popfd
popad
jmp originalcode



noparty:
pushad
pushad
pushad
mov ebx,ecx // mov player pointer to ebx
mov edx,[ebx+0000582C]
mov eax,[ebx+154]
add eax,(int)5
mov [ebx+00000154],eax
mov ecx,0000060C { 1548 }
mov [esp+1B],eax
push 0B { 11 }
lea eax,[esp+18]
mov [esp+18],cx
mov ecx,[ps_game.exe+18796C] { [010A2628] }
push eax
mov [esp+1E],edx
mov byte ptr [esp+22],03 { 3 }
call ps_game.exe+ED2D0
popad
popad
popad
originalcode:
movzx edx,byte ptr [ecx+0000012D]

exit:
jmp returnhere

"ps_game.exe"+A1F9C:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+A1F9C:
movzx edx,byte ptr [ecx+0000012D]
//Alt: db 0F B6 91 2D 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>128</ID>
      <Description>"people look"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(costume)
label(costumeweap)
label(nothing)
label(weap)
label(t45)
label(t46)
label(t49)
label(t51)
label(t53)
label(t55)
label(t57)
label(t58)
label(t59)
label(t60)
label(t62)
label(t64)
label(t65)

newmem: //this is allocated memory, you have read,write,execute access
cmp word ptr [ebx+164],0
jne originalcode
cmp word ptr [ebx+166],0
jne weap
jmp nothing

costume:

mov dl,byte ptr[ebx+164]
//add dl,(int)99

//mov dl,[esi+41]
lea eax,[esi+4C]
cmp byte ptr [ebx+12d],0
jne dark
add [edi-01],(int)50
jmp exit
dark:
add [edi-01],(int)35
jmp exit

costumeweap:

mov dl,byte ptr[ebx+166]

//mov dl,[esi+41]
lea eax,[esi+4C]
cmp byte ptr [edi-01],(int)1
je t45
cmp byte ptr [edi-01],(int)3
je t45
cmp byte ptr [edi-01],(int)2
je t46
cmp byte ptr [edi-01],(int)4
je t46
cmp byte ptr [edi-01],(int)5
je t49
cmp byte ptr [edi-01],(int)6
je t51
cmp byte ptr [edi-01],(int)7
je t53
cmp byte ptr [edi-01],(int)8
je t55
cmp byte ptr [edi-01],(int)9
je t57
cmp byte ptr [edi-01],(int)10
je t58
cmp byte ptr [edi-01],(int)11
je t59
cmp byte ptr [edi-01],(int)12
je t60
cmp byte ptr [edi-01],(int)13
je t62
cmp byte ptr [edi-01],(int)14
je t64
cmp byte ptr [edi-01],(int)15
je t65
jmp exit

t45:
mov [edi-01],(int)45
jmp exit
t46:
mov [edi-01],(int)46
jmp exit
t49:
mov [edi-01],(int)49
jmp exit
t51:
mov [edi-01],(int)51
jmp exit
t53:
mov [edi-01],(int)53
jmp exit
t55:
mov [edi-01],(int)55
jmp exit
t57:
mov [edi-01],(int)57
jmp exit
t58:
mov [edi-01],(int)58
jmp exit
t59:
mov [edi-01],(int)59
jmp exit
t60:
mov [edi-01],(int)60
jmp exit
t62:
mov [edi-01],(int)62
jmp exit
t64:
mov [edi-01],(int)64
jmp exit
t65:
mov [edi-01],(int)65
jmp exit


nothing:
mov dl,[esi+41]
lea eax,[esi+4C]
jmp exit

originalcode:
cmp [ebx+0*4+1c0],esi
je costume
cmp [ebx+1*4+1c0],esi
je costume
cmp [ebx+2*4+1c0],esi
je costume
cmp [ebx+3*4+1c0],esi
je costume
cmp [ebx+4*4+1c0],esi
je costume
cmp [ebx+f*4+1c0],0
jne weap
jmp nothing

weap:
cmp [ebx+5*4+1c0],esi
je costumeweap
jmp nothing




exit:
jmp returnhere

"ps_game.exe"+26BD1:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+26BD1:
mov dl,[esi+41]
lea eax,[esi+4C]
//Alt: db 8A 56 41 8D 46 4C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>115</ID>
      <Description>"costume"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(dark)
label(costumeweap)
label(t45)
label(t46)
label(t49)
label(t51)
label(t53)
label(t55)
label(t57)
label(t58)
label(t59)
label(t60)
label(t62)
label(t64)
label(t65)


newmem: //this is allocated memory, you have read,write,execute access
cmp ebx,5
je costumeweap
cmp ebx,4
jg originalcode
cmp word ptr [ecx+164],0
je originalcode
cmp word ptr [ecx+164],FF
ja originalcode
//costume typeid change
mov dl,byte ptr[ecx+164]
//add dl,(int)99
////
//mov dl,[esi+41]
lea eax,[esi+4C]

cmp byte ptr [ecx+12d],0
jne dark
add [esp+13],(int)50
jmp exit
dark:
add [esp+13],(int)35
jmp exit

costumeweap:
cmp word ptr [ecx+166],0
je originalcode
cmp word ptr [ecx+166],ff
ja originalcode

mov dl,byte ptr[ecx+166]

//mov dl,[esi+41]
lea eax,[esi+4C]
cmp byte ptr [esp+13],(int)1
je t45
cmp byte ptr [esp+13],(int)3
je t45
cmp byte ptr [esp+13],(int)2
je t46
cmp byte ptr [esp+13],(int)4
je t46
cmp byte ptr [esp+13],(int)5
je t49
cmp byte ptr [esp+13],(int)6
je t51
cmp byte ptr [esp+13],(int)7
je t53
cmp byte ptr [esp+13],(int)8
je t55
cmp byte ptr [esp+13],(int)9
je t57
cmp byte ptr [esp+13],(int)10
je t58
cmp byte ptr [esp+13],(int)11
je t59
cmp byte ptr [esp+13],(int)12
je t60
cmp byte ptr [esp+13],(int)13
je t62
cmp byte ptr [esp+13],(int)14
je t64
cmp byte ptr [esp+13],(int)15
je t65
jmp exit

t45:
mov [esp+13],(int)45
jmp exit
t46:
mov [esp+13],(int)46
jmp exit
t49:
mov [esp+13],(int)49
jmp exit
t51:
mov [esp+13],(int)51
jmp exit
t53:
mov [esp+13],(int)53
jmp exit
t55:
mov [esp+13],(int)55
jmp exit
t57:
mov [esp+13],(int)57
jmp exit
t58:
mov [esp+13],(int)58
jmp exit
t59:
mov [esp+13],(int)59
jmp exit
t60:
mov [esp+13],(int)60
jmp exit
t62:
mov [esp+13],(int)62
jmp exit
t64:
mov [esp+13],(int)64
jmp exit
t65:
mov [esp+13],(int)65
jmp exit

originalcode:
mov dl,[esi+41]
lea eax,[esi+4C]
jmp exit


exit:
jmp returnhere

"ps_game.exe"+92C49:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+92C49:
mov dl,[esi+41]
lea eax,[esi+4C]
//Alt: db 8A 56 41 8D 46 4C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>27</ID>
      <Description>"kost√ºm bastirmama"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(costumeweap)

newmem: //this is allocated memory, you have read,write,execute access
cmp [esi+84],(int)5000
jl originalcode
cmp [esi+84],(int)5500
jg costumeweap
cmp word ptr [ebp+164],0
je originalcode
jmp 00473142

costumeweap:
cmp [esi+84],(int)6500
jg originalcode
cmp word ptr [ebp+166],0
je originalcode
jmp 00473142

originalcode:
cmp byte ptr [esi+44],00
je ps_game.exe+73142

exit:
jmp returnhere

"ps_game.exe"+72F89:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+72F89:
cmp byte ptr [esi+44],00
je ps_game.exe+73142
//Alt: db 80 7E 44 00 0F 84 AF 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>129</ID>
      <Description>"costume pop"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov edx,[esp+00000B5C]
costume:
		cmp dword ptr [ebx+84],(int)5001
		jl originalcode
		cmp dword ptr [ebx+84],(int)5255
		jg weaponcheck
		push eax
		mov eax, [ebx+84]
		sub eax, (int)5000
		mov [edi+164], eax
		pop eax
		//UPDATE DB
		//pushad
		//movzx  ecx, word ptr[edi+128]  // char id
		//push ecx
		//mov ecx, [edi+9d0]
		//push ecx
		//call dwUpdateCostume
		//add esp, 8
		//popad
		//
		pushad
		pushfd
		mov esi, edi
		mov edx, 0
		push edx
		mov ecx, esi
		mov ebx, 0
		mov eax, 0
		mov ebp, dword ptr[esi+1c0]
		call 00492C00
		popfd
		popad
		pushad
		pushfd
		mov esi, edi
		mov edx, 1
		push edx
		mov ecx, esi
		mov ebx, 1
		mov eax, 0
		mov ebp, dword ptr[esi+4+1c0]
		call 00492C00
		popfd
		popad
		pushad
		pushfd
		mov esi, edi
		mov edx, 2
		push edx
		mov ecx, esi
		mov ebx, 2
		mov eax, 0
		mov ebp, dword ptr[esi+8+1c0]
		call 00492C00
		popfd
		popad
		pushad
		pushfd
		mov esi, edi
		mov edx, 3
		push edx
		mov ecx, esi
		mov ebx, 3
		mov eax, 0
		mov ebp, dword ptr[esi+3*4+1c0]
		call 00492C00
		popfd
		popad
		pushad
		pushfd
		mov esi, edi
		mov edx, 4
		push edx
		mov ecx, esi
		mov ebx, 4
		mov eax, 0
		mov ebp, dword ptr[esi+4*4+1c0]
		call 00492C00
		popfd
		popad
		jmp originalcode

	weaponcheck:
		cmp dword ptr [ebx+84], (int)6255
			jg originalcode
			cmp dword ptr [ebx+84], (int)6001
			jl originalcode
			push eax
			mov eax, [ebx+84]
			sub eax, (int)6000
			mov [edi+166], eax
			pop eax

			//pushad
			//movzx  ecx, word ptr[edi+128]  // char id
			//push ecx
			//movzx ecx, word ptr [edi+166]
			//push ecx
			//call dwUpdateWeapCostume
			//add esp, 8
			//popad

			pushad
			pushfd
			mov esi, edi
			mov edx, 5
			push edx
			mov ecx, esi
			mov ebx, 5
			mov eax, 0
			mov ebp, dword ptr[esi+5*4+1c0]
			call 00492C00
			popfd
			popad

originalcode:
jmp 004730B6

exit:
jmp returnhere

"ps_game.exe"+730AF:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+730AF:
mov edx,[esp+00000B5C]
//Alt: db E9 FC 29 2E 6F
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>130</ID>
      <Description>"costume relog"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
pushad
			pushfd
			//mov esi, edi
			mov edx, 0
			push edx
			mov ecx, esi
			mov ebx, 0
			mov eax, 0
			mov ebp, dword ptr[esi+1c0]
			call 0492C00
			popfd
			popad
			pushad
			pushfd
			//mov esi, edi
			mov edx, 1
			push edx
			mov ecx, esi
			mov ebx, 1
			mov eax, 0
			mov ebp, dword ptr[esi+4+1c0]
			call 0492C00
			popfd
			popad
			pushad
			pushfd
			//mov esi, edi
			mov edx, 2
			push edx
			mov ecx, esi
			mov ebx, 2
			mov eax, 0
			mov ebp, dword ptr[esi+8+1c0]
			call 0492C00
			popfd
			popad
			pushad
			pushfd
			//mov esi, edi
			mov edx, 3
			push edx
			mov ecx, esi
			mov ebx, 3
			mov eax, 0
			mov ebp, dword ptr[esi+3*4+1c0]
			call 0492C00
			popfd
			popad
			pushad
			pushfd
			//mov esi, edi
			mov edx, 4
			push edx
			mov ecx, esi
			mov ebx, 4
			mov eax, 0
			mov ebp, dword ptr[esi+4*4+1c0]
			call 0492C00
			popfd
			popad
			pushad
			pushfd
			//mov esi, edi
			mov edx, 5
			push edx
			mov ecx, esi
			mov ebx, 5
			mov eax, 0
			mov ebp, dword ptr[esi+5*4+1c0]
			call 0492C00
			popfd
			popad


originalcode:
fld dword ptr [esi+000000D0]
jmp 455EC7

exit:
jmp returnhere

"ps_game.exe"+55EC1:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+55EC1:
fld dword ptr [esi+000000D0]
//Alt: db D9 86 D0 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>111</ID>
      <Description>"rank fix"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(rank1)
label(rank2)
label(rank3)
label(rank4)
label(rank5)
label(rank6)
label(rank7)
label(rank8)
label(rank9)
label(rank10)
label(rank11)
label(rank12)
label(rank13)
label(rank14)
label(rank15)
label(rank16)
label(rank17)
label(rank18)
label(rank19)
label(rank20)
label(rank21)
label(rank22)
label(rank23)
label(rank24)
label(rank25)
label(rank26)
label(rank27)
label(rank28)
label(rank29)
label(rank30)
label(rank31)

newmem: //this is allocated memory, you have read,write,execute access
cmp ecx,(int)50
JL rank1
cmp ecx,(int)300
JL rank2
cmp ecx,(int)1000
JL rank3
cmp ecx,(int)5000
JL rank4
cmp ecx,(int)10000
JL rank5
cmp ecx,(int)20000
JL rank6
cmp ecx,(int)30000
JL rank7
cmp ecx,(int)40000
JL rank8
cmp ecx,(int)50000
JL rank9
cmp ecx,(int)70000
JL rank10
cmp ecx,(int)90000
JL rank11
cmp ecx,(int)110000
JL rank12
cmp ecx,(int)130000
JL rank13
cmp ecx,(int)150000
JL rank14
cmp ecx,(int)200000
JL rank15
cmp ecx,(int)250000
JL rank16
cmp ecx,(int)300000
JL rank17
cmp ecx,(int)350000
JL rank18
cmp ecx,(int)450000
JL rank19
cmp ecx,(int)500000
JL rank20
cmp ecx,(int)550000
JL rank21
cmp ecx,(int)600000
JL rank22
cmp ecx,(int)650000
JL rank23
cmp ecx,(int)700000
JL rank24
cmp ecx,(int)750000
JL rank25
cmp ecx,(int)800000
JL rank26
cmp ecx,(int)850000
JL rank27
cmp ecx,(int)900000
JL rank28
cmp ecx,(int)950000
JL rank29
cmp ecx,(int)900000
JL rank30
cmp ecx,(int)1000000
JGE rank31


rank1:
mov ax,1
mov [esp+10],ax
jmp exit

rank2:
mov ax,2
mov [esp+10],ax
jmp exit

rank3:
mov ax,3
mov [esp+10],ax
jmp exit

rank4:
mov ax,4
mov [esp+10],ax
jmp exit

rank5:
mov ax,5
mov [esp+10],ax
jmp exit

rank6:
mov ax,6
mov [esp+10],ax
jmp exit

rank7:
mov ax,7
mov [esp+10],ax
jmp exit

rank8:
mov ax,8
mov [esp+10],ax
jmp exit

rank9:
mov ax,9
mov [esp+10],ax
jmp exit

rank10:
mov ax,(int)10
mov [esp+10],ax
jmp exit

rank11:
mov ax,(int)10
mov [esp+10],ax
jmp exit

rank12:
mov ax,(int)10
mov [esp+10],ax
jmp exit

rank13:
mov ax,(int)12
mov [esp+10],ax
jmp exit

rank14:
mov ax,(int)12
mov [esp+10],ax
jmp exit

rank15:
mov ax,(int)12
mov [esp+10],ax
jmp exit

rank16:
mov ax,(int)15
mov [esp+10],ax
jmp exit

rank17:
mov ax,(int)15
mov [esp+10],ax
jmp exit

rank18:
mov ax,(int)15
mov [esp+10],ax
jmp exit

rank19:
mov ax,(int)19
mov [esp+10],ax
jmp exit

rank20:
mov ax,(int)19
mov [esp+10],ax
jmp exit

rank21:
mov ax,(int)19
mov [esp+10],ax
jmp exit

rank22:
mov ax,(int)22
mov [esp+10],ax
jmp exit

rank23:
mov ax,(int)22
mov [esp+10],ax
jmp exit

rank24:
mov ax,(int)22
mov [esp+10],ax
jmp exit

rank25:
mov ax,(int)25
mov [esp+10],ax
jmp exit

rank26:
mov ax,(int)25
mov [esp+10],ax
jmp exit

rank27:
mov ax,(int)25
mov [esp+10],ax
jmp exit

rank28:
mov ax,(int)30
mov [esp+10],ax
jmp exit

rank29:
mov ax,(int)30
mov [esp+10],ax
jmp exit

rank30:
mov ax,(int)30
mov [esp+10],ax
jmp exit

rank31:
mov ax,(int)45

mov [esp+10],ax

jmp exit

originalcode:


exit:
jmp returnhere

"ps_game.exe"+9D013:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+9D013:
mov ax,[esp+10]
//Alt: db 66 8B 44 24 10
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>114</ID>
      <Description>"shared kills"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(M1)
label(M2)
label(M3)
label(M4)
label(M5)
label(M6)
label(M7)
label(M8)
label(M9)

newmem:
pushad
mov edi,esi
mov edx,[esi+000000E0]
xor ecx,ecx
mov cl,[esi+0000012D]
cmp ecx,01
je setzero
mov ecx,01
jmp gocall
setzero:
mov ecx,00
gocall:
push ecx
push edx
call ShareKill
popad
originalcode:

exit:
jmp 00465ACF

ShareKill:
sub esp,10 { 16 }
push ebx
push ebp
mov ebp,[esp+1C]
push esi
call dword ptr [ps_game.exe+1540D0] { -&gt;kernel32.GetTickCount }
lea esi,[ebp+0000018C]
mov ebx,eax
push esi
add ebx,000003E8 { 1000 }
mov [esp+1C],esi
call dword ptr [ps_game.exe+1540DC] { -&gt;ntdll.RtlEnterCriticalSection }
mov ecx,[ebp+00000184]
mov eax,[ecx+04]
mov [ebp+00000188],eax
cmp eax,ecx
je M1
test eax,eax
je M1
M8:
mov eax,[eax+08]
test eax,eax
je M2
lea esi,[eax-000000D0]
jmp M3
M2:
xor esi,esi
M3:
// cmp byte ptr [esi+00005808],0A { if ( *(_BYTE *)(v8 + 22376) &gt; 0xAu )}
//ja M4
//mov eax,[ebp+00000188] {  v6 = (CObjectLink *)CZone-&gt;m_listUser.cursor-&gt;next;}
//mov eax,[eax+04]
//jmp M6

M4:
cmp edi,esi
jne M5
mov ecx,[ebp+00000188]
mov eax,[ecx+04]
jmp M6
M5:
mov dl,[esp+24]
cmp [esi+0000012D],dl { if ( *(_BYTE *)(v8 + 301) == byCountry )}
jne M9
// NEW CODE HERE //
fld dword ptr [edi+000000D0]
push ecx
fsub dword ptr [esi+000000D0]
fstp dword ptr [esp+14]
fld dword ptr [edi+000000D8]
fsub dword ptr [esi+000000D8]
fstp dword ptr [esp+24]
fld dword ptr [esp+24]
fld dword ptr [esp+14]
fmul st(0),st(0)
fld st(1)
fmulp st(2),st(0)
faddp
fstp dword ptr [esp+24]
fld dword ptr [esp+24]
fstp dword ptr [esp]
call ps_game.exe+1B8A0
fcomp dword ptr [RangeFloat] { [100.00] }
add esp,04 { 00000004 }
fnstsw ax
sahf
//test ah,41 { 65 }
jae M9 { if ( v11 &gt; 10.0 )}
//Need check party
cmp [esi+000017F4],00
je M9
mov ecx,esi
push edi
call ps_game.exe+67CE0
//               //
M9:
mov edx,[ebp+00000188]
mov eax,[edx+04]
M6:
cmp eax,[ebp+00000184] { while ( v6 != CZone-&gt;m_listUser.head &amp;&amp; v6 );}
mov [ebp+00000188],eax
je M7
test eax,eax
jne M8
M7:
mov esi,[esp+18] { v4 = &amp;this-&gt;m_listUser.m_csList.m_cs;}
M1:
push esi
call dword ptr [ps_game.exe+1540D4] { -&gt;ntdll.RtlLeaveCriticalSection }
pop esi
pop ebp
pop ebx
add esp,10 { 16 }
ret 0008 { 00000008 }

RangeFloat:
dd 42C80000

"ps_game.exe"+65AAD:
jmp newmem
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+65AAD:
call ps_game.exe+67EE0
//Alt: db E8 2E 24 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>117</ID>
      <Description>"Cross Faction Whisper"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
0047f629:
db 90 90 90 90 90 90

0047ff69:
db 90 90 90 90 90 90


[DISABLE]
0047f629:
db 0F 85 DF 00 00 00

0047ff69:
db 0F 85 DF 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>127</ID>
      <Description>"Perfect lapisia Shaiya OS"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Credits to Eric-Dutra16
[ENABLE]
alloc(newmem2,2048)
alloc(typeid,4)
alloc(qnt,4)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:
push eax
mov eax,[edx+41]
mov [typeid],eax
pop eax

originalcode2:
cmp byte ptr [edx+40],5F
jne ps_game.exe+6CAB7

exit2:
jmp returnhere2

"ps_game.exe"+6C9FE:
jmp newmem2
nop
nop
nop
nop
nop
returnhere2:

alloc(newmem3,2048)
label(returnhere3)
label(originalcode3)
label(exit3)

newmem3:
mov [qnt],al
cmp byte ptr [qnt],#50
jl originalcode3
sub [qnt],#50

originalcode3:
mov [esp+13],al
cmp al,32

exit3:
jmp returnhere3

"ps_game.exe"+6CCB0:
jmp newmem3
nop
returnhere3:

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(qnt1)
label(qnt2)
label(qnt3)
label(qnt4)
label(qnt5)
label(qnt6)
label(qnt7)
label(qnt8)
label(qnt9)
label(qnt10)
label(qnt11)
label(qnt12)
label(qnt13)
label(qnt14)
label(qnt15)
label(qnt16)
label(qnt17)
label(qnt18)
label(qnt19)
label(qnt20)
label(exit)

newmem:
cmp byte ptr [typeid],#22
je qnt1
cmp byte ptr [typeid],#42
je qnt1
cmp byte ptr [typeid],#23
je qnt2
cmp byte ptr [typeid],#43
je qnt2
cmp byte ptr [typeid],#24
je qnt3
cmp byte ptr [typeid],#44
je qnt3
cmp byte ptr [typeid],#25
je qnt4
cmp byte ptr [typeid],#45
je qnt4
cmp byte ptr [typeid],#26
je qnt5
cmp byte ptr [typeid],#46
je qnt5
cmp byte ptr [typeid],#27
je qnt6
cmp byte ptr [typeid],#47
je qnt6
cmp byte ptr [typeid],#28
je qnt7
cmp byte ptr [typeid],#48
je qnt7
cmp byte ptr [typeid],#29
je qnt8
cmp byte ptr [typeid],#49
je qnt8
cmp byte ptr [typeid],#30
je qnt9
cmp byte ptr [typeid],#50
je qnt9
cmp byte ptr [typeid],#31
je qnt10
cmp byte ptr [typeid],#51
je qnt10
cmp byte ptr [typeid],#32
je qnt11
cmp byte ptr [typeid],#52
je qnt11
cmp byte ptr [typeid],#33
je qnt12
cmp byte ptr [typeid],#53
je qnt12
cmp byte ptr [typeid],#34
je qnt13
cmp byte ptr [typeid],#54
je qnt13
cmp byte ptr [typeid],#35
je qnt14
cmp byte ptr [typeid],#55
je qnt14
cmp byte ptr [typeid],#36
je qnt15
cmp byte ptr [typeid],#56
je qnt15
cmp byte ptr [typeid],#37
je qnt16
cmp byte ptr [typeid],#57
je qnt16
cmp byte ptr [typeid],#38
je qnt17
cmp byte ptr [typeid],#58
je qnt17
cmp byte ptr [typeid],#39
je qnt18
cmp byte ptr [typeid],#59
je qnt18
cmp byte ptr [typeid],#40
je qnt19
cmp byte ptr [typeid],#60
je qnt19
cmp byte ptr [typeid],#41
je qnt20
cmp byte ptr [typeid],#61
je qnt20

originalcode:
cmp esi,eax
jae ps_game.exe+6D11C
jmp exit

qnt1:
cmp byte ptr [qnt],0
je 0046CD83
jmp originalcode

qnt2:
cmp byte ptr [qnt],1
je 0046CD83
jmp originalcode

qnt3:
cmp byte ptr [qnt],2
je 0046CD83
jmp originalcode

qnt4:
cmp byte ptr [qnt],3
je 0046CD83
jmp originalcode

qnt5:
cmp byte ptr [qnt],4
je 0046CD83
jmp originalcode

qnt6:
cmp byte ptr [qnt],5
je 0046CD83
jmp originalcode

qnt7:
cmp byte ptr [qnt],6
je 0046CD83
jmp originalcode

qnt8:
cmp byte ptr [qnt],7
je 0046CD83
jmp originalcode

qnt9:
cmp byte ptr [qnt],8
je 0046CD83
jmp originalcode

qnt10:
cmp byte ptr [qnt],9
je 0046CD83
jmp originalcode

qnt11:
cmp byte ptr [qnt],#10
je 0046CD83
jmp originalcode

qnt12:
cmp byte ptr [qnt],#11
je 0046CD83
jmp originalcode

qnt13:
cmp byte ptr [qnt],#12
je 0046CD83
jmp originalcode

qnt14:
cmp byte ptr [qnt],#13
je 0046CD83
jmp originalcode

qnt15:
cmp byte ptr [qnt],#14
je 0046CD83
jmp originalcode

qnt16:
cmp byte ptr [qnt],#15
je 0046CD83
jmp originalcode

qnt17:
cmp byte ptr [qnt],#16
je 0046CD83
jmp originalcode

qnt18:
cmp byte ptr [qnt],#17
je 0046CD83
jmp originalcode

qnt19:
cmp byte ptr [qnt],#18
je 0046CD83
jmp originalcode

qnt20:
cmp byte ptr [qnt],#19
je 0046CD83
jmp originalcode

exit:
jmp returnhere

"ps_game.exe"+6CD7B:
jmp newmem
nop
nop
nop
returnhere:

[DISABLE]
dealloc(typeid)
dealloc(qnt)
dealloc(newmem3)
"ps_game.exe"+6CCB0:
mov [esp+13],al
cmp al,32

dealloc(newmem2)
"ps_game.exe"+6C9FE:
cmp byte ptr [edx+40],5F
jne ps_game.exe+6CAB7

dealloc(newmem)
"ps_game.exe"+6CD7B:
cmp esi,eax
jae ps_game.exe+6D11C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>33</ID>
      <Description>"Aced 5.4 LvL 60 "</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem1322,2048)
label(returnhere1322)
label(originalcode1322)
label(exit1322)

newmem1322: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1322:
cmp ecx,(int)65
jg 0049BBAF

exit1322:
jmp returnhere1322

0049BB9C:
jmp newmem1322
returnhere1322:

alloc(newmem1271,2048)
label(returnhere1271)
label(originalcode1271)
label(exit1271)

newmem1271: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1271:
cmp ecx,(int)65
jg 0049BB8A

exit1271:
jmp returnhere1271

0049BB75:
jmp newmem1271
returnhere1271:

alloc(newmem1221,2048)
label(returnhere1221)
label(originalcode1221)
label(exit1221)

newmem1221: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1221:
cmp ecx,(int)65
jg 0049B51D

exit1221:
jmp returnhere1221

0049B504:
jmp newmem1221
returnhere1221:

alloc(newmem1172,2048)
label(returnhere1172)
label(originalcode1172)
label(exit1172)

newmem1172: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1172:
cmp ecx,(int)65
jg 0049B51D

exit1172:
jmp returnhere1172

0049B504:
jmp newmem1172
returnhere1172:

alloc(newmem1124,2048)
label(returnhere1124)
label(originalcode1124)
label(exit1124)

newmem1124: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1124:
cmp ecx,(int)65
jg 0049B4EC

exit1124:
jmp returnhere1124

0049B4D3:
jmp newmem1124
returnhere1124:

alloc(newmem1077,2048)
label(returnhere1077)
label(originalcode1077)
label(exit1077)

newmem1077: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1077:
cmp ecx,(int)65
jg 0049B4BB

exit1077:
jmp returnhere1077

0049B4A2:
jmp newmem1077
returnhere1077:

alloc(newmem1031,2048)
label(returnhere1031)
label(originalcode1031)
label(exit1031)

newmem1031: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1031:
cmp ecx,(int)65
jg 0049244E

exit1031:
jmp returnhere1031

0049243B:
jmp newmem1031
returnhere1031:

alloc(newmem986,2048)
label(returnhere986)
label(originalcode986)
label(exit986)

newmem986: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode986:
cmp ecx,(int)65
ja 00480D96

exit986:
jmp returnhere986

00480E0C:
jmp newmem986
returnhere986:

alloc(newmem942,2048)
label(returnhere942)
label(originalcode942)
label(exit942)

newmem942: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode942:
cmp ebx,(int)65
jg 0049C246

exit942:
jmp returnhere942

0049C22B:
jmp newmem942
returnhere942:

alloc(newmem899,2048)
label(returnhere899)
label(originalcode899)
label(exit899)

newmem899: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode899:
cmp ebx,(int)65
jg 0049C209

exit899:
jmp returnhere899

0049C1EC:
jmp newmem899
returnhere899:

alloc(newmem857,2048)
label(returnhere857)
label(originalcode857)
label(exit857)

newmem857: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode857:
cmp ebx,(int)65
jg 0049C1C7

exit857:
jmp returnhere857

0049C1AA:
jmp newmem857
returnhere857:

alloc(newmem816,2048)
label(returnhere816)
label(originalcode816)
label(exit816)

newmem816: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode816:
cmp ebx,(int)65
jg 0049C177

exit816:
jmp returnhere816

0049C15A:
jmp newmem816
returnhere816:

alloc(newmem776,2048)
label(returnhere776)
label(originalcode776)
label(exit776)

newmem776: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode776:
cmp ebx,(int)65
jg 0049C12A

exit776:
jmp returnhere776

0049C10D:
jmp newmem776
returnhere776:

alloc(newmem737,2048)
label(returnhere737)
label(originalcode737)
label(exit737)

newmem737: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode737:
cmp ebx,(int)65
jg 0049C0D1

exit737:
jmp returnhere737

0049C0B4:
jmp newmem737
returnhere737:

alloc(newmem699,2048)
label(returnhere699)
label(originalcode699)
label(exit699)

newmem699: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode699:
cmp ebx,(int)65
jg 0049C084

exit699:
jmp returnhere699

0049C052:
jmp newmem699
returnhere699:

alloc(newmem662,2048)
label(returnhere662)
label(originalcode662)
label(exit662)

newmem662: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode662:
cmp ebx,(int)65
jg 0049C030

exit662:
jmp returnhere662

0049C013:
jmp newmem662
returnhere662:

alloc(newmem626,2048)
label(returnhere626)
label(originalcode626)
label(exit626)

newmem626: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode626:
cmp ebx,(int)65
jg 0049BFEE

exit626:
jmp returnhere626

0049BFD1:
jmp newmem626
returnhere626:

alloc(newmem591,2048)
label(returnhere591)
label(originalcode591)
label(exit591)

newmem591: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode591:
cmp ebx,(int)65
jg 0049BF9E

exit591:
jmp returnhere591

0049BF81:
jmp newmem591
returnhere591:

alloc(newmem557,2048)
label(returnhere557)
label(originalcode557)
label(exit557)

newmem557: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode557:
cmp ebx,(int)65
jg 0049BF51

exit557:
jmp returnhere557

0049BF34:
jmp newmem557
returnhere557:

alloc(newmem524,2048)
label(returnhere524)
label(originalcode524)
label(exit524)

newmem524: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode524:
cmp eax,(int)65
jl 00547125

exit524:
jmp returnhere524

00547019:
jmp newmem524
nop
nop
nop
nop
returnhere524:

alloc(newmem492,2048)
label(returnhere492)
label(originalcode492)
label(exit492)

newmem492: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode492:
cmp edx,(int)65
jg 00492430

exit492:
jmp returnhere492

0049241B:
jmp newmem492
returnhere492:

alloc(newmem461,2048)
label(returnhere461)
label(originalcode461)
label(exit461)

newmem461: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode461:
cmp edx,(int)65
jg 0046133C

exit461:
jmp returnhere461

00461322:
jmp newmem461
returnhere461:

alloc(newmem431,2048)
label(returnhere431)
label(originalcode431)
label(exit431)

newmem431: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode431:
cmp edx,(int)65
jg 00461310

exit431:
jmp returnhere431

004612F7:
jmp newmem431
returnhere431:

alloc(newmem402,2048)
label(returnhere402)
label(originalcode402)
label(exit402)

newmem402: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode402:
cmp edx,(int)65
jg 004612E5

exit402:
jmp returnhere402

004612CC:
jmp newmem402
returnhere402:

alloc(newmem374,2048)
label(returnhere374)
label(originalcode374)
label(exit374)

newmem374: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode374:
cmp ecx,(int)65
jg 00467C11

exit374:
jmp returnhere374

00467BFC:
jmp newmem374
returnhere374:

alloc(newmem347,2048)
label(returnhere347)
label(originalcode347)
label(exit347)

newmem347: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode347:
cmp ecx,(int)65
jg 00465252

exit347:
jmp returnhere347

0046523F:
jmp newmem347
returnhere347:

alloc(newmem321,2048)
label(returnhere321)
label(originalcode321)
label(exit321)

newmem321: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode321:
cmp ecx,(int)65
jg 00460C6B

exit321:
jmp returnhere321

"ps_game.exe"+60C55:
jmp newmem321
returnhere321:

alloc(newmem296,2048)
label(returnhere296)
label(originalcode296)
label(exit296)

newmem296: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode296:
cmp ecx,(int)65
jg 004651FD

exit296:
jmp returnhere296

004651EA:
jmp newmem296
returnhere296:

alloc(newmem272,2048)
label(returnhere272)
label(originalcode272)
label(exit272)

newmem272: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode272:
cmp ecx,(int)65
jg 00465172

exit272:
jmp returnhere272

0046515F:
jmp newmem272
returnhere272:

alloc(newmem249,2048)
label(returnhere249)
label(originalcode249)
label(exit249)

newmem249: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode249:
cmp ecx,(int)65
jg 00465007

exit249:
jmp returnhere249

00464FF5:
jmp newmem249
returnhere249:

alloc(newmem227,2048)
label(returnhere227)
label(originalcode227)
label(exit227)

newmem227: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode227:
cmp ecx,(int)65
jg 00461416

exit227:
jmp returnhere227

004613F9:
jmp newmem227
returnhere227:

alloc(newmem206,2048)
label(returnhere206)
label(originalcode206)
label(exit206)

newmem206: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode206:
cmp ecx,(int)65
jg 004613C9

exit206:
jmp returnhere206

004613AC:
jmp newmem206
returnhere206:

alloc(newmem186,2048)
label(returnhere186)
label(originalcode186)
label(exit186)

newmem186: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode186:
cmp ecx,(int)65
jg 00461382

exit186:
jmp returnhere186

0046135B:
jmp newmem186
returnhere186:

alloc(newmem167,2048)
label(returnhere167)
label(originalcode167)
label(exit167)

newmem167: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode167:
cmp ecx,(int)65
jg 00460CCB

exit167:
jmp returnhere167

"ps_game.exe"+60CB5:
jmp newmem167
returnhere167:

alloc(newmem149,2048)
label(returnhere149)
label(originalcode149)
label(exit149)

newmem149: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode149:
cmp ecx,(int)65
jg 00460C9B

exit149:
jmp returnhere149

"ps_game.exe"+ 60C85:
jmp newmem149
returnhere149:

alloc(newmem132,2048)
label(returnhere132)
label(originalcode132)
label(exit132)

newmem132: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode132:
cmp ecx,(int)65
jg 00460C6B

exit132:
jmp returnhere132

"ps_game.exe"+60C55:
jmp newmem132
returnhere132:

alloc(newmem116,2048)
label(returnhere116)
label(originalcode116)
label(exit116)

newmem116: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode116:
cmp ebx,(int)65
jg 0049BEF8

exit116:
jmp returnhere116

"ps_game.exe"+9BEDB:
jmp newmem116
returnhere116:

alloc(newmem101,2048)
label(returnhere101)
label(originalcode101)
label(exit101)

newmem101: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode101:
cmp ebx,(int)65
jg 0049BE19

exit101:
jmp returnhere101

"ps_game.exe"+9BE00:
jmp newmem101
returnhere101:

alloc(newmem87,2048)
label(returnhere87)
label(originalcode87)
label(exit87)

newmem87: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode87:
cmp ebx,(int)65
jg 0049BDE8

exit87:
jmp returnhere87

"ps_game.exe"+9BDCF:
jmp newmem87
returnhere87:

alloc(newmem74,2048)
label(returnhere74)
label(originalcode74)
label(exit74)

newmem74: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode74:
cmp ebx,(int)65
jg 0049BDB7

exit74:
jmp returnhere74

"ps_game.exe"+9BD9E:
jmp newmem74
returnhere74:

alloc(newmem62,2048)
label(returnhere62)
label(originalcode62)
label(exit62)

newmem62: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode62:
cmp ebx,(int)65
jg 0049B88F

exit62:
jmp returnhere62

"ps_game.exe"+9B872:
jmp newmem62
returnhere62:

alloc(newmem51,2048)
label(returnhere51)
label(originalcode51)
label(exit51)

newmem51: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode51:
cmp ebx,(int)65
jg 0049B83B

exit51:
jmp returnhere51

"ps_game.exe"+9B81E:
jmp newmem51
returnhere51:

alloc(newmem41,2048)
label(returnhere41)
label(originalcode41)
label(exit41)

newmem41: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode41:
cmp ebx,(int)65
jg 0049B7DF

exit41:
jmp returnhere41

"ps_game.exe"+9B7C2:
jmp newmem41
returnhere41:

alloc(newmem32,2048)
label(returnhere32)
label(originalcode32)
label(exit32)

newmem32: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode32:
cmp ebx,(int)65
jg 0049B6AB

exit32:
jmp returnhere32

"ps_game.exe"+9B68E:
jmp newmem32
returnhere32:

alloc(newmem24,2048)
label(returnhere24)
label(originalcode24)
label(exit24)

newmem24: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode24:
cmp ebx,(int)65
jg 0049B657

exit24:
jmp returnhere24

"ps_game.exe"+9B63A:
jmp newmem24
returnhere24:

alloc(newmem17,2048)
label(returnhere17)
label(originalcode17)
label(exit17)

newmem17: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode17:
cmp ebx,(int)65
jg 0049B5FB

exit17:
jmp returnhere17

"ps_game.exe"+9B5DE:
jmp newmem17
returnhere17:

alloc(newmem11,2048)
label(returnhere11)
label(originalcode11)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode11:
cmp ebx,(int)65
jl 00480FB3

exit11:
jmp returnhere11

"ps_game.exe"+80FC4:
jmp newmem11
returnhere11:

alloc(newmem6,2048)
label(returnhere6)
label(originalcode6)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode6:
cmp eax,(int)65
jg 0046145A

exit6:
jmp returnhere6

0046143E:
jmp newmem6
returnhere6:

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode2:
cmp ax,(int)65
jae 00465222

exit2:
jmp returnhere2

"ps_game.exe"+6507D:
jmp newmem2
nop
nop
nop
nop
nop
returnhere2:

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
cmp ax,(int)65
jae ps_game.exe+6522B

exit:
jmp returnhere

"ps_game.exe"+651D9:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem1322)
0049BB9C:
cmp ecx,50
jg 0049BBAF
//Alt: db 83 F9 50 7F 0E
dealloc(newmem1271)
0049BB75:
cmp ecx,50
jg 0049BB8A
//Alt: db 83 F9 50 7F 10
dealloc(newmem1221)
0049B504:
cmp ecx,50
jg 0049B51D
//Alt: db 83 F9 50 7F 14
dealloc(newmem1172)
0049B504:
cmp ecx,50
jg 0049B51D
//Alt: db 83 F9 50 7F 14
dealloc(newmem1124)
0049B4D3:
cmp ecx,50
jg 0049B4EC
//Alt: db 83 F9 50 7F 14
dealloc(newmem1077)
0049B4A2:
cmp ecx,50
jg 0049B4BB
//Alt: db 83 F9 50 7F 14
dealloc(newmem1031)
0049243B:
cmp ecx,50
jg 0049244E
//Alt: db 83 F9 50 7F 0E
dealloc(newmem986)
00480E0C:
cmp ecx,50
ja 00480D96
//Alt: db 83 F9 50 77 85
dealloc(newmem942)
0049C22B:
cmp ebx,50
jg 0049C246
//Alt: db 83 FB 50 7F 16
dealloc(newmem899)
0049C1EC:
cmp ebx,50
jg 0049C209
//Alt: db 83 FB 50 7F 18
dealloc(newmem857)
0049C1AA:
cmp ebx,50
jg 0049C1C7
//Alt: db 83 FB 50 7F 18
dealloc(newmem816)
0049C15A:
cmp ebx,50
jg 0049C177
//Alt: db 83 FB 50 7F 18
dealloc(newmem776)
0049C10D:
cmp ebx,50
jg 0049C12A
//Alt: db 83 FB 50 7F 18
dealloc(newmem737)
0049C0B4:
cmp ebx,50
jg 0049C0D1
//Alt: db 83 FB 50 7F 18
dealloc(newmem699)
0049C052:
cmp ebx,50
jg 0049C084
//Alt: db 83 FB 50 7F 2D
dealloc(newmem662)
0049C013:
cmp ebx,50
jg 0049C030
//Alt: db 83 FB 50 7F 18
dealloc(newmem626)
0049BFD1:
cmp ebx,50
jg 0049BFEE
//Alt: db 83 FB 50 7F 18
dealloc(newmem591)
0049BF81:
cmp ebx,50
jg 0049BF9E
//Alt: db 83 FB 50 7F 18
dealloc(newmem557)
0049BF34:
cmp ebx,50
jg 0049BF51
//Alt: db 83 FB 50 7F 18
dealloc(newmem524)
00547019:
cmp eax,50
jl 00547125
//Alt: db 83 F8 50 0F 8C 03 01 00 00
dealloc(newmem492)
0049241B:
cmp edx,50
jg 00492430
//Alt: db 83 FA 50 7F 10
dealloc(newmem461)
00461322:
cmp edx,50
jg 0046133C
//Alt: db 83 FA 50 7F 15
dealloc(newmem431)
004612F7:
cmp edx,50
jg 00461310
//Alt: db 83 FA 50 7F 14
dealloc(newmem402)
004612CC:
cmp edx,50
jg 004612E5
//Alt: db 83 FA 50 7F 14
dealloc(newmem374)
00467BFC:
cmp ecx,50
jg 00467C11
//Alt: db 83 F9 50 7F 10
dealloc(newmem347)
0046523F:
cmp ecx,50
jg 00465252
//Alt: db 83 F9 50 7F 0E
dealloc(newmem321)
"ps_game.exe"+60C55:
cmp ecx,50
jg 00460C6B
//Alt: db 83 F9 50 7F 11
dealloc(newmem296)
004651EA:
cmp ecx,50
jg 004651FD
//Alt: db 83 F9 50 7F 0E
dealloc(newmem272)
0046515F:
cmp ecx,50
jg 00465172
//Alt: db 83 F9 50 7F 0E
dealloc(newmem249)
00464FF5:
cmp ecx,50
jg 00465007
//Alt: db 83 F9 50 7F 0D
dealloc(newmem227)
004613F9:
cmp ecx,50
jg 00461416
//Alt: db 83 F9 50 7F 18
dealloc(newmem206)
004613AC:
cmp ecx,50
jg 004613C9
//Alt: db 83 F9 50 7F 18
dealloc(newmem186)
0046135B:
cmp ecx,50
jg 00461382
//Alt: db 83 F9 50 7F 22
dealloc(newmem167)
"ps_game.exe"+60CB5:
cmp ecx,50
jg 00460CCB
//Alt: db 83 F9 50 7F 11
dealloc(newmem149)
"ps_game.exe"+ 60C85:
cmp ecx,50
jg 00460C9B
//Alt: db 83 F9 50 7F 11
dealloc(newmem132)
"ps_game.exe"+60C55:
cmp ecx,50
jg 00460C6B
//Alt: db 83 F9 50 7F 11
dealloc(newmem116)
"ps_game.exe"+9BEDB:
cmp ebx,50
jg 0049BEF8
//Alt: db 83 FB 50 7F 18
dealloc(newmem101)
"ps_game.exe"+9BE00:
cmp ebx,50
jg 0049BE19
//Alt: db 83 FB 50 7F 14
dealloc(newmem87)
"ps_game.exe"+9BDCF:
cmp ebx,50
jg 0049BDE8
//Alt: db 83 FB 50 7F 14
dealloc(newmem74)
"ps_game.exe"+9BD9E:
cmp ebx,50
jg 0049BDB7
//Alt: db 83 FB 50 7F 14
dealloc(newmem62)
"ps_game.exe"+9B872:
cmp ebx,50
jg 0049B88F
//Alt: db 83 FB 50 7F 18
dealloc(newmem51)
"ps_game.exe"+9B81E:
cmp ebx,50
jg 0049B83B
//Alt: db 83 FB 50 7F 18
dealloc(newmem41)
"ps_game.exe"+9B7C2:
cmp ebx,50
jg 0049B7DF
//Alt: db 83 FB 50 7F 18
dealloc(newmem32)
"ps_game.exe"+9B68E:
cmp ebx,50
jg 0049B6AB
//Alt: db 83 FB 50 7F 18
dealloc(newmem24)
"ps_game.exe"+9B63A:
cmp ebx,50
jg 0049B657
//Alt: db 83 FB 50 7F 18
dealloc(newmem17)
"ps_game.exe"+9B5DE:
cmp ebx,50
jg 0049B5FB
//Alt: db 83 FB 50 7F 18
dealloc(newmem11)
"ps_game.exe"+80FC4:
cmp ebx,50
jl 00480FB3
//Alt: db 83 FB 50 7C EA
dealloc(newmem6)
0046143E:
cmp eax,50
jg 0046145A
//Alt: db 83 F8 50 7F 17
dealloc(newmem2)
"ps_game.exe"+6507D:
cmp ax,0050
jae 00465222
//Alt: db 66 3D 50 00 0F 83 9B 01 00 00
dealloc(newmem)
"ps_game.exe"+651D9:
cmp ax,0050
jae ps_game.exe+6522B
//Alt: db 66 3D 50 00 73 4C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>0</ID>
      <Description>"Capital Recall Rune"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// Capital Spawn Points

// Light
0056E608:
dd #46 // MapID

dd (float)847.780 // X
dd (float)1.240 // Y
dd (float)704.407 // Z

// Fury
0056E618:
dd #45 // MapID

dd (float)843.435 // X
dd (float)1.240 // Y
dd (float)690.772 // Z

[DISABLE]

0056E608:
dd 00000023

dd 441277AE
dd 41D80000
dd 43607D71

0056E618:
dd 00000024

dd 44094666
dd 42280000
dd 43A2B70A

</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>126</ID>
      <Description>"Auction House Recall Rune"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

// Light Auction House Spawn Points

// Light
0056E628:
dd #42 // MapID

dd (float)84.215 // X
dd (float)1.343 // Y
dd (float)137.060 // Z

// Fury
0056E638:
dd #42 // MapID

dd (float)84.215 // X
dd (float)1.343 // Y
dd (float)137.060 // Z

[DISABLE]

0056E628:
dd 0000002A

dd 429D3852
dd 4175C28F
dd 41DF999A

0056E638:
dd 0000002A

dd 41BB1EB8
dd 4175C28F
dd 42D4CCCD
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>118</ID>
      <Description>"Warehouse Block "</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
mov edx,[edx+30]
cmp byte ptr [edx+31],02
je ps_game.exe+69934
originalcode:
cmp dword ptr [edx+000000A0],1B

exit:
jmp returnhere

"ps_game.exe"+6944E:
jmp newmem
nop
nop
nop
nop
nop
returnhere:

 
 
[DISABLE]
"ps_game.exe"+6944E:
mov edx,[edx+30]
cmp dword ptr [edx+000000A0],1B
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"[DEV]ToFace 18 &amp; 30 Keine EXP"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,1024)
label(returnhere)
label(originalcode)

newmem:
// By MapID
cmp word ptr [esi+160],#18
je 00465222
cmp word ptr [esi+160],#30
je 00465222
cmp word ptr [esi+160],#31
je 00465222
cmp word ptr [esi+160],#32
je 00465222
cmp word ptr [esi+160],#7
je 00465222
cmp word ptr [esi+160],#5
je 00465222
originalcode:
cmp byte ptr [esp+24],00
jmp returnhere

00465087:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)

00465087:
cmp byte ptr [esp+24],00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>119</ID>
      <Description>"battle only arena ep5.4"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
cmp word ptr [ebp+160],#40
je 0048BEA5

exit:
jmp 0048BFAA

"ps_game.exe"+8BE80:
jmp newmem
nop
returnhere:
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+8BE80:
mov cl,[ebx+0000012D]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>124</ID>
      <Description>"check accepted requests "</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
cmp dword ptr [esi+24],03
jl ps_game.exe+85456

exit:
jmp returnhere

"ps_game.exe"+8542C:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8542C:
cmp dword ptr [esi+24],07
jl ps_game.exe+85456
//Alt: db 83 7E 24 03 7C 24
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>125</ID>
      <Description>"check current ppl in party"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
cmp eax,03

exit:
jmp returnhere

"ps_game.exe"+850A8:
jmp newmem
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+850A8:
cmp eax,07
jg ps_game.exe+8520C
//Alt: db 83 F8 03 0F 8F 5B 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>42</ID>
      <Description>"pointers"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
registersymbol(type)
registersymbol(stat)
registersymbol(counter)
registersymbol(maxorange)
registersymbol(itemtype)
registersymbol(statamount)
alloc(statamount,4)
alloc(itemtype,4)
alloc(maxorange,4)
alloc(counter,4)
alloc(type,4)
alloc(stat,4)
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(check)
label(orange)
label(maxorangeamount)
label(recdoubler)
label(equality)
label(pointers)
label(doublercheck)
label(maxcheck)
label(doublercheckequality)
label(maxcheckequailty)
label(fail)

newmem: //this is allocated memory, you have read,write,execute access
/*
Rec runes


STR = Defines Rec rune type

1	: Stat rune (random)
2	: Stat rune (max)
3	: Rec doubler
10	: Stat rune (removal)

Dex = Defines Stat

1 : Str
2 : Dex
3 : Rec
4 : Int
5 : Wis
6 : Luc
7 : Hp
8 : Mp
9 : Sp

[pp+800+eax] = oranges 801 = str 802 = dex etc
[edi+820+eax] = orange stats, 821 = how many str you have, 822 = how many dex you got etc
[edi+840] = max orange amount
[edi+845] = rec doubler amount
*/
cmp [statamount],0
jne ps_game.exe+6D901
cmp [stat],0
jne ps_game.exe+6D901
cmp [type],0
jne ps_game.exe+6D901
cmp [maxorange],0
jne ps_game.exe+6D901
cmp [counter],0
jne ps_game.exe+6D901
mov [statamount],0
pushad
movzx eax,byte ptr [ecx+70]
movzx ebx,byte ptr [ecx+72]
mov [type],eax
mov [stat],ebx
popad
cmp [type],0
JE originalcode
cmp [stat],0
JE originalcode
cmp [stat],(int)7
JL pointers
mov esi,[ebp+30]
cmp [esi+a0],(int)16
JL fail
cmp [esi+a0],(int)22
JL pointers
cmp [esi+a0],(int)24
JL fail
cmp [esi+a0],(int)36
JL pointers
cmp [esi+a0],(int)39
JL fail
cmp [esi+a0],(int)39
JE pointers
cmp [esi+a0],(int)67
JL fail

pointers:
mov [edi+845],0
mov [edi+840],0
mov [counter],0
pushad
mov esi,[ebp+30]
movzx esi, word ptr[esi+3E]
mov [maxorange],esi
mov eax,0
mov esi,[ebp+30]
movzx esi, byte ptr[esi+4a]
mov ebx,0

orange:
cmp eax,9
JGE check
add eax,1
mov [edi+800+eax],0
mov [edi+820+eax],0
cmp word ptr [ebp+4A+eax*2],3030
movzx edx,byte ptr [ebp+82+eax*2]
JE orange
mov [edi+800+eax],1
mov [edi+820+eax],edx
add ebx,1
cmp [maxorange],edx
JE maxorangeamount
JL recdoubler
jmp orange

maxorangeamount:
add [edi+840],1
jmp orange

recdoubler:
add [edi+845],1
jmp orange

check:
cmp ebx,esi
popad
JG fail
JE equality
cmp [type],3
je doublercheck
cmp [type],2
je maxcheck
jmp originalcode

doublercheck:
cmp byte ptr [edi+845],1
JGE fail
jmp originalcode

maxcheck:
cmp byte ptr [edi+840],4 // gm stat max amount
JGE fail
jmp originalcode

originalcode:
push eax
mov eax,[stat]
movzx eax,byte ptr[edi+820+eax]
mov [statamount],eax
pop eax
cmp byte ptr [ecx+46],3E
jne fail
cmp byte ptr [ebp+68],51
je fail
jmp exit

equality:
pushad
mov esi,[stat]
cmp byte ptr [edi+800+esi],00
popad
JE fail
cmp [type],3
je doublercheckequality
cmp [type],2
je maxcheckequailty
jmp originalcode

doublercheckequality:
cmp byte ptr [edi+845],1
JGE fail
jmp originalcode

maxcheckequailty:
cmp byte ptr [edi+840],4 //gm stat max amount
JGE fail
jmp originalcode

fail:
mov [statamount],0
mov [stat],0
mov [type],0
mov [maxorange],0
mov [counter],0
jmp ps_game.exe+6D901


exit:
jmp returnhere

"ps_game.exe"+6D6A9:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+6D6A9:
cmp byte ptr [ecx+46],3E
jne ps_game.exe+6D901
//Alt: db 80 79 46 3E 0F 85 4E 02 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>47</ID>
      <Description>"reroll"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(max,4)
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(custom)
label(custom2)
label(end)
label(randomstat)
label(maxstat)
label(dopa)
label(removal)
label(doubler)
label(doublerend)

newmem: //this is allocated memory, you have read,write,execute access
cmp [type],0
JNE custom
cmp [stat],0
JNE custom

originalcode:
lea ebp,[esi+00000084]
jmp exit

custom:
lea ebp,[esi+00000084]
lea ecx,[ecx+00]
mov edi,[stat]
call 0051BD66
mov edx,[esi+30]
movzx ecx,word ptr [edx+3E]
cdq
mov [max],ecx
inc ecx
idiv ecx
mov bl,dl
call ps_game.exe+11BD66
mov edx,[esi+30]
movzx ecx,word ptr [edx+3E]
inc ecx
cdq
idiv ecx
cmp bl,dl
jb custom2
mov bl,dl

custom2:
cmp dword ptr [esp+2C],00
jne dopa
call ps_game.exe+11BD66
mov edx,[esi+30]
movzx ecx,word ptr [edx+3E]
inc ecx
cdq
idiv ecx
cmp bl,dl
jb dopa
mov bl,dl

dopa:
dec edi
cmp [type],1
JE randomstat
cmp [type],2
JE maxstat
cmp [type],3
JE doubler
cmp [type],(int)10
JE removal


randomstat:
movzx dx,bl
mov [ebp+00+edi*2],dx
jmp end

doubler:
cmp [statamount],(int)50
JBE doublerend
mov [statamount],(int)49


doublerend:
mov bl,[statamount]
add bl,bl
movzx dx,bl
mov [ebp+00+edi*2],dx
jmp end

maxstat:
mov bl,[max]
movzx dx,bl
mov [ebp+00+edi*2],dx
jmp end

removal:
xor ecx,ecx
mov [ebp+00+edi*2],00
movzx edx,word ptr [edi*2+00581C74]
mov byte ptr [edx+esi+4C],30
movzx eax,word ptr [edi*2+00581C74]
mov byte ptr [eax+esi+4D],30
mov [statamount],0
mov [max],0
mov [stat],0
mov [type],0
mov [maxorange],0
mov [counter],0
jmp 004D2C7B


end:
movzx eax,bl
cdq
mov ecx,0000000A
idiv ecx
movzx ecx,word ptr [edi*2+00581C74]
add al,30
mov [ecx+esi+4C],al
movzx eax,word ptr [edi*2+00581C74]
add dl,30
mov [eax+esi+4D],dl
mov [statamount],0
mov [max],0
mov [stat],0
mov [type],0
mov [maxorange],0
mov [counter],0
jmp 004D2C7B





exit:
mov [statamount],0
mov [max],0
mov [stat],0
mov [type],0
mov [maxorange],0
mov [counter],0
jmp returnhere

"ps_game.exe"+D2BC7:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+D2BC7:
lea ebp,[esi+00000084]
//Alt: db 8D AE 84 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>219</ID>
      <Description>"reroll 3"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov [statamount],0
mov [stat],0
mov [type],0
mov [maxorange],0
mov [counter],0
originalcode:
mov ecx,[esp+24]
pop edi

exit:
jmp returnhere

"ps_game.exe"+D2C7B:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+D2C7B:
mov ecx,[esp+24]
pop edi
//Alt: db 8B 4C 24 24 5F
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>48</ID>
      <Description>"reroll 4"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov [statamount],0
mov [stat],0
mov [type],0
mov [maxorange],0
mov [counter],0

originalcode:
call ps_game.exe+62720

exit:
jmp returnhere

"ps_game.exe"+6D729:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+6D729:
call ps_game.exe+62720
//Alt: db E8 F2 4F FF FF
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>120</ID>
      <Description>"All red"</Description>
      <LastState/>
      <Color>008000</Color>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [ebp+160],(int)69 //MapID
jne originalcode2
push eax
code:
movzx ecx, byte ptr [ebx+0000012D] //kogo gryzit
movzx eax, byte ptr [ebp+0000012D] //komy otpravit
cmp eax, ecx
jne originalcode
cmp eax, 1
jne ex
mov cl, 0
jmp originalcode
ex:
mov cl, 1
originalcode:
pop eax
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]

exit:
jmp returnhere
originalcode2:
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
jmp exit

"ps_game.exe"+26B17:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:

 
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+26B17:
mov [esp+3C],cl
movzx ecx,byte ptr [ebx+00000132]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"FFA Attack"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [eax+160],(int)69 //MapID
je 00457E35 //can be attacked
originalcode:
mov dl,[edx+0000012D]

exit:
jmp returnhere

"ps_game.exe"+57E27:
jmp newmem
nop
returnhere:



[DISABLE]
dealloc(newmem)
"ps_game.exe"+57E27:
mov dl,[edx+0000012D]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>121</ID>
      <Description>"kills on specific map"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr[edi+160],(int)69//mapid
jne originalcode
add eax,(int)9//Amount of kills minus 1
originalcode:
inc eax
mov ecx,[ps_game.exe+1879B4]

exit:
jmp returnhere

"ps_game.exe"+67DB3:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+67DB3:
inc eax
mov ecx,[ps_game.exe+1879B4]
//Alt: db 40 8B 0D B4 79 58 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>122</ID>
      <Description>"random respawn"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
alloc(count,4)
label(returnhere)
label(exit)

newmem:
cmp byte ptr[edi+160],(int)69 //MapID
jne exit
cmp [count],0
je one
cmp [count],1
je two
cmp [count],2
je three
cmp [count],3
je four
cmp [count],4
je five
cmp [count],5
je six
cmp [count],6
je seven
cmp [count],7
je eight
jmp exit

exit:
fld dword ptr [ebp+08]
mov ecx,[edi+000000E0]
jmp returnhere

one:
mov [ebp+00],(float)500.067//X
mov [ebp+04],(float)1.240//Y
mov [ebp+08],(float)656.555//Z
add [count],1
jmp exit

two:
mov [ebp+00],(float)399.648
mov [ebp+04],(float)1.240
mov [ebp+08],(float)602.069
add [count],1
jmp exit

three:
mov [ebp+00],(float)340.520
mov [ebp+04],(float)1.240
mov [ebp+08],(float)500.324
add [count],1
jmp exit

four:
mov [ebp+00],(float)393.180
mov [ebp+04],(float)1.240
mov [ebp+08],(float)397.240
add [count],1
jmp exit

five:
mov [ebp+00],(float)501.528
mov [ebp+04],(float)1.240
mov [ebp+08],(float)346.074
add [count],1
jmp exit

six:
mov [ebp+00],(float)603.892
mov [ebp+04],(float)1.240
mov [ebp+08],(float)396.881
add [count],1
jmp exit

seven:
mov [ebp+00],(float)661.673
mov [ebp+04],(float)1.240
mov [ebp+08],(float)500.115
add [count],1
jmp exit

eight:
mov [ebp+00],(float)601.195
mov [ebp+04],(float)1.240
mov [ebp+08],(float)602.910
mov [count],0
jmp exit

"ps_game.exe"+66E45:
jmp newmem
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+66E45:
fld dword ptr [ebp+08]
mov ecx,[edi+000000E0]
//Alt: db D9 45 08 8B 8F E0 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>5</ID>
      <Description>"Cros Facktion Raid "</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
cmp word ptr [ebp+160],(int)69 //mapid
jne originalcode
cmp word ptr [edi+160],(int)69 //mapid
jne originalcode
jmp 004757D8

originalcode:
xor ecx,ecx
push ebp
lea edx,[ecx+0C]
jmp exit

exit:
jmp returnhere

"ps_game.exe"+757C8:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+757C8:
xor ecx,ecx
push ebp
lea edx,[ecx+0C]
//Alt: db 33 C9 55 8D 51 0C
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>123</ID>
      <Description>"auto notice when kill"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
alloc(pk,64)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr[edi+160],(int)69
jne originalcode
pushad
pushfd
mov edx,[edi+000000E0]
test edx,edx
je vihod
mov eax,3
mov ebx,0
mov word ptr[pk],F90B
again1:
mov cl,[edi+ebx+184]
mov [pk+eax],cl
inc eax
inc ebx
test cl,cl
jne again1
mov byte ptr [pk+eax-1],20
mov [pk+eax],6C6C696B
add eax,4
mov [pk+eax],00206465
add eax,3
mov ebx,0
again2:
mov cl,[ebp+ebx+184]
mov [pk+eax],cl
inc eax
inc ebx
test cl,cl
jne again2
inc eax
mov byte ptr [pk+2],al
add al,2

lea ecx,[pk] // body packet
mov ebx,edx
call 004273A0

vihod:
popfd
popad
originalcode:
add [edi+00000148],ecx

exit:
jmp returnhere

"ps_game.exe"+67DC0:
jmp newmem
nop
returnhere:



[DISABLE]
dealloc(pk)
dealloc(newmem)
"ps_game.exe"+67DC0:
add [edi+00000148],ecx
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>214</ID>
      <Description>"Bless system block"</Description>
      <ShowAsSigned>0</ShowAsSigned>
      <VariableType>4 Bytes</VariableType>
      <Address>ps_game.exe+CA22E8</Address>
      <CheatEntries>
        <CheatEntry>
          <ID>2</ID>
          <Description>"light bless"</Description>
          <Color>00FF00</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>ps_game.exe+CA2264</Address>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"dark bless"</Description>
          <Color>0000FF</Color>
          <VariableType>4 Bytes</VariableType>
          <Address>ps_game.exe+CA22E8</Address>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>215</ID>
      <Description>"GM both faction chats"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
cmp word [ecx+5808],0B
JL "ps_game.exe"+27944

originalcode:
cmp dl,[ecx+0000012D]

exit:
jmp returnhere

"ps_game.exe"+27938:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+27938:
cmp dl,[ecx+0000012D]
//Alt: db 3A 91 2D 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>3</ID>
      <Description>"Party Self"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

alloc(newmem1,2048)
label(returnhere1)
label(originalcode1)
label(exit1)
newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ebp+18],ecx
je 0044F557
originalcode:
cmp dword ptr [ebp+10],07
mov [esp+20],ebx
jl ps_game.exe+4F246

exit:
jmp returnhere

"ps_game.exe"+4F239:
jmp newmem
nop
returnhere:


"ps_game.exe"+754E2:
nop
nop
nop
nop
nop
nop
nop
nop
 newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,01
cmp [esi+10],eax
jle 0044EC8C
originalcode1:
xor eax,eax
cmp [esi+10],eax

exit1:
jmp returnhere1

"ps_game.exe"+4EC70:
jmp newmem1
returnhere1:
[DISABLE]
"ps_game.exe"+4F239:
mov [esp+20],ebx
jl ps_game.exe+4F246

"ps_game.exe"+754E2:
cmp ebx,[ebp+000000DC]
je ps_game.exe+75505

"ps_game.exe"+4EC70:
xor eax,eax
cmp [esi+10],eax
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>216</ID>
      <Description>"Fix drop of helmets and capes"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// Credits to Eric-Dutra16 and andr3y_you96
[ENABLE]
004BAFC8:
db 90 90 90 90 90 90 90 90 90

004BAFD1:
db 90 90 90 90 90 90 90 90 90

00473BBD:
db 90 90 90 90 90 90 90 90 90 90 90 90 90

[DISABLE]
004BAFC8:
cmp eax,10
je 004BB47A

004BAFD1:
cmp eax,18
je 004BB47A

00473BBD:
cmp dword ptr [eax+000000A0],18
je 0047468A
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>217</ID>
      <Description>"LevelUP"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Author: Totoshka, skype: antoshka1312
//http://www.elitepvpers.com/forum/shaiya-trading/4166314-development-projects.html
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
add word ptr [esi+00000138],(int)09 //StatPoint

exit:
jmp returnhere

"ps_game.exe"+9B46B:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+9B46B:
add word ptr [esi+00000138],07
//Alt: db 66 83 86 38 01 00 00 07
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>218</ID>
      <Description>"StatReset"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>//Author: Totoshka, skype: antoshka1312
//http://www.elitepvpers.com/forum/shaiya-trading/4166314-development-projects.html
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
lea esi,[ecx+ecx*8]

exit:
jmp returnhere

"ps_game.exe"+8F967:
jmp newmem
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8F967:
lea esi,[ecx*8+00000000]
sub esi,ecx
//Alt: db 8D 34 CD 00 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>224</ID>
      <Description>"DEX Override (Melee)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(pop_originalcode)
label(originalcode)
label(success)

define(dex_per_percent,#12)
define(min_accuracy,#20)

// edi = attacker
// esi = target
newmem:
cmp byte ptr [edi+1385],1
je originalcode

push eax
push ecx
push edx
sub esp,10

mov eax, dword ptr [edi+1220]
mov ecx, dword ptr [esi+1220]

cmp eax,ecx
ja success

sub eax,ecx
mov dword ptr [esp],eax
mov dword ptr [esp+4],dex_per_percent
fild dword ptr [esp+4] // dex_per_percent
fild dword ptr [esp] // DEX difference
fabs
fdiv st(0), st(1)
fistp dword ptr [esp]
fistp dword ptr [esp+4]

mov esi,#100
sub esi, dword ptr [esp]

cmp esi,min_accuracy
jae pop_originalcode

mov esi,min_accuracy

pop_originalcode:
add esp,10
pop edx
pop ecx
pop eax

originalcode:
cmp esi,01
jmp returnhere

success:
mov esi,#100
jmp pop_originalcode

00463D4B:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)

00463D4B:
mov esi,eax
cmp esi,01
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>225</ID>
      <Description>"DEX Override (Ranged)"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(pop_originalcode)
label(originalcode)
label(success)

define(dex_per_percent,#12)
define(min_accuracy,#20)

// edi = attacker
// esi = target
newmem:
cmp byte ptr [edi+1395],1
je originalcode

push eax
push ecx
push edx
sub esp,10

mov eax, dword ptr [edi+1220]
mov ecx, dword ptr [esi+1220]

cmp eax,ecx
ja success

sub eax,ecx
mov dword ptr [esp],eax
mov dword ptr [esp+4],dex_per_percent
fild dword ptr [esp+4] // dex_per_percent
fild dword ptr [esp] // DEX difference
fabs
fdiv st(0), st(1)
fistp dword ptr [esp]
fistp dword ptr [esp+4]

mov esi,#100
sub esi, dword ptr [esp]

cmp esi,min_accuracy
jae pop_originalcode

mov esi,min_accuracy

pop_originalcode:
add esp,10
pop edx
pop ecx
pop eax

originalcode:
cmp esi,01
jmp returnhere

success:
mov esi,#100
jmp pop_originalcode

00463C9D:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)

00463C9D:
mov esi,eax
cmp esi,01
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>231</ID>
      <Description>"Ressurect with HP/MP/SP at 100%"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem, 1024)

// handles the recovery of HP/MP/SP
ps_game.exe+66EFD:
jmp newmem
db 90

newmem:

// sp
mov ecx,[edi+00001238]
add ecx,ecx
mov [edi+00001238],ecx

// mp
mov edx,[edi+0000123C]
add edx,edx
mov [edi+0000123C],edx
push ecx

// hp
mov ecx,[edi+00001234]
add ecx,ecx
mov [edi+00001234],ecx

// return to CUser::Rebirth
jmp ps_game.exe+66F10

[DISABLE]
dealloc(newmem)

ps_game.exe+66EFD:
mov ecx,[edi+00001238]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>57</ID>
      <Description>"Enable summon and movement Skyfall Map"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]

004733E9:
nop
nop
nop
nop
nop
nop
nop
nop
nop
nop

00473567:
nop
nop
nop
nop
nop
nop

[DISABLE]

004733E9:
cmp dword ptr [ecx+78],#67
je 0047468A

00473567:
cmp dword ptr [ecx+78],#67
je 00473557
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>336</ID>
      <Description>"Non Tradeable Items"</Description>
      <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>339</ID>
          <Description>"Market"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Author: Totoshka, skype: antoshka1312
//http://www.elitepvpers.com/forum/shaiya-trading/4166314-development-projects.html
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
mov esi,eax
test esi,esi
je ps_game.exe+87952
originalcode:
mov eax, [eax+30]
cmp byte ptr[eax+31], 02
je ps_game.exe+87952
exit:
jmp returnhere

"ps_game.exe"+87879:
jmp newmem
nop
nop
nop
nop
nop
returnhere:

 
 
[DISABLE]
"ps_game.exe"+87879:
mov esi,eax
test esi,esi
je ps_game.exe+87952
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>340</ID>
          <Description>"Duel"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Author: Totoshka, skype: antoshka1312
//http://www.elitepvpers.com/forum/shaiya-trading/4166314-development-projects.html
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
test ebp,ebp
je ps_game.exe+8BD40
originalcode:
mov edx, [ebp+30]
cmp byte ptr[edx+31], 02
je ps_game.exe+8BD40
exit:
jmp returnhere

"ps_game.exe"+8BAAE:
jmp newmem
nop
nop
nop
returnhere:

 
 
[DISABLE]
"ps_game.exe"+8BAAE:
test ebp,ebp
je ps_game.exe+8BD40
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>341</ID>
          <Description>"Drop"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Author: Totoshka, skype: antoshka1312
//http://www.elitepvpers.com/forum/shaiya-trading/4166314-development-projects.html
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr[ecx+00000031],02
je 0046A1AA
cmp dword ptr[ecx+000000A0],1B
originalcode:

exit:
jmp returnhere

"ps_game.exe"+69C4B:
jmp newmem
nop
nop
returnhere:

 
 
[DISABLE]
"ps_game.exe"+69C4B:
cmp dword ptr [ecx+000000A0],1B
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>342</ID>
          <Description>"Trade"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Author: Totoshka, skype: antoshka1312
//http://www.elitepvpers.com/forum/shaiya-trading/4166314-development-projects.html
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
mov ecx,00000001
mov ebx, [ebp+30]
cmp byte ptr[ebx+00000031], 02
je 0047F070
xor ebx, ebx
originalcode:

exit:
jmp returnhere

"ps_game.exe"+7E7B4:
jmp newmem
returnhere:

 
 
[DISABLE]
"ps_game.exe"+7E7B4:
mov ecx,00000001
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"Trade2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//Author: Totoshka, skype: antoshka1312
//http://www.elitepvpers.com/forum/shaiya-trading/4166314-development-projects.html
[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
mov ebx, 00
originalcode:
mov ecx,[esp+18]
mov edx,[esp+20]

exit:
jmp returnhere

"ps_game.exe"+7F070:
jmp newmem
nop
nop
nop
returnhere:

 
 
[DISABLE]
"ps_game.exe"+7F070:
mov ecx,[esp+18]
mov edx,[esp+20]
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Code :lock xadd [ecx],eax</Description>
      <Address>7586BB68</Address>
      <ModuleName>kernel32.dll</ModuleName>
      <ModuleNameOffset>4BB68</ModuleNameOffset>
      <Before>
        <Byte>04</Byte>
        <Byte>8B</Byte>
        <Byte>44</Byte>
        <Byte>24</Byte>
        <Byte>08</Byte>
      </Before>
      <Actual>
        <Byte>F0</Byte>
        <Byte>0F</Byte>
        <Byte>C1</Byte>
        <Byte>01</Byte>
      </Actual>
      <After>
        <Byte>C2</Byte>
        <Byte>08</Byte>
        <Byte>00</Byte>
        <Byte>90</Byte>
        <Byte>90</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
