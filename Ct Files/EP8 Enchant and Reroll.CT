<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="21">
  <CheatEntries>
    <CheatEntry>
      <ID>13</ID>
      <Description>"Efsun"</Description>
      <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>0</ID>
          <Description>"1"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

originalcode:


exit:
jmp returnhere

"ps_game.exe"+6D5B9:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+6D5B9:
call ps_game.exe+11710
//Alt: db E8 52 41 FA FF
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>1</ID>
          <Description>"2"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:

originalcode:
mov byte ptr ss:[esp+0xA2C],dl
mov al,0x0
jmp 0046cf11
exit:
jmp returnhere

"ps_game.exe"+6CF03:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+6CF03:
mov al,[ebx+05]
mov [esp+00000A2C],dl
//Alt: db 8A 43 05 88 94 24 2C 0A 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"3"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
mov byte ptr ss:[esp+0xA30],0x0

originalcode:


exit:
jmp returnhere

"ps_game.exe"+6CF32:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+6CF32:
mov cl,[edi+42]
mov [esp+00000A30],cl
//Alt: db 8A 4F 42 88 8C 24 30 0A 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>3</ID>
          <Description>"4"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
0046ce17:
db eb

 
 
[DISABLE]
0046ce17:
db 74

</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>4</ID>
          <Description>"5"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
jmp 0046cc79

originalcode:
movzx edx,al
lea ecx,[ecx+ecx*2]

exit:
jmp returnhere

"ps_game.exe"+6CC45:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+6CC45:
movzx edx,al
lea ecx,[ecx+ecx*2]
//Alt: db 0F B6 D0 8D 0C 49
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"6"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
jmp 0046cc0c

originalcode:
jg ps_game.exe+6D5BE

exit:
jmp returnhere

"ps_game.exe"+6CBFB:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+6CBFB:
jg ps_game.exe+6D5BE
//Alt: db 0F 8F BD 09 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>6</ID>
          <Description>"7"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
jmp 0046ca3b
originalcode:
test esi,esi
je ps_game.exe+6CAB7

exit:
jmp returnhere

"ps_game.exe"+6CA29:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+6CA29:
test esi,esi
je ps_game.exe+6CAB7
//Alt: db 85 F6 0F 84 86 00 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>7</ID>
          <Description>"8"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
mov word ptr ss:[esp+0xA2E],0x0
mov byte ptr ss:[esp+0xA2C],cl
jmp 0046d1ff

exit:
jmp returnhere

"ps_game.exe"+6D1F0:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+6D1F0:
movzx eax,byte ptr [ebx+04]
mov [esp+00000A2C],cl
//Alt: db 0F B6 43 04 88 8C 24 2C 0A 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>8</ID>
          <Description>"9"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
jmp 0046d23f

originalcode:
mov [esp+00000A2E],al

exit:
jmp returnhere

"ps_game.exe"+6D219:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+6D219:
mov [esp+00000A2E],al
//Alt: db 88 84 24 2E 0A 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"10"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
0046d5af:
db eb
0046d17e:
db eb
 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
0046d5af:
db 74
0046d17e:
db 74
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>12</ID>
      <Description>"Rune requirement"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//pid
"ps_game.exe"+670E9:
jmp ps_game.exe+672F7
nop

//ress
"ps_game.exe"+668B7:
jmp ps_game.exe+66AC4
nop

"ps_game.exe"+662DF:
jmp ps_game.exe+6644A
nop

//link
"ps_game.exe"+6E5D0:
db 90 90 90 90 90 90

//enchant
"ps_game.exe"+6CCEA:
db 90 90 90 90 90 90

//repair items
"ps_game.exe"+71DB2:
db 90 90 90 90 90 90

//extract
"ps_game.exe"+70602:
db 90 90 90 90 90 90

[DISABLE]
"ps_game.exe"+670E9:
jne ps_game.exe+672F7

"ps_game.exe"+668B7:
jne ps_game.exe+66AC4

"ps_game.exe"+662DF:
jne ps_game.exe+6644A

"ps_game.exe"+6E5D0:
mov [ebp+00000140],eax

"ps_game.exe"+6CCEA:
mov [ebp+00000140],ecx

"ps_game.exe"+71DB2:
mov [ebp+00000140],ecx

"ps_game.exe"+70602:
sub [edi+00000140],edx
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>10</ID>
      <Description>"Flexible level problem"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
alloc(newmem2,2048)
alloc(pointerTable,56)
label(originalcode)
label(originalcode2)
label(returnhere)
label(returnhere2)
label(exit)

newmem:
pushad
pushfd
alloc(skill09, 180000)
mov [pointerTable],skill09
alloc(skill10, 180000)
mov [pointerTable+4],skill10
alloc(skill11, 180000)
mov [pointerTable+8],skill11
alloc(skill12, 180000)
mov [pointerTable+c],skill12
alloc(skill13, 180000)
mov [pointerTable+10],skill13
alloc(skill14, 180000)
mov [pointerTable+14],skill14
alloc(skill15, 180000)
mov [pointerTable+18],skill15
popfd
popad

cmp ecx,0A
jl originalcode
mov edi,ecx
sub edi,09
mov edi,[edi*4+pointerTable-4]
jmp exit

originalcode:
mov edi,[ecx*4+0100967C]

exit:
jmp returnhere

newmem2:
lea eax,[edx-01]
cmp eax,09
jb originalcode2
sub eax,08
mov eax,[eax*4+pointerTable-4]
jmp returnhere2

originalcode2:
mov eax,[edx*4+0100967C]
jmp returnhere2

"ps_game.exe"+D91A2:
jmp newmem
nop
nop
returnhere:

"ps_game.exe"+1BB83:
jmp newmem2
nop
nop
returnhere2:

004D90C3:
cmp al,0E

0041BB5D:
cmp ecx,0E

00493419:
cmp eax,0E

[DISABLE]
dealloc(newmem)
dealloc(newmem2)
dealloc(pointerTable)
dealloc(skill09)
dealloc(skill10)
dealloc(skill11)
dealloc(skill12)
dealloc(skill13)
dealloc(skill14)
dealloc(skill15)

"ps_game.exe"+D91A2:
mov edi,[ecx*4+0100967C]

"ps_game.exe"+1BB83:
mov eax,[edx*4+0100967C]

004D90C3:
cmp al,08

00493419:
cmp eax,08

0041BB5D:
cmp ecx,08
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"Swap open"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
call ps_game.exe+ED0E0

push 04
lea eax,[esp+18]
push eax
mov ecx,ebx
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],01
mov byte ptr [esp+1F],00
call 004ED0E0
push 04
lea eax,[esp+18]
push eax
mov ecx,ebx
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],02
mov byte ptr [esp+1F],00
call 004ED0E0
push 04
lea eax,[esp+18]
push eax
mov ecx,esi
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],01
mov byte ptr [esp+1F],00
call 004ED0E0
push 04
lea eax,[esp+18]
push eax
mov ecx,esi
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],02
mov byte ptr [esp+1F],00
call 004ED0E0

exit:
jmp returnhere

"ps_game.exe"+7E007:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)
"ps_game.exe"+7E007:
call ps_game.exe+ED0E0
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>14</ID>
      <Description>"GM attacks on both sides"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
cmp byte ptr [eax+5808],#10
jb 00457E35
cmp dl,[eax+0000012D]

exit:
jmp returnhere

"ps_game.exe"+57E2D:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"ps_game.exe"+57E2D:
cmp dl,[eax+0000012D]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>15</ID>
      <Description>"Ability points per level"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
inc eax
mov edx,#17 // points per level
mul edx
mov [esi+0000013A],ax

exit:
jmp returnhere

"ps_game.exe"+8FCC8:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8FCC8:
lea edx,[eax+eax*4+05]
mov [esi+0000013A],dx
//Alt: db 8D 54 80 05 66 89 96 3A 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>16</ID>
      <Description>"Using objects by Kille"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
inc eax
mov edx,#17 // points per level
mul edx
mov [esi+0000013A],ax

exit:
jmp returnhere

"ps_game.exe"+8FCC8:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8FCC8:
lea edx,[eax+eax*4+05]
mov [esi+0000013A],dx
//Alt: db 8D 54 80 05 66 89 96 3A 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>17</ID>
      <Description>"Using objects by Kille"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
inc eax
mov edx,#17 // points per level
mul edx
mov [esi+0000013A],ax

exit:
jmp returnhere

"ps_game.exe"+8FCC8:
jmp newmem
nop
nop
nop
nop
nop
nop
returnhere:

[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8FCC8:
lea edx,[eax+eax*4+05]
mov [esi+0000013A],dx
//Alt: db 8D 54 80 05 66 89 96 3A 01 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>18</ID>
      <Description>"Whisper between parties"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
0047f629:
db 90 90 90 90 90 90

0047ff69:
db 90 90 90 90 90 90


[DISABLE]
0047f629:
db 0F 85 DF 00 00 00

0047ff69:
db 0F 85 DF 00 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>19</ID>
      <Description>"Cross-viewing"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
00477d49:
db 90 90 90 90 90 90



[DISABLE]
00477d49:
db 0F 85 F9 02 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>20</ID>
      <Description>"Leading a loser pull"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(ItemSummonRaid)
label(checkcountry)
label(failed)
label(exit)

newmem:
call ps_game.exe+4ECF0
//esi=target player,edi=source player
//check map
originalcode:
pushad
movzx eax,word ptr [esi+0x160]
movzx ebx,word ptr [edi+0x160]
cmp eax,(int)45
je checkcountry
cmp ebx,(int)45
je checkcountry

jmp ItemSummonRaid

//checkcountry and check if same map
checkcountry:
cmp eax,ebx        //if they are in the same map which we speicifys
je ItemSummonRaid

movzx eax,byte ptr [esi+0x12d]
movzx ebx,byte ptr [edi+0x12d]
cmp eax,ebx
jne failed

/*
push eax               //party table
push ecx               //leader id
mov eax,[edi+17f4]
mov ecx,[eax+0c]       //leader id
imul ecx,ecx,8
add  ecx,18
mov  ecx,[eax+ecx]   //leader address
cmp edi,ecx          //compare address check is leader
pop ecx
pop eax
je 0049e4ea        //if yes
*/

ItemSummonRaid:

mov eax,dword ptr ds:[edi+0x58FC]
mov ecx,dword ptr ds:[edi+0x5900]
lea eax,dword ptr ds:[eax+eax*2]     // eax=bag,ecx=slot
lea edx,dword ptr ds:[ecx+eax*8]
imul edx,edx,4
mov eax,dword ptr ds:[edi+edx+0x1C0]
mov eax,dword ptr ds:[eax+30]
cmp [eax],(int)100045                 //orginal item id
popad
jne 0049e4ea   //success addr
/*
mov eax,dword ptr ds:[eax+0x30]
cmp byte ptr ds:[eax+0x46],0x1F
*/



exit:
jmp returnhere

failed:
popad
jmp 0049E517



"ps_game.exe"+9E4E1:

jmp newmem

returnhere:

[DISABLE]

//code from here till the end of the code will be used to disable the cheat

dealloc(newmem)

"ps_game.exe"+9E4E1:

call ps_game.exe+4ECF0

//Alt: db E8 0A 08 FB FF
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>21</ID>
      <Description>"Blocking object use on the map"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(__illegal)
label(_ItemCheck)
label(exit)

newmem:
cmp byte ptr [ebp+0x160],(int)2  //map id
je _ItemCheck

cmp byte ptr [ebp+0x160],(int)3 //map id
je _ItemCheck

cmp byte ptr [ebp+0x160],(int)4 //map id
je _ItemCheck

jmp originalcode

_ItemCheck:
pushad
movzx eax,[ebx+0x40] //type
movzx ecx,[ebx+0x41] //typeid
imul eax,eax,0x3e8  //*1000
add eax,ecx

cmp eax,(int)25001
je __illegal

cmp eax,(int)1002
je __illegal

jmp originalcode

__illegal:
popad
jmp 0047469F


originalcode:
popad
cmp byte ptr [ebx+42],00
je ps_game.exe+7469F

exit:
jmp returnhere

"ps_game.exe"+72E16:
jmp newmem
nop
nop
nop
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+72E16:
cmp byte ptr [ebx+42],00
je ps_game.exe+7469F
//Alt: db 80 7B 42 00 0F 84 7F 18 00 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>22</ID>
      <Description>"Auto Assemble script"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
push eax
mov al,[esi+4]
mov [esi+7],al

mov al,[esi+5]
mov [esi+8],al

mov al,[esi+6]
mov [esi+9],al

pop eax


originalcode:
push edi
mov ecx,esi
call ps_game.exe+6CBA0

exit:
jmp returnhere

"ps_game.exe"+79FF7:
jmp newmem
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+79FF7:
push edi
mov ecx,esi
call ps_game.exe+6CBA0
//Alt: db 57 8B CE E8 A1 2B FF FF
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <CheatCodes>
    <CodeEntry>
      <Description>Change of mov [eax+04],edx</Description>
      <Address>00501056</Address>
      <ModuleName>local.exe</ModuleName>
      <ModuleNameOffset>101056</ModuleNameOffset>
      <Before>
        <Byte>81</Byte>
        <Byte>C0</Byte>
        <Byte>24</Byte>
        <Byte>00</Byte>
        <Byte>00</Byte>
      </Before>
      <Actual>
        <Byte>89</Byte>
        <Byte>50</Byte>
        <Byte>04</Byte>
      </Actual>
      <After>
        <Byte>C6</Byte>
        <Byte>00</Byte>
        <Byte>FF</Byte>
        <Byte>88</Byte>
        <Byte>50</Byte>
      </After>
    </CodeEntry>
  </CheatCodes>
  <UserdefinedSymbols/>
</CheatTable>
