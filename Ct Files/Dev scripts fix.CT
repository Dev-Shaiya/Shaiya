<?xml version="1.0" encoding="utf-8"?>
<CheatTable CheatEngineTableVersion="29">
  <Forms>
    <UDF1 Class="TCEForm" Encoding="Ascii85">b7o++2nldAU:MM2b.}cxWeIh0Gi32eO*FuZ$-w53nwg$a!u*{OIV8V.c[^.HcxFmT2D1YryK]beNoIZ=8)2L90^^</UDF1>
  </Forms>
  <CheatEntries>
    <CheatEntry>
      <ID>29</ID>
      <Description>"GM Features"</Description>
      <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>0</ID>
          <Description>"GM Both Faction Kill"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
cmp byte ptr [eax+5808],#10
jb 00457E35
cmp dl,[eax+0000012D]

exit:
jmp returnhere

"ps_game.exe"+57E2D:
jmp newmem
nop
returnhere:

[DISABLE]
dealloc(newmem)
"ps_game.exe"+57E2D:
cmp dl,[eax+0000012D]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>14</ID>
          <Description>"GM both faction read"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
cmp word [ecx+5808],0B
JL "ps_game.exe"+27944

originalcode:
cmp dl,[ecx+0000012D]

exit:
jmp returnhere

"ps_game.exe"+27938:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+27938:
cmp dl,[ecx+0000012D]
//Alt: db 3A 91 2D 01 00 00
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>30</ID>
      <Description>"EXP / Level Settings"</Description>
      <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>17</ID>
          <Description>"level 15 and 30 no EXP"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,1024)
label(returnhere)
label(originalcode)

newmem:
// By MapID
cmp word ptr [esi+160],#18
je 00465222
cmp word ptr [esi+160],#30
je 00465222
cmp word ptr [esi+160],#31
je 00465222
cmp word ptr [esi+160],#32
je 00465222
cmp word ptr [esi+160],#104
je 00465222
originalcode:
cmp byte ptr [esp+24],00
jmp returnhere

00465087:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)

00465087:
cmp byte ptr [esp+24],00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>135</ID>
          <Description>"Max Level 70"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem1322,2048)
label(returnhere1322)
label(originalcode1322)
label(exit1322)

newmem1322: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1322:
cmp ecx,(int)70
jg 0049BBAF

exit1322:
jmp returnhere1322

0049BB9C:
jmp newmem1322
returnhere1322:

alloc(newmem1271,2048)
label(returnhere1271)
label(originalcode1271)
label(exit1271)

newmem1271: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1271:
cmp ecx,(int)70
jg 0049BB8A

exit1271:
jmp returnhere1271

0049BB75:
jmp newmem1271
returnhere1271:

alloc(newmem1221,2048)
label(returnhere1221)
label(originalcode1221)
label(exit1221)

newmem1221: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1221:
cmp ecx,(int)70
jg 0049B51D

exit1221:
jmp returnhere1221

0049B504:
jmp newmem1221
returnhere1221:

alloc(newmem1172,2048)
label(returnhere1172)
label(originalcode1172)
label(exit1172)

newmem1172: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1172:
cmp ecx,(int)70
jg 0049B51D

exit1172:
jmp returnhere1172

0049B504:
jmp newmem1172
returnhere1172:

alloc(newmem1124,2048)
label(returnhere1124)
label(originalcode1124)
label(exit1124)

newmem1124: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1124:
cmp ecx,(int)70
jg 0049B4EC

exit1124:
jmp returnhere1124

0049B4D3:
jmp newmem1124
returnhere1124:

alloc(newmem1077,2048)
label(returnhere1077)
label(originalcode1077)
label(exit1077)

newmem1077: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1077:
cmp ecx,(int)70
jg 0049B4BB

exit1077:
jmp returnhere1077

0049B4A2:
jmp newmem1077
returnhere1077:

alloc(newmem1031,2048)
label(returnhere1031)
label(originalcode1031)
label(exit1031)

newmem1031: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode1031:
cmp ecx,(int)70
jg 0049244E

exit1031:
jmp returnhere1031

0049243B:
jmp newmem1031
returnhere1031:

alloc(newmem986,2048)
label(returnhere986)
label(originalcode986)
label(exit986)

newmem986: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode986:
cmp ecx,(int)70
ja 00480D96

exit986:
jmp returnhere986

00480E0C:
jmp newmem986
returnhere986:

alloc(newmem942,2048)
label(returnhere942)
label(originalcode942)
label(exit942)

newmem942: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode942:
cmp ebx,(int)70
jg 0049C246

exit942:
jmp returnhere942

0049C22B:
jmp newmem942
returnhere942:

alloc(newmem899,2048)
label(returnhere899)
label(originalcode899)
label(exit899)

newmem899: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode899:
cmp ebx,(int)70
jg 0049C209

exit899:
jmp returnhere899

0049C1EC:
jmp newmem899
returnhere899:

alloc(newmem857,2048)
label(returnhere857)
label(originalcode857)
label(exit857)

newmem857: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode857:
cmp ebx,(int)70
jg 0049C1C7

exit857:
jmp returnhere857

0049C1AA:
jmp newmem857
returnhere857:

alloc(newmem816,2048)
label(returnhere816)
label(originalcode816)
label(exit816)

newmem816: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode816:
cmp ebx,(int)70
jg 0049C177

exit816:
jmp returnhere816

0049C15A:
jmp newmem816
returnhere816:

alloc(newmem776,2048)
label(returnhere776)
label(originalcode776)
label(exit776)

newmem776: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode776:
cmp ebx,(int)70
jg 0049C12A

exit776:
jmp returnhere776

0049C10D:
jmp newmem776
returnhere776:

alloc(newmem737,2048)
label(returnhere737)
label(originalcode737)
label(exit737)

newmem737: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode737:
cmp ebx,(int)70
jg 0049C0D1

exit737:
jmp returnhere737

0049C0B4:
jmp newmem737
returnhere737:

alloc(newmem699,2048)
label(returnhere699)
label(originalcode699)
label(exit699)

newmem699: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode699:
cmp ebx,(int)70
jg 0049C084

exit699:
jmp returnhere699

0049C052:
jmp newmem699
returnhere699:

alloc(newmem662,2048)
label(returnhere662)
label(originalcode662)
label(exit662)

newmem662: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode662:
cmp ebx,(int)70
jg 0049C030

exit662:
jmp returnhere662

0049C013:
jmp newmem662
returnhere662:

alloc(newmem626,2048)
label(returnhere626)
label(originalcode626)
label(exit626)

newmem626: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode626:
cmp ebx,(int)70
jg 0049BFEE

exit626:
jmp returnhere626

0049BFD1:
jmp newmem626
returnhere626:

alloc(newmem591,2048)
label(returnhere591)
label(originalcode591)
label(exit591)

newmem591: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode591:
cmp ebx,(int)70
jg 0049BF9E

exit591:
jmp returnhere591

0049BF81:
jmp newmem591
returnhere591:

alloc(newmem557,2048)
label(returnhere557)
label(originalcode557)
label(exit557)

newmem557: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode557:
cmp ebx,(int)70
jg 0049BF51

exit557:
jmp returnhere557

0049BF34:
jmp newmem557
returnhere557:

alloc(newmem524,2048)
label(returnhere524)
label(originalcode524)
label(exit524)

newmem524: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode524:
cmp eax,(int)70
jl 00547125

exit524:
jmp returnhere524

00547019:
jmp newmem524
nop
nop
nop
nop
returnhere524:

alloc(newmem492,2048)
label(returnhere492)
label(originalcode492)
label(exit492)

newmem492: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode492:
cmp edx,(int)70
jg 00492430

exit492:
jmp returnhere492

0049241B:
jmp newmem492
returnhere492:

alloc(newmem461,2048)
label(returnhere461)
label(originalcode461)
label(exit461)

newmem461: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode461:
cmp edx,(int)70
jg 0046133C

exit461:
jmp returnhere461

00461322:
jmp newmem461
returnhere461:

alloc(newmem431,2048)
label(returnhere431)
label(originalcode431)
label(exit431)

newmem431: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode431:
cmp edx,(int)70
jg 00461310

exit431:
jmp returnhere431

004612F7:
jmp newmem431
returnhere431:

alloc(newmem402,2048)
label(returnhere402)
label(originalcode402)
label(exit402)

newmem402: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode402:
cmp edx,(int)70
jg 004612E5

exit402:
jmp returnhere402

004612CC:
jmp newmem402
returnhere402:

alloc(newmem374,2048)
label(returnhere374)
label(originalcode374)
label(exit374)

newmem374: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode374:
cmp ecx,(int)70
jg 00467C11

exit374:
jmp returnhere374

00467BFC:
jmp newmem374
returnhere374:

alloc(newmem347,2048)
label(returnhere347)
label(originalcode347)
label(exit347)

newmem347: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode347:
cmp ecx,(int)70
jg 00465252

exit347:
jmp returnhere347

0046523F:
jmp newmem347
returnhere347:

alloc(newmem321,2048)
label(returnhere321)
label(originalcode321)
label(exit321)

newmem321: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode321:
cmp ecx,(int)70
jg 00460C6B

exit321:
jmp returnhere321

"ps_game.exe"+60C55:
jmp newmem321
returnhere321:

alloc(newmem296,2048)
label(returnhere296)
label(originalcode296)
label(exit296)

newmem296: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode296:
cmp ecx,(int)70
jg 004651FD

exit296:
jmp returnhere296

004651EA:
jmp newmem296
returnhere296:

alloc(newmem272,2048)
label(returnhere272)
label(originalcode272)
label(exit272)

newmem272: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode272:
cmp ecx,(int)70
jg 00465172

exit272:
jmp returnhere272

0046515F:
jmp newmem272
returnhere272:

alloc(newmem249,2048)
label(returnhere249)
label(originalcode249)
label(exit249)

newmem249: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode249:
cmp ecx,(int)70
jg 00465007

exit249:
jmp returnhere249

00464FF5:
jmp newmem249
returnhere249:

alloc(newmem227,2048)
label(returnhere227)
label(originalcode227)
label(exit227)

newmem227: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode227:
cmp ecx,(int)70
jg 00461416

exit227:
jmp returnhere227

004613F9:
jmp newmem227
returnhere227:

alloc(newmem206,2048)
label(returnhere206)
label(originalcode206)
label(exit206)

newmem206: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode206:
cmp ecx,(int)70
jg 004613C9

exit206:
jmp returnhere206

004613AC:
jmp newmem206
returnhere206:

alloc(newmem186,2048)
label(returnhere186)
label(originalcode186)
label(exit186)

newmem186: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode186:
cmp ecx,(int)70
jg 00461382

exit186:
jmp returnhere186

0046135B:
jmp newmem186
returnhere186:

alloc(newmem167,2048)
label(returnhere167)
label(originalcode167)
label(exit167)

newmem167: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode167:
cmp ecx,(int)70
jg 00460CCB

exit167:
jmp returnhere167

"ps_game.exe"+60CB5:
jmp newmem167
returnhere167:

alloc(newmem149,2048)
label(returnhere149)
label(originalcode149)
label(exit149)

newmem149: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode149:
cmp ecx,(int)70
jg 00460C9B

exit149:
jmp returnhere149

"ps_game.exe"+ 60C85:
jmp newmem149
returnhere149:

alloc(newmem132,2048)
label(returnhere132)
label(originalcode132)
label(exit132)

newmem132: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode132:
cmp ecx,(int)70
jg 00460C6B

exit132:
jmp returnhere132

"ps_game.exe"+60C55:
jmp newmem132
returnhere132:

alloc(newmem116,2048)
label(returnhere116)
label(originalcode116)
label(exit116)

newmem116: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode116:
cmp ebx,(int)70
jg 0049BEF8

exit116:
jmp returnhere116

"ps_game.exe"+9BEDB:
jmp newmem116
returnhere116:

alloc(newmem101,2048)
label(returnhere101)
label(originalcode101)
label(exit101)

newmem101: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode101:
cmp ebx,(int)70
jg 0049BE19

exit101:
jmp returnhere101

"ps_game.exe"+9BE00:
jmp newmem101
returnhere101:

alloc(newmem87,2048)
label(returnhere87)
label(originalcode87)
label(exit87)

newmem87: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode87:
cmp ebx,(int)70
jg 0049BDE8

exit87:
jmp returnhere87

"ps_game.exe"+9BDCF:
jmp newmem87
returnhere87:

alloc(newmem74,2048)
label(returnhere74)
label(originalcode74)
label(exit74)

newmem74: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode74:
cmp ebx,(int)70
jg 0049BDB7

exit74:
jmp returnhere74

"ps_game.exe"+9BD9E:
jmp newmem74
returnhere74:

alloc(newmem62,2048)
label(returnhere62)
label(originalcode62)
label(exit62)

newmem62: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode62:
cmp ebx,(int)70
jg 0049B88F

exit62:
jmp returnhere62

"ps_game.exe"+9B872:
jmp newmem62
returnhere62:

alloc(newmem51,2048)
label(returnhere51)
label(originalcode51)
label(exit51)

newmem51: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode51:
cmp ebx,(int)70
jg 0049B83B

exit51:
jmp returnhere51

"ps_game.exe"+9B81E:
jmp newmem51
returnhere51:

alloc(newmem41,2048)
label(returnhere41)
label(originalcode41)
label(exit41)

newmem41: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode41:
cmp ebx,(int)70
jg 0049B7DF

exit41:
jmp returnhere41

"ps_game.exe"+9B7C2:
jmp newmem41
returnhere41:

alloc(newmem32,2048)
label(returnhere32)
label(originalcode32)
label(exit32)

newmem32: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode32:
cmp ebx,(int)70
jg 0049B6AB

exit32:
jmp returnhere32

"ps_game.exe"+9B68E:
jmp newmem32
returnhere32:

alloc(newmem24,2048)
label(returnhere24)
label(originalcode24)
label(exit24)

newmem24: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode24:
cmp ebx,(int)70
jg 0049B657

exit24:
jmp returnhere24

"ps_game.exe"+9B63A:
jmp newmem24
returnhere24:

alloc(newmem17,2048)
label(returnhere17)
label(originalcode17)
label(exit17)

newmem17: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode17:
cmp ebx,(int)70
jg 0049B5FB

exit17:
jmp returnhere17

"ps_game.exe"+9B5DE:
jmp newmem17
returnhere17:

alloc(newmem11,2048)
label(returnhere11)
label(originalcode11)
label(exit11)

newmem11: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode11:
cmp ebx,(int)70
jl 00480FB3

exit11:
jmp returnhere11

"ps_game.exe"+80FC4:
jmp newmem11
returnhere11:

alloc(newmem6,2048)
label(returnhere6)
label(originalcode6)
label(exit6)

newmem6: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode6:
cmp eax,(int)70
jg 0046145A

exit6:
jmp returnhere6

0046143E:
jmp newmem6
returnhere6:

alloc(newmem2,2048)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode2:
cmp ax,(int)70
jae 00465222

exit2:
jmp returnhere2

"ps_game.exe"+6507D:
jmp newmem2
nop
nop
nop
nop
nop
returnhere2:

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
cmp ax,(int)70
jae ps_game.exe+6522B

exit:
jmp returnhere

"ps_game.exe"+651D9:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem1322)
0049BB9C:
cmp ecx,50
jg 0049BBAF
//Alt: db 83 F9 50 7F 0E
dealloc(newmem1271)
0049BB75:
cmp ecx,50
jg 0049BB8A
//Alt: db 83 F9 50 7F 10
dealloc(newmem1221)
0049B504:
cmp ecx,50
jg 0049B51D
//Alt: db 83 F9 50 7F 14
dealloc(newmem1172)
0049B504:
cmp ecx,50
jg 0049B51D
//Alt: db 83 F9 50 7F 14
dealloc(newmem1124)
0049B4D3:
cmp ecx,50
jg 0049B4EC
//Alt: db 83 F9 50 7F 14
dealloc(newmem1077)
0049B4A2:
cmp ecx,50
jg 0049B4BB
//Alt: db 83 F9 50 7F 14
dealloc(newmem1031)
0049243B:
cmp ecx,50
jg 0049244E
//Alt: db 83 F9 50 7F 0E
dealloc(newmem986)
00480E0C:
cmp ecx,50
ja 00480D96
//Alt: db 83 F9 50 77 85
dealloc(newmem942)
0049C22B:
cmp ebx,50
jg 0049C246
//Alt: db 83 FB 50 7F 16
dealloc(newmem899)
0049C1EC:
cmp ebx,50
jg 0049C209
//Alt: db 83 FB 50 7F 18
dealloc(newmem857)
0049C1AA:
cmp ebx,50
jg 0049C1C7
//Alt: db 83 FB 50 7F 18
dealloc(newmem816)
0049C15A:
cmp ebx,50
jg 0049C177
//Alt: db 83 FB 50 7F 18
dealloc(newmem776)
0049C10D:
cmp ebx,50
jg 0049C12A
//Alt: db 83 FB 50 7F 18
dealloc(newmem737)
0049C0B4:
cmp ebx,50
jg 0049C0D1
//Alt: db 83 FB 50 7F 18
dealloc(newmem699)
0049C052:
cmp ebx,50
jg 0049C084
//Alt: db 83 FB 50 7F 2D
dealloc(newmem662)
0049C013:
cmp ebx,50
jg 0049C030
//Alt: db 83 FB 50 7F 18
dealloc(newmem626)
0049BFD1:
cmp ebx,50
jg 0049BFEE
//Alt: db 83 FB 50 7F 18
dealloc(newmem591)
0049BF81:
cmp ebx,50
jg 0049BF9E
//Alt: db 83 FB 50 7F 18
dealloc(newmem557)
0049BF34:
cmp ebx,50
jg 0049BF51
//Alt: db 83 FB 50 7F 18
dealloc(newmem524)
00547019:
cmp eax,50
jl 00547125
//Alt: db 83 F8 50 0F 8C 03 01 00 00
dealloc(newmem492)
0049241B:
cmp edx,50
jg 00492430
//Alt: db 83 FA 50 7F 10
dealloc(newmem461)
00461322:
cmp edx,50
jg 0046133C
//Alt: db 83 FA 50 7F 15
dealloc(newmem431)
004612F7:
cmp edx,50
jg 00461310
//Alt: db 83 FA 50 7F 14
dealloc(newmem402)
004612CC:
cmp edx,50
jg 004612E5
//Alt: db 83 FA 50 7F 14
dealloc(newmem374)
00467BFC:
cmp ecx,50
jg 00467C11
//Alt: db 83 F9 50 7F 10
dealloc(newmem347)
0046523F:
cmp ecx,50
jg 00465252
//Alt: db 83 F9 50 7F 0E
dealloc(newmem321)
"ps_game.exe"+60C55:
cmp ecx,50
jg 00460C6B
//Alt: db 83 F9 50 7F 11
dealloc(newmem296)
004651EA:
cmp ecx,50
jg 004651FD
//Alt: db 83 F9 50 7F 0E
dealloc(newmem272)
0046515F:
cmp ecx,50
jg 00465172
//Alt: db 83 F9 50 7F 0E
dealloc(newmem249)
00464FF5:
cmp ecx,50
jg 00465007
//Alt: db 83 F9 50 7F 0D
dealloc(newmem227)
004613F9:
cmp ecx,50
jg 00461416
//Alt: db 83 F9 50 7F 18
dealloc(newmem206)
004613AC:
cmp ecx,50
jg 004613C9
//Alt: db 83 F9 50 7F 18
dealloc(newmem186)
0046135B:
cmp ecx,50
jg 00461382
//Alt: db 83 F9 50 7F 22
dealloc(newmem167)
"ps_game.exe"+60CB5:
cmp ecx,50
jg 00460CCB
//Alt: db 83 F9 50 7F 11
dealloc(newmem149)
"ps_game.exe"+ 60C85:
cmp ecx,50
jg 00460C9B
//Alt: db 83 F9 50 7F 11
dealloc(newmem132)
"ps_game.exe"+60C55:
cmp ecx,50
jg 00460C6B
//Alt: db 83 F9 50 7F 11
dealloc(newmem116)
"ps_game.exe"+9BEDB:
cmp ebx,50
jg 0049BEF8
//Alt: db 83 FB 50 7F 18
dealloc(newmem101)
"ps_game.exe"+9BE00:
cmp ebx,50
jg 0049BE19
//Alt: db 83 FB 50 7F 14
dealloc(newmem87)
"ps_game.exe"+9BDCF:
cmp ebx,50
jg 0049BDE8
//Alt: db 83 FB 50 7F 14
dealloc(newmem74)
"ps_game.exe"+9BD9E:
cmp ebx,50
jg 0049BDB7
//Alt: db 83 FB 50 7F 14
dealloc(newmem62)
"ps_game.exe"+9B872:
cmp ebx,50
jg 0049B88F
//Alt: db 83 FB 50 7F 18
dealloc(newmem51)
"ps_game.exe"+9B81E:
cmp ebx,50
jg 0049B83B
//Alt: db 83 FB 50 7F 18
dealloc(newmem41)
"ps_game.exe"+9B7C2:
cmp ebx,50
jg 0049B7DF
//Alt: db 83 FB 50 7F 18
dealloc(newmem32)
"ps_game.exe"+9B68E:
cmp ebx,50
jg 0049B6AB
//Alt: db 83 FB 50 7F 18
dealloc(newmem24)
"ps_game.exe"+9B63A:
cmp ebx,50
jg 0049B657
//Alt: db 83 FB 50 7F 18
dealloc(newmem17)
"ps_game.exe"+9B5DE:
cmp ebx,50
jg 0049B5FB
//Alt: db 83 FB 50 7F 18
dealloc(newmem11)
"ps_game.exe"+80FC4:
cmp ebx,50
jl 00480FB3
//Alt: db 83 FB 50 7C EA
dealloc(newmem6)
0046143E:
cmp eax,50
jg 0046145A
//Alt: db 83 F8 50 7F 17
dealloc(newmem2)
"ps_game.exe"+6507D:
cmp ax,0050
jae 00465222
//Alt: db 66 3D 50 00 0F 83 9B 01 00 00
dealloc(newmem)
"ps_game.exe"+651D9:
cmp ax,0050
jae ps_game.exe+6522B
//Alt: db 66 3D 50 00 73 4C
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>31</ID>
      <Description>"Cross Faction Stuff"</Description>
      <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>27</ID>
          <Description>"Faction trade (AH)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
nop

exit:
jmp returnhere

"ps_game.exe"+7D9B6:
jmp newmem
nop
returnhere:



 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+7D9B6:
jne ps_game.exe+7E0DA
//Alt: db 0F 85 1E 07 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>19</ID>
          <Description>"Faction inspect (AH)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
00477d49:
db 90 90 90 90 90 90



[DISABLE]
00477d49:
db 0F 85 F9 02 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>21</ID>
          <Description>"Faction whisper"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
0047f629:
db 90 90 90 90 90 90

0047ff69:
db 90 90 90 90 90 90


[DISABLE]
0047f629:
db 0F 85 DF 00 00 00

0047ff69:
db 0F 85 DF 00 00 00
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>134</ID>
      <Description>"Guild with 1 Member"</Description>
      <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>124</ID>
          <Description>"Guild Create with 2 people"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
cmp dword ptr [esi+24],00
jl ps_game.exe+85456

exit:
jmp returnhere

"ps_game.exe"+8542C:
jmp newmem
nop
returnhere:


 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8542C:
cmp dword ptr [esi+24],07
jl ps_game.exe+85456
//Alt: db 83 7E 24 03 7C 24
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>125</ID>
          <Description>"Guild Create with 2 people"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
//place your code here

originalcode:
cmp eax,00

exit:
jmp returnhere

"ps_game.exe"+850A8:
jmp newmem
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+850A8:
cmp eax,07
jg ps_game.exe+8520C
//Alt: db 83 F8 03 0F 8F 5B 01 00 00
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>32</ID>
      <Description>"Self Invite"</Description>
      <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>3</ID>
          <Description>"Selfparty"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

alloc(newmem1,2048)
label(returnhere1)
label(originalcode1)
label(exit1)
newmem: //this is allocated memory, you have read,write,execute access
//place your code here
cmp [ebp+18],ecx
je 0044F557
originalcode:
cmp dword ptr [ebp+10],07
mov [esp+20],ebx
jl ps_game.exe+4F246

exit:
jmp returnhere

"ps_game.exe"+4F239:
jmp newmem
nop
returnhere:


"ps_game.exe"+754E2:
nop
nop
nop
nop
nop
nop
nop
nop
 newmem1: //this is allocated memory, you have read,write,execute access
//place your code here
mov eax,01
cmp [esi+10],eax
jle 0044EC8C
originalcode1:
xor eax,eax
cmp [esi+10],eax

exit1:
jmp returnhere1

"ps_game.exe"+4EC70:
jmp newmem1
returnhere1:
[DISABLE]
"ps_game.exe"+4F239:
mov [esp+20],ebx
jl ps_game.exe+4F246

"ps_game.exe"+754E2:
cmp ebx,[ebp+000000DC]
je ps_game.exe+75505

"ps_game.exe"+4EC70:
xor eax,eax
cmp [esi+10],eax
//code from here till the end of the code will be used to disable the cheat
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>33</ID>
      <Description>"Perfect Lapisia"</Description>
      <Options moManualExpandCollapse="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>34</ID>
          <Description>"Perfect Lapisia"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// Credits to Eric-Dutra16
[ENABLE]
alloc(newmem2,2048)
alloc(typeid,4)
label(returnhere2)
label(originalcode2)
label(exit2)

newmem2:
push eax
mov eax,[edx+41]
mov [typeid],eax
pop eax

originalcode2:
cmp byte ptr [edx+40],5F
jne ps_game.exe+6CAB7

exit2:
jmp returnhere2

"ps_game.exe"+6C9FE:
jmp newmem2
nop
nop
nop
nop
nop
returnhere2:

alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [typeid],(int)3 // typeid perfect lapisia
je 0046CD83
cmp byte ptr [typeid],(int)8 // typeid perfect lapisia
je 0046CD83

originalcode:
cmp esi,eax
jae ps_game.exe+6D11C

exit:
jmp returnhere

"ps_game.exe"+6CD7B:
jmp newmem
nop
nop
nop
returnhere:

[DISABLE]
dealloc(typeid)
dealloc(newmem2)
"ps_game.exe"+6C9FE:
cmp byte ptr [edx+40],5F
jne ps_game.exe+6CAB7

dealloc(newmem)
"ps_game.exe"+6CD7B:
cmp esi,eax
jae ps_game.exe+6D11C
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>126</ID>
      <Description>"FFA Features"</Description>
      <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>127</ID>
          <Description>"Shared kills between Raids"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(M1)
label(M2)
label(M3)
label(M4)
label(M5)
label(M6)
label(M7)
label(M8)
label(M9)

newmem:
call CustomFuncDeath
pushad
mov edi,esi
mov edx,[esi+000000E0]
xor ecx,ecx
mov cl,[esi+0000012D]
cmp ecx,01
je setzero
mov ecx,01
jmp gocall
setzero:
mov ecx,00
gocall:
push ecx
push edx
call ShareKill
popad
originalcode:

exit:
jmp 00465ACF

ShareKill:
sub esp,10 { 16 }
push ebx
push ebp
mov ebp,[esp+1C]
push esi
call dword ptr [ps_game.exe+1540D0] { -&gt;kernel32.GetTickCount }
lea esi,[ebp+0000018C]
mov ebx,eax
push esi
add ebx,000003E8 { 1000 }
mov [esp+1C],esi
call dword ptr [ps_game.exe+1540DC] { -&gt;ntdll.RtlEnterCriticalSection }
mov ecx,[ebp+00000184]
mov eax,[ecx+04]
mov [ebp+00000188],eax
cmp eax,ecx
je M1
test eax,eax
je M1
M8:
mov eax,[eax+08]
test eax,eax
je M2
lea esi,[eax-000000D0]
jmp M3
M2:
xor esi,esi
M3:
// cmp byte ptr [esi+00005808],0A { if ( *(_BYTE *)(v8 + 22376) &gt; 0xAu )}
//ja M4
//mov eax,[ebp+00000188] {  v6 = (CObjectLink *)CZone-&gt;m_listUser.cursor-&gt;next;}
//mov eax,[eax+04]
//jmp M6

M4:
cmp edi,esi
jne M5
mov ecx,[ebp+00000188]
mov eax,[ecx+04]
jmp M6
M5:
mov dl,[esp+24]
cmp [esi+0000012D],dl { if ( *(_BYTE *)(v8 + 301) == byCountry )}
jne M9
// NEW CODE HERE //
fld dword ptr [edi+000000D0]
push ecx
fsub dword ptr [esi+000000D0]
fstp dword ptr [esp+14]
fld dword ptr [edi+000000D8]
fsub dword ptr [esi+000000D8]
fstp dword ptr [esp+24]
fld dword ptr [esp+24]
fld dword ptr [esp+14]
fmul st(0),st(0)
fld st(1)
fmulp st(2),st(0)
faddp
fstp dword ptr [esp+24]
fld dword ptr [esp+24]
fstp dword ptr [esp]
call ps_game.exe+1B8A0
fcomp dword ptr [RangeFloat] { [100.00] }
add esp,04 { 00000004 }
fnstsw ax
sahf
//test ah,41 { 65 }
jae M9 { if ( v11 &gt; 10.0 )}
//Need check party
cmp [esi+000017F4],00
je M9
mov ecx,esi
push edi
call ps_game.exe+67CE0
//               //
M9:
mov edx,[ebp+00000188]
mov eax,[edx+04]
M6:
cmp eax,[ebp+00000184] { while ( v6 != CZone-&gt;m_listUser.head &amp;&amp; v6 );}
mov [ebp+00000188],eax
je M7
test eax,eax
jne M8
M7:
mov esi,[esp+18] { v4 = &amp;this-&gt;m_listUser.m_csList.m_cs;}
M1:
push esi
call dword ptr [ps_game.exe+1540D4] { -&gt;ntdll.RtlLeaveCriticalSection }
pop esi
pop ebp
pop ebx
add esp,10 { 16 }
ret 0008 { 00000008 }

RangeFloat:
dd 42C80000

CustomFuncDeath:
sub esp,14 { 20 }
mov eax,[esi+0000014C]
cmp eax,[ps_game.exe+1823AC] { [000F4240] }
jae FuncDeathM
mov edx,[esi+0000582C]
inc eax
mov [esi+0000014C],eax
mov ecx,0000060C { 1548 }
mov [esp+0F],eax
push 0B { 11 }
lea eax,[esp+0C]
mov [esp+0C],cx
mov ecx,[ps_game.exe+18796C] { [010A2628] }
push eax
mov [esp+12],edx
mov byte ptr [esp+16],01 { 1 }
call ps_game.exe+ED2D0
mov edx,[esi+0000014C]
mov ecx,0000020E { 526 }
push 07 { 7 }
lea eax,[esp+04]
mov [esp+04],cx
push eax
mov ecx,esi
mov byte ptr [esp+0A],01 { 1 }
mov [esp+0B],edx
call ps_game.exe+ED0E0
FuncDeathM:
add esp,14 { 20 }
ret

"ps_game.exe"+65AAD:
jmp newmem
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+65AAD:
call ps_game.exe+67EE0
//Alt: db E8 2E 24 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>128</ID>
          <Description>"Player kill each other"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>// FFA //
[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(partyonereturnhere)
label(partyoneoriginalcode)
label(partyonemem)
label(partytworeturnhere)
label(partytwooriginalcode)
label(partytwomem)
label(trrreturnhere)
label(trroriginalcode)
label(trrmem)

newmem:
cmp word ptr [eax+164],(int)60
je 0044BE48
jmp originalcode

originalcode:
mov dl,[edx+0000012D]
jmp returnhere

partyonemem:
mov dl, byte ptr [edi+164]
cmp dl,40
je 004678D6
cmp dl,2D
je 004678D6
cmp dl,2E
je 004678D6
cmp dl,2F
je 004678D6
cmp dl,2A
je 004678D6
cmp word ptr ds:[ebp+164],(int)60
je 004678CD
jmp partyoneoriginalcode

partyoneoriginalcode:
mov dl,[edi+0000012D]
jmp partyonereturnhere

partytwomem:
mov dl, byte ptr [esi+164]
cmp dl,40
je 004677A7
cmp dl,2D
je 004677A7
cmp dl,2E
je 004677A7
cmp dl,2F
je 004677A7
cmp dl,2A
je 004677A7
mov dl,[esi+0000012D]
cmp word ptr ds:[ebp+164],(int)60
je 0046779D
jmp partytwooriginalcode

partytwooriginalcode:
mov dl,[esi+0000012D]
jmp partytworeturnhere

trrmem:
cmp word ptr ds:[eax+164],(int)60
je 00465E18
jmp trroriginalcode

trroriginalcode:
mov cl,[ebp+0000012D]
jmp trrreturnhere

0044BE5B:
jmp newmem
nop
returnhere:

004678BF:
jmp partyonemem
nop
partyonereturnhere:

0046778F:
jmp partytwomem
nop
partytworeturnhere:

004664C3:
jmp trrmem
nop
trrreturnhere:

[DISABLE]
dealloc(newmem)

0044BE5B:
mov dl,[edx+0000012D]

004678BF:
mov dl,[edi+0000012D]

0046778F:
mov dl,[esi+0000012D]

004664C3:
mov cl,[ebp+0000012D]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>122</ID>
          <Description>"Random Spawn"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
alloc(count,4)
label(returnhere)
label(exit)

newmem:
cmp byte ptr[edi+160],(int)69 //MapID
jne exit
cmp [count],0
je one
cmp [count],1
je two
cmp [count],2
je three
cmp [count],3
je four
cmp [count],4
je five
cmp [count],5
je six
cmp [count],6
je seven
cmp [count],7
je eight
jmp exit

exit:
fld dword ptr [ebp+08]
mov ecx,[edi+000000E0]
jmp returnhere

one:
mov [ebp+00],(float)500.067//X
mov [ebp+04],(float)1.240//Y
mov [ebp+08],(float)656.555//Z
add [count],1
jmp exit

two:
mov [ebp+00],(float)399.648
mov [ebp+04],(float)1.240
mov [ebp+08],(float)602.069
add [count],1
jmp exit

three:
mov [ebp+00],(float)340.520
mov [ebp+04],(float)1.240
mov [ebp+08],(float)500.324
add [count],1
jmp exit

four:
mov [ebp+00],(float)393.180
mov [ebp+04],(float)1.240
mov [ebp+08],(float)397.240
add [count],1
jmp exit

five:
mov [ebp+00],(float)501.528
mov [ebp+04],(float)1.240
mov [ebp+08],(float)346.074
add [count],1
jmp exit

six:
mov [ebp+00],(float)603.892
mov [ebp+04],(float)1.240
mov [ebp+08],(float)396.881
add [count],1
jmp exit

seven:
mov [ebp+00],(float)661.673
mov [ebp+04],(float)1.240
mov [ebp+08],(float)500.115
add [count],1
jmp exit

eight:
mov [ebp+00],(float)601.195
mov [ebp+04],(float)1.240
mov [ebp+08],(float)602.910
mov [count],0
jmp exit

"ps_game.exe"+66E45:
jmp newmem
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+66E45:
fld dword ptr [ebp+08]
mov ecx,[edi+000000E0]
//Alt: db D9 45 08 8B 8F E0 00 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>5</ID>
          <Description>"Possible to invite Opposite faction into raid"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
cmp word ptr [ebp+160],(int)69 //mapid
jne originalcode
cmp word ptr [edi+160],(int)69 //mapid
jne originalcode
jmp 004757D8

originalcode:
xor ecx,ecx
push ebp
lea edx,[ecx+0C]
jmp exit

exit:
jmp returnhere

"ps_game.exe"+757C8:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+757C8:
xor ecx,ecx
push ebp
lea edx,[ecx+0C]
//Alt: db 33 C9 55 8D 51 0C
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>129</ID>
      <Description>"Costume Rune Scripts"</Description>
      <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>130</ID>
          <Description>"Kostüm Rune"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(costume)
label(costumeweap)
label(nothing)
label(weap)
label(t45)
label(t46)
label(t49)
label(t51)
label(t53)
label(t55)
label(t57)
label(t58)
label(t59)
label(t60)
label(t62)
label(t64)
label(t65)

newmem: //this is allocated memory, you have read,write,execute access
cmp word ptr [ebx+164],0
jne originalcode
cmp word ptr [ebx+166],0
jne weap
jmp nothing

costume:

mov dl,byte ptr[ebx+164]
//add dl,(int)99

//mov dl,[esi+41]
lea eax,[esi+4C]
cmp byte ptr [ebx+12d],0
jne dark
add [edi-01],(int)50
jmp exit
dark:
add [edi-01],(int)35
jmp exit

costumeweap:

mov dl,byte ptr[ebx+166]

//mov dl,[esi+41]
lea eax,[esi+4C]
cmp byte ptr [edi-01],(int)1
je t45
cmp byte ptr [edi-01],(int)3
je t45
cmp byte ptr [edi-01],(int)2
je t46
cmp byte ptr [edi-01],(int)4
je t46
cmp byte ptr [edi-01],(int)5
je t49
cmp byte ptr [edi-01],(int)6
je t51
cmp byte ptr [edi-01],(int)7
je t53
cmp byte ptr [edi-01],(int)8
je t55
cmp byte ptr [edi-01],(int)9
je t57
cmp byte ptr [edi-01],(int)10
je t58
cmp byte ptr [edi-01],(int)11
je t59
cmp byte ptr [edi-01],(int)12
je t60
cmp byte ptr [edi-01],(int)13
je t62
cmp byte ptr [edi-01],(int)14
je t64
cmp byte ptr [edi-01],(int)15
je t65
jmp exit

t45:
mov [edi-01],(int)45
jmp exit
t46:
mov [edi-01],(int)46
jmp exit
t49:
mov [edi-01],(int)49
jmp exit
t51:
mov [edi-01],(int)51
jmp exit
t53:
mov [edi-01],(int)53
jmp exit
t55:
mov [edi-01],(int)55
jmp exit
t57:
mov [edi-01],(int)57
jmp exit
t58:
mov [edi-01],(int)58
jmp exit
t59:
mov [edi-01],(int)59
jmp exit
t60:
mov [edi-01],(int)60
jmp exit
t62:
mov [edi-01],(int)62
jmp exit
t64:
mov [edi-01],(int)64
jmp exit
t65:
mov [edi-01],(int)65
jmp exit


nothing:
mov dl,[esi+41]
lea eax,[esi+4C]
jmp exit

originalcode:
cmp [ebx+0*4+1c0],esi
je costume
cmp [ebx+1*4+1c0],esi
je costume
cmp [ebx+2*4+1c0],esi
je costume
cmp [ebx+3*4+1c0],esi
je costume
cmp [ebx+4*4+1c0],esi
je costume
cmp [ebx+f*4+1c0],0
jne weap
jmp nothing

weap:
cmp [ebx+5*4+1c0],esi
je costumeweap
jmp nothing




exit:
jmp returnhere

"ps_game.exe"+26BD1:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+26BD1:
mov dl,[esi+41]
lea eax,[esi+4C]
//Alt: db 8A 56 41 8D 46 4C
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>115</ID>
          <Description>"Kostüm Rune"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(dark)
label(costumeweap)
label(t45)
label(t46)
label(t49)
label(t51)
label(t53)
label(t55)
label(t57)
label(t58)
label(t59)
label(t60)
label(t62)
label(t64)
label(t65)


newmem: //this is allocated memory, you have read,write,execute access
cmp ebx,5
je costumeweap
cmp ebx,4
jg originalcode
cmp word ptr [ecx+164],0
je originalcode
cmp word ptr [ecx+164],FF
ja originalcode
//costume typeid change
mov dl,byte ptr[ecx+164]
//add dl,(int)99
////
//mov dl,[esi+41]
lea eax,[esi+4C]

cmp byte ptr [ecx+12d],0
jne dark
add [esp+13],(int)50
jmp exit
dark:
add [esp+13],(int)35
jmp exit

costumeweap:
cmp word ptr [ecx+166],0
je originalcode
cmp word ptr [ecx+166],ff
ja originalcode

mov dl,byte ptr[ecx+166]

//mov dl,[esi+41]
lea eax,[esi+4C]
cmp byte ptr [esp+13],(int)1
je t45
cmp byte ptr [esp+13],(int)3
je t45
cmp byte ptr [esp+13],(int)2
je t46
cmp byte ptr [esp+13],(int)4
je t46
cmp byte ptr [esp+13],(int)5
je t49
cmp byte ptr [esp+13],(int)6
je t51
cmp byte ptr [esp+13],(int)7
je t53
cmp byte ptr [esp+13],(int)8
je t55
cmp byte ptr [esp+13],(int)9
je t57
cmp byte ptr [esp+13],(int)10
je t58
cmp byte ptr [esp+13],(int)11
je t59
cmp byte ptr [esp+13],(int)12
je t60
cmp byte ptr [esp+13],(int)13
je t62
cmp byte ptr [esp+13],(int)14
je t64
cmp byte ptr [esp+13],(int)15
je t65
jmp exit

t45:
mov [esp+13],(int)45
jmp exit
t46:
mov [esp+13],(int)46
jmp exit
t49:
mov [esp+13],(int)49
jmp exit
t51:
mov [esp+13],(int)51
jmp exit
t53:
mov [esp+13],(int)53
jmp exit
t55:
mov [esp+13],(int)55
jmp exit
t57:
mov [esp+13],(int)57
jmp exit
t58:
mov [esp+13],(int)58
jmp exit
t59:
mov [esp+13],(int)59
jmp exit
t60:
mov [esp+13],(int)60
jmp exit
t62:
mov [esp+13],(int)62
jmp exit
t64:
mov [esp+13],(int)64
jmp exit
t65:
mov [esp+13],(int)65
jmp exit

originalcode:
mov dl,[esi+41]
lea eax,[esi+4C]
jmp exit


exit:
jmp returnhere

"ps_game.exe"+92C49:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+92C49:
mov dl,[esi+41]
lea eax,[esi+4C]
//Alt: db 8A 56 41 8D 46 4C
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>131</ID>
          <Description>"Kostüm Rune"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
label(costumeweap)

newmem: //this is allocated memory, you have read,write,execute access
cmp [esi+84],(int)5000
jl originalcode
cmp [esi+84],(int)5500
jg costumeweap
cmp word ptr [ebp+164],0
je originalcode
jmp 00473142

costumeweap:
cmp [esi+84],(int)6500
jg originalcode
cmp word ptr [ebp+166],0
je originalcode
jmp 00473142

originalcode:
cmp byte ptr [esi+44],00
je ps_game.exe+73142

exit:
jmp returnhere

"ps_game.exe"+72F89:
jmp newmem
nop
nop
nop
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+72F89:
cmp byte ptr [esi+44],00
je ps_game.exe+73142
//Alt: db 80 7E 44 00 0F 84 AF 01 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>132</ID>
          <Description>"Kostüm Rune"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
mov edx,[esp+00000B5C]
costume:
		cmp dword ptr [ebx+84],(int)5001
		jl originalcode
		cmp dword ptr [ebx+84],(int)5255
		jg weaponcheck
		push eax
		mov eax, [ebx+84]
		sub eax, (int)5000
		mov [edi+164], eax
		pop eax
		//UPDATE DB
		//pushad
		//movzx  ecx, word ptr[edi+128]  // char id
		//push ecx
		//mov ecx, [edi+9d0]
		//push ecx
		//call dwUpdateCostume
		//add esp, 8
		//popad
		//
		pushad
		pushfd
		mov esi, edi
		mov edx, 0
		push edx
		mov ecx, esi
		mov ebx, 0
		mov eax, 0
		mov ebp, dword ptr[esi+1c0]
		call 00492C00
		popfd
		popad
		pushad
		pushfd
		mov esi, edi
		mov edx, 1
		push edx
		mov ecx, esi
		mov ebx, 1
		mov eax, 0
		mov ebp, dword ptr[esi+4+1c0]
		call 00492C00
		popfd
		popad
		pushad
		pushfd
		mov esi, edi
		mov edx, 2
		push edx
		mov ecx, esi
		mov ebx, 2
		mov eax, 0
		mov ebp, dword ptr[esi+8+1c0]
		call 00492C00
		popfd
		popad
		pushad
		pushfd
		mov esi, edi
		mov edx, 3
		push edx
		mov ecx, esi
		mov ebx, 3
		mov eax, 0
		mov ebp, dword ptr[esi+3*4+1c0]
		call 00492C00
		popfd
		popad
		pushad
		pushfd
		mov esi, edi
		mov edx, 4
		push edx
		mov ecx, esi
		mov ebx, 4
		mov eax, 0
		mov ebp, dword ptr[esi+4*4+1c0]
		call 00492C00
		popfd
		popad
		jmp originalcode

	weaponcheck:
		cmp dword ptr [ebx+84], (int)6255
			jg originalcode
			cmp dword ptr [ebx+84], (int)6001
			jl originalcode
			push eax
			mov eax, [ebx+84]
			sub eax, (int)6000
			mov [edi+166], eax
			pop eax

			//pushad
			//movzx  ecx, word ptr[edi+128]  // char id
			//push ecx
			//movzx ecx, word ptr [edi+166]
			//push ecx
			//call dwUpdateWeapCostume
			//add esp, 8
			//popad

			pushad
			pushfd
			mov esi, edi
			mov edx, 5
			push edx
			mov ecx, esi
			mov ebx, 5
			mov eax, 0
			mov ebp, dword ptr[esi+5*4+1c0]
			call 00492C00
			popfd
			popad

originalcode:
jmp 004730B6

exit:
jmp returnhere

"ps_game.exe"+730AF:
jmp newmem
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+730AF:
mov edx,[esp+00000B5C]
//Alt: db E9 FC 29 2E 6F
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>133</ID>
          <Description>"Kostüm Rune"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
pushad
			pushfd
			//mov esi, edi
			mov edx, 0
			push edx
			mov ecx, esi
			mov ebx, 0
			mov eax, 0
			mov ebp, dword ptr[esi+1c0]
			call 0492C00
			popfd
			popad
			pushad
			pushfd
			//mov esi, edi
			mov edx, 1
			push edx
			mov ecx, esi
			mov ebx, 1
			mov eax, 0
			mov ebp, dword ptr[esi+4+1c0]
			call 0492C00
			popfd
			popad
			pushad
			pushfd
			//mov esi, edi
			mov edx, 2
			push edx
			mov ecx, esi
			mov ebx, 2
			mov eax, 0
			mov ebp, dword ptr[esi+8+1c0]
			call 0492C00
			popfd
			popad
			pushad
			pushfd
			//mov esi, edi
			mov edx, 3
			push edx
			mov ecx, esi
			mov ebx, 3
			mov eax, 0
			mov ebp, dword ptr[esi+3*4+1c0]
			call 0492C00
			popfd
			popad
			pushad
			pushfd
			//mov esi, edi
			mov edx, 4
			push edx
			mov ecx, esi
			mov ebx, 4
			mov eax, 0
			mov ebp, dword ptr[esi+4*4+1c0]
			call 0492C00
			popfd
			popad
			pushad
			pushfd
			//mov esi, edi
			mov edx, 5
			push edx
			mov ecx, esi
			mov ebx, 5
			mov eax, 0
			mov ebp, dword ptr[esi+5*4+1c0]
			call 0492C00
			popfd
			popad


originalcode:
fld dword ptr [esi+000000D0]
jmp 455EC7

exit:
jmp returnhere

"ps_game.exe"+55EC1:
jmp newmem
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+55EC1:
fld dword ptr [esi+000000D0]
//Alt: db D9 86 D0 00 00 00
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>226</ID>
      <Description>"Automatic Drops / Recreation / DEX overwrite"</Description>
      <Options moManualExpandCollapse="1" moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1" moAllowManualCollapseAndExpand="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>136</ID>
          <Description>"trade exploit fix"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(exit)

newmem:
call ps_game.exe+ED0E0

push 04
lea eax,[esp+18]
push eax
mov ecx,ebx
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],01
mov byte ptr [esp+1F],00
call 004ED0E0
push 04
lea eax,[esp+18]
push eax
mov ecx,ebx
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],02
mov byte ptr [esp+1F],00
call 004ED0E0
push 04
lea eax,[esp+18]
push eax
mov ecx,esi
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],01
mov byte ptr [esp+1F],00
call 004ED0E0
push 04
lea eax,[esp+18]
push eax
mov ecx,esi
mov byte ptr [esp+1C],0A
mov byte ptr [esp+1D],0A
mov byte ptr [esp+1E],02
mov byte ptr [esp+1F],00
call 004ED0E0

exit:
jmp returnhere

"ps_game.exe"+7E007:
jmp newmem
returnhere:
 
[DISABLE]
dealloc(newmem)
"ps_game.exe"+7E007:
call ps_game.exe+ED0E0
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>224</ID>
          <Description>"DEX Override (Melee)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(pop_originalcode)
label(originalcode)
label(success)

define(dex_per_percent,#12)
define(min_accuracy,#20)

// edi = attacker
// esi = target
newmem:
cmp byte ptr [edi+1385],1
je originalcode

push eax
push ecx
push edx
sub esp,10

mov eax, dword ptr [edi+1220]
mov ecx, dword ptr [esi+1220]

cmp eax,ecx
ja success

sub eax,ecx
mov dword ptr [esp],eax
mov dword ptr [esp+4],dex_per_percent
fild dword ptr [esp+4] // dex_per_percent
fild dword ptr [esp] // DEX difference
fabs
fdiv st(0), st(1)
fistp dword ptr [esp]
fistp dword ptr [esp+4]

mov esi,#100
sub esi, dword ptr [esp]

cmp esi,min_accuracy
jae pop_originalcode

mov esi,min_accuracy

pop_originalcode:
add esp,10
pop edx
pop ecx
pop eax

originalcode:
cmp esi,01
jmp returnhere

success:
mov esi,#100
jmp pop_originalcode

00463D4B:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)

00463D4B:
mov esi,eax
cmp esi,01
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>225</ID>
          <Description>"DEX Override (Ranged)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(pop_originalcode)
label(originalcode)
label(success)

define(dex_per_percent,#12)
define(min_accuracy,#20)

// edi = attacker
// esi = target
newmem:
cmp byte ptr [edi+1395],1
je originalcode

push eax
push ecx
push edx
sub esp,10

mov eax, dword ptr [edi+1220]
mov ecx, dword ptr [esi+1220]

cmp eax,ecx
ja success

sub eax,ecx
mov dword ptr [esp],eax
mov dword ptr [esp+4],dex_per_percent
fild dword ptr [esp+4] // dex_per_percent
fild dword ptr [esp] // DEX difference
fabs
fdiv st(0), st(1)
fistp dword ptr [esp]
fistp dword ptr [esp+4]

mov esi,#100
sub esi, dword ptr [esp]

cmp esi,min_accuracy
jae pop_originalcode

mov esi,min_accuracy

pop_originalcode:
add esp,10
pop edx
pop ecx
pop eax

originalcode:
cmp esi,01
jmp returnhere

success:
mov esi,#100
jmp pop_originalcode

00463C9D:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)

00463C9D:
mov esi,eax
cmp esi,01
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>9</ID>
          <Description>"Free Link"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
//pid
"ps_game.exe"+670E9:
jmp ps_game.exe+672F7
nop

//ress
"ps_game.exe"+668B7:
jmp ps_game.exe+66AC4
nop

"ps_game.exe"+662DF:
jmp ps_game.exe+6644A
nop

//link
"ps_game.exe"+6E5D0:
db 90 90 90 90 90 90

//enchant
"ps_game.exe"+6CCEA:
db 90 90 90 90 90 90

//repair items
"ps_game.exe"+71DB2:
db 90 90 90 90 90 90

//extract
"ps_game.exe"+70602:
db 90 90 90 90 90 90

[DISABLE]
"ps_game.exe"+670E9:
jne ps_game.exe+672F7

"ps_game.exe"+668B7:
jne ps_game.exe+66AC4

"ps_game.exe"+662DF:
jne ps_game.exe+6644A

"ps_game.exe"+6E5D0:
mov [ebp+00000140],eax

"ps_game.exe"+6CCEA:
mov [ebp+00000140],ecx

"ps_game.exe"+71DB2:
mov [ebp+00000140],ecx

"ps_game.exe"+70602:
sub [edi+00000140],edx
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>227</ID>
          <Description>"Drop without Group (Gold)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,512)
label(returnhere)

label(solo)
label(solo_bonus)
label(solo_bonus_ok)
label(solo_bonus_wtc)
label(solo_bonus_rpc)

newmem:
mov eax, dword ptr [esp+44] // raid pointer
test eax,eax
je solo
jmp returnhere

solo:
mov edx, dword ptr [esp+40] // player pointer
test edx,edx
je 004BAE0D

cmp dword ptr [edx+594C],2
je solo_bonus_wtc
cmp dword ptr [edx+594C],3
je solo_bonus_rpc

solo_bonus_ok:
mov ecx, dword ptr [esp+18]
call 0046BBA0
jmp 004BAEB8

solo_bonus:
sub esp,4
fild dword ptr [esp+1C]
fld dword ptr [esp]
fmul st(1),st(0)
fstp dword ptr [esp]
fistp dword ptr [esp+1C]
add esp,4
jmp solo_bonus_ok

solo_bonus_wtc:
mov dword ptr [esp-4],(float)1.200 // White Tiger Charm = +20%
jmp solo_bonus

solo_bonus_rpc:
mov dword ptr [esp-4],(float)1.500 // Red Phoenix Charm = +50%
jmp solo_bonus

004BAD4C:
jmp newmem
nop
nop
nop
nop
nop
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)

004BAD4C:
mov eax, dword ptr [esp+44]
test eax,eax
je 004BAE0D
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>228</ID>
          <Description>"Drop without Group (Items)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,128)
label(returnhere)
label(solo)

newmem:
test ebp,ebp
je solo
jmp returnhere

solo:
mov ecx, dword ptr [esp+18]
test ecx,ecx
je 004BB438
push ebx
call 0046AE60
jmp 004BB47A

004BB1D5:
jmp newmem
nop
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)

004BB1D5:
test ebp,ebp
je 004BB438
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>229</ID>
          <Description>"Leader can't activate Leader Loot in MM"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,1024)
label(returnhere)
label(originalcode)
label(exit)

define(stack_alloc,100)

// 4 bytes - global random drop count
// 4 bytes - x10,000 account random drop count
//alloc(player_random_drop_order,40004)
//define(accounts,#10000)

// ebp = raid
newmem:
cmp dword ptr [esp+18],0 // Killer
je originalcode

push ebx
sub esp,stack_alloc

mov esi,esp // store the stack pointer

// clear the memory
push stack_alloc
push 0
push esi
call msvcrt.memset
add esp,C

lea eax, dword ptr [ebp+118]
mov dword ptr [esi+stack_alloc-4],eax
push eax
call dword ptr [005540DC] // ntdll.RtlEnterCriticalSection

mov ecx, dword ptr [esi+stack_alloc+C] // mob
xor ebx,ebx

random_next:
mov edx, dword ptr [ebp+ebx*8+18]

cmp edx, dword ptr [esi+stack_alloc+1C]
je random_ok // skip all further checks for killer

push edx
push ecx
call func_is_player_within_range
test eax,eax
je random_next_check

random_ok:
mov eax, dword ptr [esi+stack_alloc-8]
mov dword ptr [esi+eax*4],edx
inc dword ptr [esi+stack_alloc-8]

random_next_check:
inc ebx
cmp ebx, dword ptr [ebp+10]
jb random_next

call msvcrt.rand
cdq
idiv dword ptr [esi+stack_alloc-8]

mov edx, dword ptr [esi+edx*4]

push ebp
push edx
call func_get_player_index_in_party

mov edx,eax // index of player in party

mov eax, dword ptr [esi+stack_alloc-4]
push eax
call dword ptr [005540D4] // ntdll.RtlLeaveCriticalSection

exit:
add esp,stack_alloc
pop ebx
jmp returnhere

originalcode:
call 0051BD66
cdq
idiv dword ptr [ebp+10]
jmp returnhere

// push player
// push mob
// call func_is_player_within_range
func_is_player_within_range:
push ecx
push edx
push ebx
sub esp,4

xor eax,eax // clearing the return value (false)

mov ecx, dword ptr [esp+14] // mob
mov edx, dword ptr [esp+18] // player

// comparing zone pointers
mov ebx, dword ptr [ecx+8C]
cmp ebx, dword ptr [edx+E0]
jne func_is_player_within_range_exit

 // load mob.X
fld dword ptr [ecx+7C]
// subtract player.X from it
fsub dword ptr [edx+D0]
// get the absolute value
fabs
 // square it
fmul st(0),st(0)
// store result in the stack and pop floating point register
fstp dword ptr [esp]

// load mob.Z
fld dword ptr [ecx+84]
// subtract player.Z from it
fsub dword ptr [edx+D8]
// get the absolute value
fabs
// square it
fmul st(0),st(0)
// add the value previously stored in stack to it
fadd dword ptr [esp]

// square root
fsqrt
// store result in the stack and pop floating point register
fstp dword ptr [esp]

cmp dword ptr [esp],(float)100.000 // max range
ja func_is_player_within_range_exit

inc eax // set return value to true
func_is_player_within_range_exit:
add esp,4
pop ebx
pop edx
pop ecx
ret 8

// push party
// push player
// call func_get_player_index_in_party
func_get_player_index_in_party:
push ecx
push edx
push ebx

mov ecx, dword ptr [esp+10] // player
mov edx, dword ptr [esp+14] // party

mov eax, dword ptr [edx+10] // party member count

func_get_player_index_in_party_next:
dec eax

cmp dword ptr [edx+eax*8+18],ecx
je func_get_player_index_in_party_exit

test eax,eax
jne func_get_player_index_in_party_next

func_get_player_index_in_party_exit:
pop ebx
pop edx
pop ecx
ret 8

//player_random_drop_order:
//dd CCCCCCCC

004BB266:
jmp newmem
nop
nop
nop
nop
returnhere:

[DISABLE]
dealloc(newmem)
//dealloc(player_random_drop_order)

004BB266:
call 0051BD66
cdq
idiv dword ptr [ebp+10]
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>230</ID>
          <Description>"Instant [20] Enchant"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>//
[ENABLE]
"ps_game.exe"+6CD97:
mov al,#20

"ps_game.exe"+6CD7D:
db 90 90 90 90 90 90

[DISABLE]
"ps_game.exe"+6CD97:
inc al

"ps_game.exe"+6CD7D:
jae "ps_game.exe"+6D11C
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>2</ID>
          <Description>"Perfect Recreation (NPC)"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newcode,200)
label(returnhere)
label(originalcode)
newcode:
mov bl,cl
dec bl
originalcode:
movzx dx,bl
mov [ebp+00],dx
jmp returnhere
"ps_game.exe"+D2C1C:
jmp newcode
nop
nop
nop
returnhere:
[DISABLE]
dealloc(newcode)
"ps_game.exe"+D2C1C:
movzx dx,bl
mov [ebp+00],dx
</AssemblerScript>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>235</ID>
      <Description>"fix oracle"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
cmp edi,5
JE 0049B438

originalcode:
jmp dword ptr [edi*4+0049B980]

exit:
jmp returnhere

"ps_game.exe"+9B3DA:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+9B3DA:
jmp dword ptr [edi*4+0049B980]
//Alt: db FF 24 BD 80 B9 49 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>4</ID>
      <Description>"fix oracle stat reset"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem: //this is allocated memory, you have read,write,execute access
movzx eax,byte ptr [edi+00000134]


originalcode:
jmp dword ptr [eax*4+0048FB84]

exit:
jmp returnhere

"ps_game.exe"+8F77C:
jmp newmem
nop
nop
returnhere:


 
 
[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+8F77C:
jmp dword ptr [eax*4+0048FB84]
//Alt: db FF 24 85 84 FB 48 00
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>11</ID>
      <Description>"all"</Description>
      <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
      <LastState Value="" RealAddress="00000000"/>
      <GroupHeader>1</GroupHeader>
      <CheatEntries>
        <CheatEntry>
          <ID>236</ID>
          <Description>"Cross Faction Inspect"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
00477d49:
db 90 90 90 90 90 90



[DISABLE]
00477d49:
db 0F 85 F9 02 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>237</ID>
          <Description>"Cross Faction Whisper"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
0047f629:
db 90 90 90 90 90 90

0047ff69:
db 90 90 90 90 90 90


[DISABLE]
0047f629:
db 0F 85 DF 00 00 00

0047ff69:
db 0F 85 DF 00 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>238</ID>
          <Description>"Union Summon Raid"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(ItemSummonRaid)
label(checkcountry)
label(failed)
label(exit)

newmem:
call ps_game.exe+4ECF0
//esi=target player,edi=source player
//check map
originalcode:
pushad
movzx eax,word ptr [esi+0x160]
movzx ebx,word ptr [edi+0x160]
cmp eax,(int)45
je checkcountry
cmp ebx,(int)45
je checkcountry

jmp ItemSummonRaid

//checkcountry and check if same map
checkcountry:
cmp eax,ebx        //if they are in the same map which we speicifys
je ItemSummonRaid

movzx eax,byte ptr [esi+0x12d]
movzx ebx,byte ptr [edi+0x12d]
cmp eax,ebx
jne failed

/*
push eax               //party table
push ecx               //leader id
mov eax,[edi+17f4]
mov ecx,[eax+0c]       //leader id
imul ecx,ecx,8
add  ecx,18
mov  ecx,[eax+ecx]   //leader address
cmp edi,ecx          //compare address check is leader
pop ecx
pop eax
je 0049e4ea        //if yes
*/

ItemSummonRaid:

mov eax,dword ptr ds:[edi+0x58FC]
mov ecx,dword ptr ds:[edi+0x5900]
lea eax,dword ptr ds:[eax+eax*2]     // eax=bag,ecx=slot
lea edx,dword ptr ds:[ecx+eax*8]
imul edx,edx,4
mov eax,dword ptr ds:[edi+edx+0x1C0]
mov eax,dword ptr ds:[eax+30]
cmp [eax],(int)100045                 //orginal item id
popad
jne 0049e4ea   //success addr
/*
mov eax,dword ptr ds:[eax+0x30]
cmp byte ptr ds:[eax+0x46],0x1F
*/



exit:
jmp returnhere

failed:
popad
jmp 0049E517



"ps_game.exe"+9E4E1:

jmp newmem

returnhere:

[DISABLE]

//code from here till the end of the code will be used to disable the cheat

dealloc(newmem)

"ps_game.exe"+9E4E1:

call ps_game.exe+4ECF0

//Alt: db E8 0A 08 FB FF
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>20</ID>
          <Description>"UseingItemUnlessGotXXXkill"</Description>
          <LastState/>
          <VariableType>Auto Assembler Script</VariableType>
          <AssemblerScript>[ENABLE]
alloc(newmem,2048) //2048 enough dont change
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp byte ptr [ebx+0x40],(int)100 //item type
jne originalcode
cmp byte ptr [ebx+0x41],(int)1   //item id
jne originalcode

cmp dword ptr [ebp+148],0x50  //kills: plz use hex format
jl ps_game.exe+7469F






originalcode:
cmp byte ptr ds:[ebx+0x42],0x0
je ps_game.exe+7469F

exit:
jmp returnhere

"ps_game.exe"+72E1A:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+72E1A:
je ps_game.exe+7469F
//Alt: db 0F 84 7F 18 00 00
</AssemblerScript>
        </CheatEntry>
        <CheatEntry>
          <ID>24</ID>
          <Description>"Free For All"</Description>
          <Options moActivateChildrenAsWell="1" moDeactivateChildrenAsWell="1"/>
          <LastState Value="" RealAddress="00000000"/>
          <GroupHeader>1</GroupHeader>
          <CheatEntries>
            <CheatEntry>
              <ID>18</ID>
              <Description>"FFA and level attack"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(AttackIllegal)
label(AttackLegal)
label(originalcode)
label(exit)

newmem:
push ebx
movzx esi byte ptr [edx+136]
movzx ebx,byte ptr [eax+136]
cmp esi,ebx                    //level equal
pop ebx
jne AttackIllegal

cmp byte ptr [edx+160],(int)60  //map id
jne originalcode


AttackLegal:
jmp 00457e35



AttackIllegal:                //eax=main
mov byte ptr [eax+1544],0
jmp 00457e39

originalcode:
mov dl,[edx+0000012D]

exit:
jmp returnhere

"ps_game.exe"+57E27:
jmp newmem
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+57E27:
mov dl,[edx+0000012D]
//Alt: db 8A 92 2D 01 00 00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>23</ID>
              <Description>"MoveOutOfSpecialMap"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)

newmem:
cmp dword ptr [esi+0x17f4],0          //check party
je originalcode

cmp byte ptr [esi+0x160],(int)78     //special map id
jne originalcode

cmp word ptr [esi+0x160],ax          //if map didnt change
je originalcode

pushad                              //exit party
mov eax,esi
mov ecx,[eax+0x17f4]
call 0044F5F0
popad

originalcode:
mov [esi+00000160],ax

exit:
jmp returnhere

"ps_game.exe"+148E0:
jmp newmem
nop
nop
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+148E0:
mov [esi+00000160],ax
//Alt: db 66 89 86 60 01 00 00
</AssemblerScript>
            </CheatEntry>
            <CheatEntry>
              <ID>22</ID>
              <Description>"UseMoveRuneInSpecialMap"</Description>
              <LastState/>
              <VariableType>Auto Assembler Script</VariableType>
              <AssemblerScript>[ENABLE]
//code from here to '[DISABLE]' will be used to enable the cheat
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(CheckCountry)
label(exit)

newmem:
pushad
movzx ebx,byte ptr [ebp+0x160]

cmp eax,(int)78                //target mapid
je CheckCountry
cmp ebx,(int)78                //src mapid
je CheckCountry

jmp originalcode


CheckCountry:
cmp ebx,eax                     //we allow same map
je originalcode

movzx ebx,byte ptr [ebp+0x12d]  //we allow same country
movzx ecx,byte ptr [esi+0x12d]
cmp ebx,ecx
je originalcode

popad
jmp 00473576           //wrong addr


originalcode:
popad
call ps_game.exe+72880

exit:
jmp returnhere

"ps_game.exe"+734FC:
jmp newmem
returnhere:




[DISABLE]
//code from here till the end of the code will be used to disable the cheat
dealloc(newmem)
"ps_game.exe"+734FC:
call ps_game.exe+72880
//Alt: db E8 7F F3 FF FF
</AssemblerScript>
            </CheatEntry>
          </CheatEntries>
        </CheatEntry>
      </CheatEntries>
    </CheatEntry>
    <CheatEntry>
      <ID>231</ID>
      <Description>"Auto Assemble script"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// FFA //
[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(partyonereturnhere)
label(partyoneoriginalcode)
label(partyonemem)
label(partytworeturnhere)
label(partytwooriginalcode)
label(partytwomem)
label(trrreturnhere)
label(trroriginalcode)
label(trrmem)

newmem:
cmp word ptr [eax+164],(int)107
je 0044BE48
jmp originalcode

originalcode:
mov dl,[edx+0000012D]
jmp returnhere

partyonemem:
mov dl, byte ptr [edi+164]
cmp dl,40
je 004678D6
cmp dl,2D
je 004678D6
cmp dl,2E
je 004678D6
cmp dl,2F
je 004678D6
cmp dl,2A
je 004678D6
cmp word ptr ds:[ebp+164],(int)107
je 004678CD
jmp partyoneoriginalcode

partyoneoriginalcode:
mov dl,[edi+0000012D]
jmp partyonereturnhere

partytwomem:
mov dl, byte ptr [esi+164]
cmp dl,40
je 004677A7
cmp dl,2D
je 004677A7
cmp dl,2E
je 004677A7
cmp dl,2F
je 004677A7
cmp dl,2A
je 004677A7
mov dl,[esi+0000012D]
cmp word ptr ds:[ebp+164],(int)107
je 0046779D
jmp partytwooriginalcode

partytwooriginalcode:
mov dl,[esi+0000012D]
jmp partytworeturnhere

trrmem:
cmp word ptr ds:[eax+164],(int)107
je 00465E18
jmp trroriginalcode

trroriginalcode:
mov cl,[ebp+0000012D]
jmp trrreturnhere

0044BE5B:
jmp newmem
nop
returnhere:

004678BF:
jmp partyonemem
nop
partyonereturnhere:

0046778F:
jmp partytwomem
nop
partytworeturnhere:

004664C3:
jmp trrmem
nop
trrreturnhere:

[DISABLE]
dealloc(newmem)

0044BE5B:
mov dl,[edx+0000012D]

004678BF:
mov dl,[edi+0000012D]

0046778F:
mov dl,[esi+0000012D]

004664C3:
mov cl,[ebp+0000012D]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>232</ID>
      <Description>"Auto Assemble script"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>// FFA //
[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(partyonereturnhere)
label(partyoneoriginalcode)
label(partyonemem)
label(partytworeturnhere)
label(partytwooriginalcode)
label(partytwomem)
label(trrreturnhere)
label(trroriginalcode)
label(trrmem)

newmem:
cmp word ptr [eax+164],(int)60
je 0044BE48
jmp originalcode

originalcode:
mov dl,[edx+0000012D]
jmp returnhere

partyonemem:
mov dl, byte ptr [edi+164]
cmp dl,40
je 004678D6
cmp dl,2D
je 004678D6
cmp dl,2E
je 004678D6
cmp dl,2F
je 004678D6
cmp dl,2A
je 004678D6
cmp word ptr ds:[ebp+164],(int)60
je 004678CD
jmp partyoneoriginalcode

partyoneoriginalcode:
mov dl,[edi+0000012D]
jmp partyonereturnhere

partytwomem:
mov dl, byte ptr [esi+164]
cmp dl,40
je 004677A7
cmp dl,2D
je 004677A7
cmp dl,2E
je 004677A7
cmp dl,2F
je 004677A7
cmp dl,2A
je 004677A7
mov dl,[esi+0000012D]
cmp word ptr ds:[ebp+164],(int)60
je 0046779D
jmp partytwooriginalcode

partytwooriginalcode:
mov dl,[esi+0000012D]
jmp partytworeturnhere

trrmem:
cmp word ptr ds:[eax+164],(int)60
je 00465E18
jmp trroriginalcode

trroriginalcode:
mov cl,[ebp+0000012D]
jmp trrreturnhere

0044BE5B:
jmp newmem
nop
returnhere:

004678BF:
jmp partyonemem
nop
partyonereturnhere:

0046778F:
jmp partytwomem
nop
partytworeturnhere:

004664C3:
jmp trrmem
nop
trrreturnhere:

[DISABLE]
dealloc(newmem)

0044BE5B:
mov dl,[edx+0000012D]

004678BF:
mov dl,[edi+0000012D]

0046778F:
mov dl,[esi+0000012D]

004664C3:
mov cl,[ebp+0000012D]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>233</ID>
      <Description>"Auto Assemble script"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(partyonereturnhere)
label(partyoneoriginalcode)
label(partyonemem)
label(partytworeturnhere)
label(partytwooriginalcode)
label(partytwomem)
label(trrreturnhere)
label(trroriginalcode)
label(trrmem)

newmem:
cmp word ptr [eax+164],(int)60
je 0044BE48
jmp originalcode

originalcode:
mov dl,[edx+0000012D]
jmp returnhere

partyonemem:
mov dl, byte ptr [edi+164]
cmp dl,40
je 004678D6
cmp dl,2D
je 004678D6
cmp dl,2E
je 004678D6
cmp dl,2F
je 004678D6
cmp dl,2A
je 004678D6
cmp word ptr ds:[ebp+164],(int)60
je 004678CD
jmp partyoneoriginalcode

partyoneoriginalcode:
mov dl,[edi+0000012D]
jmp partyonereturnhere

partytwomem:
mov dl, byte ptr [esi+164]
cmp dl,40
je 004677A7
cmp dl,2D
je 004677A7
cmp dl,2E
je 004677A7
cmp dl,2F
je 004677A7
cmp dl,2A
je 004677A7
mov dl,[esi+0000012D]
cmp word ptr ds:[ebp+164],(int)60
je 0046779D
jmp partytwooriginalcode

partytwooriginalcode:
mov dl,[esi+0000012D]
jmp partytworeturnhere

trrmem:
cmp word ptr ds:[eax+164],(int)60
je 00465E18
jmp trroriginalcode

trroriginalcode:
mov cl,[ebp+0000012D]
jmp trrreturnhere

0044BE5B:
jmp newmem
nop
returnhere:

004678BF:
jmp partyonemem
nop
partyonereturnhere:

0046778F:
jmp partytwomem
nop
partytworeturnhere:

004664C3:
jmp trrmem
nop
trrreturnhere:

[DISABLE]
dealloc(newmem)

0044BE5B:
mov dl,[edx+0000012D]

004678BF:
mov dl,[edi+0000012D]

0046778F:
mov dl,[esi+0000012D]

004664C3:
mov cl,[ebp+0000012D]
</AssemblerScript>
    </CheatEntry>
    <CheatEntry>
      <ID>234</ID>
      <Description>"Auto Assemble script"</Description>
      <LastState/>
      <VariableType>Auto Assembler Script</VariableType>
      <AssemblerScript>[ENABLE]
alloc(newmem,1024)
label(returnhere)
label(originalcode)

newmem:
// By MapID
cmp word ptr [esi+160],#18
je 00465222
cmp word ptr [esi+160],#30
je 00465222
cmp word ptr [esi+160],#31
je 00465222
cmp word ptr [esi+160],#32
je 00465222
cmp word ptr [esi+160],#104
je 00465222
originalcode:
cmp byte ptr [esp+24],00
jmp returnhere

00465087:
jmp newmem
returnhere:

[DISABLE]
dealloc(newmem)

00465087:
cmp byte ptr [esp+24],00
</AssemblerScript>
    </CheatEntry>
  </CheatEntries>
  <UserdefinedSymbols/>
</CheatTable>
